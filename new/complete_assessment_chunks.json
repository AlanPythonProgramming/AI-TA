[
    {
        "filePath": "./assessments\\lab01_git\\lab01_git.md",
        "chunks": [
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk is the introduction and initial setup instructions for a lab exercise on Git, specifically focusing on creating a GitLab repository, checking for existing SSH keys, and generating a new SSH key if necessary. It is positioned at the beginning of the document, following the lab title and overview, and precedes detailed instructions on using Git and GitLab.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-2%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50-3498DB)\n&nbsp;\n![Files Assessed](https://img.shields.io/badge/Files%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-no-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n**This lab is designed to be procedural and cater for people who have no prior experience with git. You can attempt it immediately before watching the corresponding lecture. The week 1 lecture will then cover git in more detail to reinforce your knowledge.**\n\n**Note**: Week 1 labs are worth 0% of your final grade. However, we will still automark this lab for you and provide you with a score out of 1 to give you a feel of the process. Please see our guide on the Course Website for further details.\n\n[TOC]\n\n## Due Date\n\nWeek 2 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n--NEW CHUNK--\n\n## GitLab\n\nThis is your repository (repo) on GitLab for this lab exercise.\n\nIf you are familiar with GitHub then you will find GitLab familiar. You are currently reading text from [README.md](README.md), a file stored in this repository.\n\nFeel free to browse through GitLab and familiarise yourself with it.\n\nIf this is your first time using Git and GitLab, the guide below will help you get started.\n\n## Adding Your ED25519 SSH Key to GitLab\n\n<div align=\"center\">\n\n![SSH Key Diagram](assets/ssh-key-diagram.svg)\n\n</div>\n\nThe instructions below are geared towards working in a Linux environment (similar to CSE machines, which can be accessed through VLAB).\n\nIf you are on Windows, it is recommended that you install Windows Subsystem for Linux (WSL). See the Getting Started guide on Webcms3 for further information.\n\n### Step 1 - Checking For Existing Key\n\nTo check if you have an ed25519 ssh key, use the `cat` command (**do not copy the shell prompt, aka dollar symbol: `$`**):\n\n```shell\n$ cat ~/.ssh/id_ed25519.pub\n```\n\nThere are two possibilities from this point.\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk provides detailed instructions on checking for existing SSH keys, generating a new ED25519 SSH key, and adding the SSH key to GitLab, which is essential for students to set up their GitLab environment for version control in the lab exercise. It follows the initial steps of setting up Git and SSH key management in the document.",
                "content": "#### 1.1. No existing keys\n\nFor most students, what you will see is:\n\n```shell\n$ cat ~/.ssh/id_ed25519.pub\ncat: /import/ravel/5/z5313514/.ssh/id_ed25519.pub: No such file or directory\n```\n\nIn this case, you will need to complete [Step 2 - Generating a New Key](#step-2---generating-a-new-key).\n\n#### 1.2. A key already exists\n\nWhile you are **unlikely to see this**, if a key does indeed exist, the output will be similar to:\n\n```shell\n$ cat ~/.ssh/id_ed25519.pub\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGaEIgJc0mYJrqCotx44BITlQFA8cdRIiEh4HgEjf2aQ z5555555@weaver\n```\n\nIn this case, you can skip to [Step 3 - Adding Your SSH Key to GitLab](#step-3---adding-your-ssh-key-to-gitlab).\n\n### Step 2 - Generating a New Key\n\nTo generate a new ed25519 ssh key, use the command:\n```shell\n$ ssh-keygen -t ed25519\n```\n\nFor each prompted question, you can leave them blank and simply hit enter. For example:\n\n```shell\n$ ssh-keygen -t ed25519\nGenerating public/private ed25519 key pair.\nEnter file \u0457n which to save the key (/import/ravel/5/z5555555/.ssh/id_ed25519):\nCreated directory \u2032/import/ravel/5/z5555555/.ssh\u2032.\nEnter passphrase (empty fo\u1e5f no passphrase):\nEnter same passphrase again:\nYour identification has been saved \u0457n /import/ravel/5/z5555555/.ssh/id_ed25519.\nYour public key has been saved \u0457n /import/ravel/5/z5555555/.ssh/id_ed25519.pub.\nThe key fingerprint is:\ncf:16:45:51:3f:7a:db:a0:71:7d:1c:d9:1a:95:1e:01 z5555555@weaver\nThe key\u2032s randomart image is:\n+--[ED25519 256]--+\n| H A . D .E . G. |\n| R   Y..  . N  I |\n| . A .. .  +.+ U |\n|+ . .  . +.o. L .|\n|.X + .. S o B  I |\n|O = + N  .. .A N.|\n| B o    I .   A  |\n|* ...o . o .T  . |\n|.o.o+..  o   A M |\n+----[SHA256]-----+\n```\n\n### Step 3 - Adding Your SSH Key to GitLab\n\n1. Copy your public ssh key, which can be retrieved using the command:\n    ```shell\n    $ cat ~/.ssh/id_ed25519.pub\n    ```\n    Here is an **example of what you should copy** from the output:\n    ```text\n    ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGaEIgJc0mYJRqcoNx44BITlQFA8cdRIiEh4HgEjf2aQ z5555555@weaver\n    ```\n\n1. Go to: https://nw-syd-gitlab.cseunsw.tech/-/user_settings/ssh_keys. Log in again if you are asked to do so.\n\n1. Paste the key into the large text area for **Key**. The **Title** field underneath should be filled automatically.\n\n1. Click the **Add Key** button.\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk is situated within the document as a section that introduces the fundamental concepts and setup procedures for using Git, following the initial instructions on adding an SSH key to GitLab and preceding the cloning process of a repository. It serves as a foundational guide for users who are new to Git, detailing installation and configuration steps necessary for effective version control.",
                "content": "## Using Git\n\n<div align=\"center\">\n\n![Git Diagram](assets/git-usage-diagram.svg)\n\n</div>\n\nThis exercise is intended to help you familiarise yourself with git.\n\nIf you have not used git before, it can take a while to get used to it and learn how it works.\n\nMake sure you understand exactly what you're doing in the following exercise. **DO NOT BLINDLY ENTER IN THE COMMANDS WITHOUT KNOWING WHAT THEY DO.**\n\n### Background\n\nGit is a distributed version control system. It allows you to record changes to a set of files over time and synchronise those changes across many *repositories*.\n\nWhat you are looking at now is one of these repositories, stored on a remote GitlLb server at UNSW. You do not have direct access to that computer, so to make changes to files contained within it, you need to copy (or `pull`) them to a *local* repository. You can then make changes to this local repository and `push` those changes to the remote GitLab server.\n\nFor this to happen, however, git needs to be installed and configured.\n\n--NEW CHUNK--\n\n### Setting Up\n\n#### Part 1 - Checking If Git is Installed\n\nUse the command below to check if git is installed on your machine:\n\n```shell\n$ git --version\n```\nIf it is installed you will see something similar to:\n```text\ngit version 2.30.2\n```\nIf you do not have git installed, you will see something like:\n```text\nbash: git: command not recognized\n```\n\nInstall git with [Part 2 - Installing Git](#part-2---installing-git) if necessary, else skip to [Part 3 - Git Configuration](#part-3---git-configuration).\n\n#### Part 2 - Installing Git\n\nThe installation process will vary depending on your operating system. Note that **if you are on Windows using WSL, you should follow the Linux instructions**.\n\n- **Linux** - Follow instructions at https://git-scm.com/download/linux\n- **Mac** - Either download from https://git-scm.com/download/mac or install using [Homebrew](https://brew.sh/) or equivalent.\n- **Windows** - Download from https://gitforwindows.org/\n\nThere are other ways of getting git for all of these platforms. You are free to use whichever way works best for you - however, our instructions below will assume that you are working in a Linux environment.\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk is situated within the \"Using Git\" section of the document, specifically detailing the configuration of Git for first-time users, followed by instructions on cloning a repository and making commits, which are essential steps for working with Git in a local environment.",
                "content": "#### Part 3 - Git Configuration\n\nConfigure git if you have not used it before, using the four commands below (NOTE: replace the first two lines with your FULL name and UNSW zID Email address. Do not copy the commented examples, i.e. '`#`' symbol and beyond):\n```shell\n$ git config --global user.name \"Put your FULL NAME Here\"      # e.g. \"Tam Nguyen\"\n$ git config --global user.email \"zID@ad.unsw.edu.au\"          # e.g. \"z5313514@ad.unsw.edu.au\n$ git config --global push.default simple\n$ git config --global pull.rebase false\n```\n\n--NEW CHUNK--\n\n### Cloning\n\nA repository (or repo for short) is a directory that is linked with git).\n\nWhen you `clone` a repository, git will copy all files in the repo, as well as a complete history of the changes, or commits, created for those files to your local machine. Cloning a repo is a necessary step before you can make changes.\n\nFor each lab task in this course, a repo will be created for you on GitLab. You will use it to store your work as you complete it.\n\nTo clone this lab's repo, you first need to get its SSH URL. To do this, click on the blue **Code** button at the top-right of this page. Copy the URL under **Clone with SSH** (you can click the copy icon on the right of the link)\n\n![Git Clone Diagram](assets/git-clone-location.png)\n\nTo make the actual clone, navigate to the directory (folder) where you want to store COMP1531-related exercises and run the following commands:\n\n```shell\n$ git clone SSH_URL_YOU_COPIED_FROM_GITLAB\n```\n\nYou may be prompted with a question asking if you would like to continue connecting - type yes as shown below:\n\n![Git](assets/git-clone-prompt-add-host.png)\n\nFinally, to interact with the git repository, make sure to change your directory:\n\n```shell\n$ cd lab01_git\n```\n\n\nIf you have completed [Adding Your ED25519 SSH Key to GitLab](#adding-your-ed25519-ssh-key-to-gitlab) correctly, you should **not** be prompted to enter a password.\n\n--NEW CHUNK--\n\n### Making a commit\n\nAfter cloning the repo, you are ready to work on the codebase locally.\n\nA commit represents a set of changes to the files in a repository and a message describing those changes for human readers. Good use of git involves many commits with detailed messages.\n\nBefore you can `commit`, you have to *stage* your changes, effectively telling git which changes you want to commit and which changes you don't.\n\nMaking commits do not replicate your changes to the remote repository on GitLab. For this you need to `push` your commits, uploading them to the remote server. When collaborating with others, it is important not only to commit frequently but also to push often.\n\nIn general, the commands to commit and push are as follows:\n```shell\n$ git add FILE_TO_COMMIT1 FILE_TO_COMMIT2 etc             # Stage\n$ git commit -m \"Detailed message describing the changes\" # Commit\n$ git push                                                # Push to GitLab\n```\n\nAnother very useful command to see the current state of git is:\n```shell\n$ git status\n```\n\nFollow these steps to see them in action:\n\n1. Create a file called `first.txt` with a single line containing a message of your choice and save it in the repo directory. One quick way to do this is:\n    ```shell\n    $ echo \"I am first\" > first.txt\n    ```\n    Confirm that you can see this file with the command:\n    ```shell\n    $ ls\n    ```\n\n1. Go back to your terminal and enter the following commands:\n    ```shell\n    $ git status\n    $ git add first.txt\n    $ git status\n    $ git commit -m \"Added a line to first.txt\"\n    $ git status\n    $ git push\n    $ git status\n    ```\n\n1. **MAKE SURE YOU UNDERSTAND THE PURPOSE OF EACH OF THE COMMANDS ABOVE!** If you are unsure about any of them, ask your tutor or lab assistant.\n1. Go back to GitLab and confirm that your changes have been pushed to the server (you may need to refresh the page).\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk is situated after the initial instructions on using Git and before the section on testing basics. It emphasizes the importance of collaboration in Git, detailing how to update a local repository with changes made by others on GitLab, and includes step-by-step instructions for practicing the `git pull` command.",
                "content": "## Working with others\n\nUsually, when you are using git, it is in a team. This means that you will not be the only one making changes. If someone else makes a change and pushes it to the server, your local repo will not have the most up-to-date version of the files. Fortunately, git makes it easy to update your local copy with the `git pull` command.\n\nThis command checks the remote server that your local repo is linked to and ensures that all files are up to date. This prevents you from accidentally doing things like implementing the same feature someone else has already done and also lets you use other people's work (e.g. new functions) when developing.\n\nPulling regularly is one of the **most important** practices in git!\n\nUnfortunately, at the moment you are just working individually. But GitLab still gives us a nice way to practice a `git pull`.\n\n**Instructions:**\n\n1. View your repo on GitLab (i.e. this webpage, at the very top). Make sure to **refresh** the page.\n2. Click on the `first.txt` file and confirm that the line you have \"pushed\" from your terminal is present.\n3. Click the 'Edit' button on the right-hand side (it might say \"Open in Web IDE, in which case click on the dropdown arrow to see 'Edit single file').\n\n    ![Git Diagram](assets/gitlab-edit-single-file.png)\n\n4. Make a small change to the line of text and click the \u2018Commit Changes\u2019 button at the bottom of the screen.\n5. This will update `first.txt` on GitLab but not your local environment. In the terminal, retrieve these changes with the command:\n    ```shell\n    $ git pull\n    ```\n6. Confirm that your local `first.txt` now has the changes you made on the GitLab website.\n\n--NEW CHUNK--\n\n## Testing Basics\n\nTo check that you have completed this exercise correctly, use the command:\n\n```shell\n$ bash test_git_basics.sh\n```\n\n---\n\nNow is a good time to **take a long break from Git** :).\n\nYou should be able to complete the remaining labs in week 1 with the knowledge above.\n\n---\n\n--NEW CHUNK--\n\n# Branching and Merging\n\n<div align=\"center\">\n\n![Git Branches Merge Diagram](assets/git-branches-merge.svg)\n\n</div>\n\nThis next section is considered a more advanced part of git. You are recommended to complete this after practising the submission of `lab01_leap`, and one of either `lab01_objects` or `lab01_academics`.\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk is situated within the \"Branching and Merging\" section of the document, which follows the introductory content on using Git and GitLab. It specifically focuses on the concept of branching in Git, explaining its importance, providing useful commands, and detailing the steps to create and manage branches effectively.",
                "content": "## Branching\n\n**Branches** are a vital part of Git and allow people to work on separate parts of the codebase without interfering with one another. This minimises the risk of breaking a product that is visible to the client since breaking one branch will not have an impact on any other.\n\nGood use of git will involve separating distinct features of the project such that they can be worked on separately and having them in their branch. These branches can then be merged when they are ready.\n\nUseful commands for branches:\n\n```shell\n$ git checkout -b NEW_BRANCH_NAME # Create a new branch and switch to it\n$ git branch                      # List all current branches\n$ git checkout BRANCH_NAME        # Switch to an existing branch\n```\n\nFollow these instructions to create a branch:\n\n1. Create and checkout a new branch called `new_branch`:\n    ```shell\n    $ git checkout -b new_branch\n    ```\n\n1. List your branches to confirm this:\n    ```shell\n    $ git branch\n    ```\n    You should see an asterisk (`*`) next to `new_branch`, indicating that you are currently on this branch.\n\n1. Create a new file called `second.txt`. A quick way to do this would be:\n    ```shell\n    $ echo \"I am second\" > second.txt\n    ```\n\n1. Use git to `add`, `commit` and `push` your changes. Refer back to [Making a commit](#making-a-commit) if necessary.\n\n1. The above step may give you the following error:\n    ```\n    fatal: The current branch new_branch has no upstream branch.\n    To push the current branch and set the remote as upstream, use\n\n        git push --set-upstream origin new_branch\n    ```\n    This means that the branch you tried to push to does not exist on GitLab - you've only created it locally!\n\n1. To fix this, you can copy the command containing `--set-upstream` that git told us about in the output above, or the shorter form:\n    ```shell\n    $ git push -u origin new_branch\n    ```\n\n    **Note:** This step above **only needs to be done the first time you try pushing a new branch to GitLab** After you have done this once, you can use\n    ```shell\n    $ git push\n    ```\n    to continue pushing to the branch you are currently on.\n\n1. Refresh the GitLab page and confirm that your branch has been created. You can do this by clicking on the dropdown menu near the top-left (it should currently say \"master\").\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk is situated within the \"Branching and Merging\" section of the document, specifically focusing on the process of merging branches in Git, including the steps to merge a feature branch back into the master branch and how to handle merge conflicts that may arise during this process.",
                "content": "## Merging\n\nMerging branches is used to combine the work done on two different branches and is where git truly shines. Git will compare the changes done on both branches and decide (based on what changes were done to what sections of the file and when) what to keep. Merges are most often done when a feature branch is complete and ready to be integrated with the master branch.\n\nSince we have finished our work on `new_branch`, we can merge it back into the master branch.\n\n**NOTE**: It is strongly recommended, both in this course and in general, to always ensure the code on the `master` branch works correctly and is free of bugs. This is not always easy to achieve, but you should endeavour to keep the master branch as *stable* as possible.\n\nAnother recommendation is to **merge *master* into your branch *before* merging *your branch* back into master** as this will ensure that any merge into the master will be without conflict.\n\nIn general, merges are done by:\n\n```shell\n$ git merge [target] # Merge the target branch into the current branch\n```\n\n**Note:** A successful merge automatically uses the commits from the source branch. This means that the commits have already been made, you just need to push these to the server (`git push`)\n\nTo merge your changes from above:\n1. Confirm that we are still on `new_branch`:\n    ```shell\n    $ git branch # We can also use git status\n    ```\n\n1. Switch back to the `master` branch\n    ```shell\n    $ git checkout master\n    ```\n\n1. Merge `new_branch` into our current `master` branch. This should contain the changes to `second.txt`.\n    ```shell\n    $ git merge new_branch\n    ```\n\n1. Push the successful merge to GitLab\n\n1. Refresh the GitLab page and confirm that `new_branch` has been merged to master.\n\n--NEW CHUNK--\n\n### Merge conflicts\n\nMerge conflicts occur when git cannot determine which change you want when merging two branches that have each modified the same file.\n\nWhile they can sometimes be avoided with good use of git like small and regular pushing, pulling, and merging, you will likely face them quite often throughout the term.\n\nFor this part, we will engineer a merge conflict to get a taste of what they are, how they occur and how we can fix them. The process may seem involved but it is quite common when multiple people are working on a project simultaneously.\n\n1. On your local master branch, create a new file called `third.txt`:\n    ```shell\n    $ git checkout master\n    $ echo \"I am third\" > third.txt\n    ```\n\n1. `Add`, `commit` and `push` your changes in `third.txt` to GitLab's `master` branch\n\n1. Switch to (`checkout`) your local `new_branch`.\n\n1. Create `third.txt` again, but with a different message. For example,\n    ```shell\n    $ echo \"3rd time's the charm\" > third.txt\n    ```\n\n1. `Add`, `commit` and `push` your changes in `third.txt` to GitLab's `new_branch`.\n\n1. Merge `master` into your current branch, `new_branch`:\n    ```shell\n    $ git merge master\n    ```\n\n1. This sequence of steps should create a merge conflict at the top of the `third.txt` with the following output:\n    ```text\n    Auto-merging third.txt\n    CONFLICT (add/add): Merge conflict in third.txt\n    Automatic merge failed; fix conflicts and then commit the result.\n    ```\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk is situated within the \"Merging\" section of the document, specifically addressing the process of resolving merge conflicts that may arise when merging branches in Git, followed by instructions on creating a merge request on GitLab after resolving conflicts.",
                "content": "#### Resolving a merge conflict\n\nResolving a merge conflict is as simple as editing the file normally, choosing what you want to have in the places git wasn't sure.\n\nA merge conflict is physically shown in the file in which it occurs, with the following conflict markers:\n- `<<<<<<<` marks the beginning of the conflicting changes made on the **current** (merged into) branch.\n- `=======` marks the beginning of the conflicting changes made on the **source** (merged from) branch.\n- `>>>>>>>` marks the end of the conflict zone.\n\nFor example:\n\n```text\n<<<<<<< HEAD\n3rd time's the charm\n=======\nI am third\n>>>>>>> master\n```\n\nThe above example could be solved in many ways. One way would be to use the changes made on the source branch (i.e. `master`) and delete those made on our current branch (i.e. `new_branch`).\n\nAnother way would be to combine the change, which can be done by removing the git conflict markers. For example, the result can look something like this:\n```\n3rd time's the charm\nI am third\n```\n\nWe would then just add and commit the resolved file and the merge conflict is finished!\n\nTo fix the conflict you created:\n1. Open `third.txt` in a text editor\n\n1. Decide which change you want to keep and remove the merge conflict markers once you are happy with the change.\n\n1. Use git to `add` and `commit` the resolved merge conflict (don't `push` just yet).\n\n--NEW CHUNK--\n\n### Creating a Merge Request on GitLab\n\nIn your major group project, you will not be able to modify GitLab's master branch by pushing directly to it. Instead, you will need to create a merge request using GitLab's interface.\n\n1. Push your local `new_branch` to GitLab's `new_branch`. Note (from the final step of [Branching](#branching))\nthat we can use the command below because `new_branch` already exists on GitLab:\n    ```shell\n    $ git push\n    ```\n\n1. As we are not pushing to the main (master) branch, git will prompt us with a message containing:\n    ```\n    ...\n    remote: To create a merge request for new_branch, visit:\n    remote:   https://gitlab.cse.unsw.EDU.AU/COMP1531/some/url/in/your/terminal/that/you/can/click/on/\n    ...\n    ```\n\n1. Visit the link in your terminal and it will take you to a **New merge request** page.\n\n1. Enter a description, then click on the \"Create merge request\" button at the bottom of the page. This will take you to another page with the merge request.\n\n1. **For this lab only**, untick (remove the tick) from the box in \"Merge options\" that says \"*Delete source branch when merge request is accepted*\".\n\n1. Click Merge, then go back to your repository's main page on GitLab. Refresh the page if necessary.\n\n1. Back in your terminal, `checkout` the master branch one final time:\n    ```shell\n    $ git checkout master\n    ```\n\n1. Pull the new changes from GitLab to your local machine, and confirm that they are consistent:\n    ```shell\n    $ git pull\n    ```\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: This chunk is situated towards the end of the document, following the section on merging branches in Git. It provides instructions for testing the completion of the branching and merging exercises, followed by a summary of key concepts and workflows related to labs and major projects in Git, emphasizing the importance of using Git commands effectively.",
                "content": "## Testing Branch and Merge\n\nTo check that you have done the branching and merging exercise correctly, use the command\n```shell\n$ bash test_git_advance.sh\n```\n\n---\n\nNow is a good time to **take another break from Git** :).\n\nThis is a lot of information to process so don't expect to understand everything the first time. You can revisit and redo this lab (in part or in full) as many times as you want!\n\n---\n\n--NEW CHUNK--\n\n# Summary\n\nA reminder that the `git status` command will always come in handy :).\n\nAlso, whenever you change your local environment (i.e. your laptop instead of your other home computer), you will need to generate\na new ED25519 SSH key and repeat the setup.\n\n## Labs\n\nYou are allowed to push directly to the master branch when completing lab exercises. The workflow is usually:\n\n1. `git clone INSERT_LAB_SSH_URL`\n1. `cd lab0X_example`\n1. Make changes to the relevant files\n1. `git add FILE1 FILE2 ...`\n1. `git commit -m \"A relevant message for the change\"`\n1. `git push`\n\n## Major Project\n\nAfter cloning the project, below are two scenarios you will likely face.\n\n### Creating a new feature branch\n\nFor example, creating a branch called `FEATURE_BRANCH`:\n\n1. `git checkout master` (we usually want to branch out from the master branch)\n1. `git pull` (get the latest changes from your team members before branching out)\n1. `git checkout -b FEATURE_BRANCH` (branch out from master)\n1. Make changes to the relevant files and save them.\n1. `git add FILE1 FILE2 ...`\n1. `git commit -m \"A relevant message for the change\"`\n1. `git push -u origin FEATURE_BRANCH` (only needed the first time to create the same branch on GitLab, then regular `git push` after)\n1. Refresh GitLab and confirm that your local `FEATURE_BRANCH` branch is present and matches GitLab's `FEATURE_BRANCH`.\n\n### Merging into master\n\n1. Add and commit your final changes to `FEATURE_BRANCH`.\n1. Before merging your `FEATURE_BRANCH` into GitLab's `master`,\n    - it is recommended that you first merge GitLab's `master` into your local `FEATURE_BRANCH`.\n    - this way, conflicts can be resolved locally.\n    - while you can do this by checking out master, pull, then checkout back to your branch and merge, another way is to pull GiLlab's `master` branch directly into your local `FEATURE_BRANCH`:\n        ```shell\n        $ git pull origin master # assuming you are currently on FEATURE_BRANCH\n        ```\n1. Locally resolve any merge conflicts that occurred, then `add`, `commit` and `push` to GiLlab's `FEATURE_BRANCH`.\n1. Follow the link outputted from the `push` command to create a merge request.\n1. Assign yourself as the Assignee and wait for a Reviewer (team member) to approve the merge request.\n1. You can merge `FEATURE_BRANCH` into `master` once the merge request has been approved.\n(it is up to your group to decide the number of approvals from team members necessary before a merge).\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_git -> lab01_git.md: The \"Miscellaneous\" section provides additional useful commands and tips for using Git that are not core to the course, enhancing the reader's understanding and efficiency in managing version control beyond the basic functionalities covered in the main content.",
                "content": "# Miscellaneous\n\n<details close>\n<summary>Other useful commands/tips that are <b>not</b> core to the course</summary>\n\n<br/>\n\n**NOTE: you do not need to know any of the commands below for this course:**\n\n1. `git log`\n    - this command shows you the history of commits locally.\n    - You can pretty-print the result in one line per commit with:\n        ```shell\n        $ git log --color --graph --pretty=tformat:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an %Creset' --abbrev-commit\n        ```\n        However, you can also change the default display behaviour in your `~/.gitconfig` file (located in the home directory of your machine) by adding:\n        ```\n        [format]\n            pretty = tformat:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an %Creset\n        ```\n        and simply use\n        ```shell\n        $ git log\n        ```\n\n1. `git stash`\n    - when you have uncommitted changes (e.g. files in red from `git status`) and you're trying to pull or merge, git will say that it isn't possible to do so because your changes will be overwritten.\n    - What you can do is `git stash` the changes temporarily (which hides them in another location), pull/merge, then `git stash pop` to retrieve these files (potentially resolving conflicts)\n    - it is also useful if you've been working on the wrong branch and would like to move the unsaved changes there. `git stash`, `git checkout correct_branch`, `git stash pop`.\n\n1. `git reset`\n    - There are many uses for this command. We will only cover one of them here.\n    - Supposed you have added files to the index (staging area), i.e. shown in\n      green from `git status`, and wish to remove them from the index (i.e.\n      back to red). This can be done with:\n        ```shell\n        $ git reset FILE_TO_REMOVE_FROM_INDEX\n        ```\n\n1. `git switch`\n    - Sometimes `git checkout` is confused about whether you are using `checkout` on a branch, or a file with the same name.\n    - This is a more explicit way of switching branches and is often recommended.\n\n1. `git diff`\n    - To view the differences between your unsaved changes to your current branch\n    - `git diff --cached` is similar but applies to the index (staging area)\n    - Can also compare two branches, e.g. Supposed we are on `new_branch` and want to see how our `third.txt` differs from the `master` branch:\n        ```shell\n        $ git diff master third.txt\n        ```\n\nFor further details about any git commands, you can always read the manual page. For example:\n```shell\n$ man git status\n```\n\n</details>"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab01_git\\test_git_advance.sh",
        "chunks": [
            {
                "summary": "From assessments -> lab01_git -> test_git_advance.sh: This chunk is a Bash script that checks the number of Git branches and merges in the current repository, providing feedback on whether the user has created branches or performed merges, and indicating success or failure based on these checks.",
                "content": "#!/bin/bash\n\nbranches=`git branch | wc -l`\n\nsuccess=0\nif [ \"$branches\" -eq 1 ]\nthen\n    echo 'You did not create a branch'\n    success=1\nfi\n\nmerges=`git log --merges --format=\"%aE\" | wc -l`\nif [ \"$merges\" -eq 0 ]\nthen\n    echo 'You did not do a merge? :( (at least not on this branch)'\n    success=1\nfi\n\nif [ \"$success\" -eq 0 ]\nthen\n    echo \"Tests passed!\"\nfi\n\nexit $success\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab01_git\\test_git_basics.sh",
        "chunks": [
            {
                "summary": "From assessments -> lab01_git -> test_git_basics.sh: This chunk is a Bash script that checks if the user has configured their Git username and email, counts the number of commits made by the user, and provides feedback based on the commit count.",
                "content": "#!/bin/bash\n\nauthor=\"$(git config user.name)\"\n\nif [ \"$author\" = \"\" ]\nthen\n    echo 'You did not configure your user.name :(.'\n    exit 1\nfi\n\nif [ \"$(git config user.email)\" = \"\" ]\nthen\n    echo 'You did not configure your user.email :(.'\n    exit 1\nfi\n\ncommits=$(git rev-list HEAD --count --author=\"$(echo $author | sed 's/^[ \\t]*//;s/[ \\t]*$//')\")\necho \"Commits (made by: $author):\"\necho \"$commits\"\necho\n\nif [ \"$commits\" -eq 0 ]\nthen\n    echo 'You did not make a commit :(.'\n    exit 1\nelse\n    echo \"Tests passed! Congratulations on making your first few commits!\"\nfi\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab01_leap\\lab01_leap.md",
        "chunks": [
            {
                "summary": "From assessments -> lab01_leap -> lab01_leap.md: The chunk is part of the introductory section of a lab document focused on determining leap years, providing an overview of the lab's purpose, setup instructions, and background rationale for the task. It precedes detailed instructions on implementing specific functions related to leap year calculations.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-30%20minutes-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-no-FEDC56)\n\n---\n\n</div>\n\n**Note**: Week 1 labs are worth 0% of your final grade. However, we will still automark this lab for you and provide you with a score out of 1 to give you a feel of the process. Please see our guide on the Course Website for further details.\n\n[TOC]\n\n# Due Date\n\nWeek 2 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n--NEW CHUNK--\n\n# Background\n\n# Rationale\n\nOne misconception about leap years is that they occur every 4 years and aligns\nwith the Summer Olympic Games - this isn't true!  For example, in 1900, the\nSummer Olympics occurred in a non-leap year, despite 1900 being divisible by 4!\n\nIn this lab, you are tasked with the heavy burden of deducing which\nyear is a leap and which isn't, using the algorithm provided by [Wikipedia](https://en.wikipedia.org/w/index.php?title=Leap_year&oldid=1130382965#Algorithm_for_Gregorian_leap_year).\nBeing able to accurately determine leap years is an important skill that will\nsave you the embarrassment of wrongly celebrating your friend's 29-Feb birthday every century or so.\n\n# Setup\n\n- If you are working on a CSE machine (e.g. via VLAB), ensure that you've run the command `1531 setup`. You only need to do this once at the beginning of the course.\n- Please make sure you have completed `lab01_git` prior.\n- If you have yet to set up `node` on your machine (check with the command `node --version`), see our **Getting Started** guide on Webcms3!\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine. \n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab. To check if you have done this correctly, type `ls` in this new directory to see if you can see the relevant files (including [leap.js](leap.js)).\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_leap -> lab01_leap.md: This chunk provides the interface definitions for the functions to be implemented in the `leap.js` file, detailing their parameters, return types, and expected behaviors, as part of the lab task focused on determining leap years. It follows the setup and background sections of the document, which outline the lab's objectives and requirements.",
                "content": "# Interface: Functions\n\nAn **interface** describes the characteristics of functions without concern for how they are implemented.\n\nBelow is an interface for the functions inside [leap.js](leap.js). Each function has:\n* A function name in the source code\n* A list of parameters that they take in\n* A return value\n* Specific behaviour in cases where invalid input is provided\n\n| Name & Description | Parameters | Return Type         | Errors |\n|------------------|----------|--------------------|------|\n|`isLeap` <br/><br/>Given a strictly positive year, return true if it is a [leap year](https://en.wikipedia.org/w/index.php?title=Leap_year&oldid=1130382965#Algorithm_for_Gregorian_leap_year) and false otherwise. <br/><br/>**Difficulty**: \u2b50 | (year) | `boolean` | N/A |\n|`countLeaps` <br/><br/>Given an array of strictly positive years, return the number of leap years present in the array. <br/><br/>**Difficulty**: \u2b50 | (yearArray) | `number` | N/A |\n|`getNextLeap` <br/><br/>Given a strictly positive year, return the closest leap year **AFTER** the given year. <br/><br/>**Difficulty**: \u2b50 | (year) | `number` | N/A |\n\n\n# Interface: Data Types\n| If the variable name | It is of type |\n| --- | --- |\n| is **year** | `number` |\n| is **yearArray** | `number[]` (which is the same as `Array<number>`)\n\n--NEW CHUNK--\n\n# Task\n\nYour task is to **implement the interface functions as per the details set out in the Interface**.\n\n# Implementation\n\nOpen the file [leap.js](./leap.js) in your preferred text editor. The stub code (a fake temporary implementation) for each function has been provided for you.\n\nComplete all functions in [Interface: Functions](#interface-functions).\n\n# Run & Test\n\nYou can run and test your code by typing the following in a terminal opened in the directory (folder) for this lab:\n```shell\n$ node leap.js\n```\nThis executes the code in [leap.js](leap.js), including the `console.assert` and `console.log` at the bottom of [leap.js](leap.js).\n\nIf you do not see any **'Assertion failed'** printed in the terminal, you have passed all of our starter tests.\nWe encouraged you to write more tests and do more debugging yourself :).\n"
            },
            {
                "summary": "From assessments -> lab01_leap -> lab01_leap.md: This chunk provides guidance on the output format of `console.log` during debugging, emphasizing that the visual presentation of logs does not impact the assessment of function correctness. It is situated before the submission instructions and notes section, which outline the process for submitting the lab and additional testing recommendations.",
                "content": "## Output format of console.log\n\nWhen debugging your code, you *may* find that the output of `console.log` has:\n- different colours (e.g. yellow/brown for numbers)\n- different spacing (e.g. spaces between brackets)\n- new lines (e.g. after an opening bracket)\n- other slight differences in indentation, commas, etc\n\nThis is completely fine. What matters is the returned value of your functions, which is what we will be assessing you on.\n\nUsing `console.log` is strictly for debugging purposes. It will not affect your mark in any way. In other words, how your results are displaved when printed or whether you leave these `console.log` statements in your code has 0 effects on your final automarking result.\n\n--NEW CHUNK--\n\n# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\n# Notes\n- We will only be testing things that are explicitly mentioned in the interface. \n    - For example, in the `isLeap` function, there is no defined behaviour for a non-positive year. \n    - Therefore, **this case will not be tested**.\n    - It is up to you how you want to logically account for this behaviour. This is called making an assumption.\n- Passing the given tests is a good indication of correctness but does not guarantee that you will receive the full mark for the lab.\n- You are advised to do further testing. For this lab, you can add more `console.log` or `console.assert` at the bottom of [leap.js](leap.js).\n- You are not allowed to use any external libraries/modules in this exercise.\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab01_leap\\leap.js",
        "chunks": [
            {
                "summary": "From assessments -> lab01_leap -> leap.js: This chunk defines a function `isLeap` that determines whether a given year is a leap year, as part of a larger JavaScript program that includes additional functions for counting leap years and finding the next leap year.",
                "content": "/**\n * Complete the function below which takes in a year and returns\n * true if it is a leap year and false otherwise.\n * - https://en.wikipedia.org/w/index.php?title=Leap_year&oldid=1130382965#Algorithm_for_Gregorian_leap_year\n *\n * When comparing values, use `===` and `!==` instead of `==` or `!=`.\n * When testing, the 'year' is guaranteed to be a strictly positive integer.\n *\n * @param {number} year - for example, 1999.\n * @returns {boolean} whether the given year is true or false\n */\nfunction isLeap(year) {\n  // TODO: return true or false depending on the year, rather than null.\n  return null;\n}\n"
            },
            {
                "summary": "From assessments -> lab01_leap -> leap.js: The chunk is part of a JavaScript program that defines functions for determining leap years, including a specific function `countLeaps` that counts the number of leap years in a given array of strictly positive years. This function is one of several related to leap year calculations, including checking if a single year is a leap year and finding the next leap year after a given year.",
                "content": "\n/**\n * Given an array of strictly positive years, return the number of\n * leap years present.\n *\n * @param {Array<number>} yearArray - for example, [1899, 1904, 1900, 2000]\n * @returns {number} the number of leap years in the given array\n */\nfunction countLeaps(yearArray) {\n  // TODO\n  return -1;\n}\n"
            },
            {
                "summary": "From assessments -> lab01_leap -> leap.js: This chunk contains the implementation and debugging assertions for the `getNextLeap` function, which is designed to find the closest leap year after a given year, as well as the execution context for testing the `isLeap` and `countLeaps` functions related to leap year calculations.",
                "content": "\n/**\n * Given a strictly positive year, return the closest leap year\n * AFTER the given year.\n *\n * @param {number} year, for example 1999\n * @returns\n */\nfunction getNextLeap(year) {\n  return -1;\n}\n\n//= ========================================================================= //\n\n/**\n * The code below will be executed when you run this file with\n *     $ node leap.js\n *\n * Feel free to modify the code below to do your own debugging.\n * Any modification will have 0 impact on the automarking\n * (we won't be using this!).\n *\n * You do not need to remove/comment them out when submitting. See\n * the lab specification (README.md) for how to make a lab submission.\n */\nconsole.log();\nconsole.log(\"======== START ========\");\nconsole.log(\"For the following console.assert debugging, you pass if no 'Assertion failed' is outputted!\");\n\nconsole.log();\nconsole.log('=== Debugging isLeap ===');\nconsole.assert(isLeap(1899) === false, '1899 is not a leap year!');\nconsole.assert(isLeap(1904) === true, '1904 is a leap year!');\nconsole.assert(isLeap(1900) === false, '1900 is a not a leap year!');\nconsole.assert(isLeap(2000) === true, '2000 is a leap year!');\n\nconsole.log();\nconsole.log('=== Debugging countLeap ===');\nconsole.assert(countLeaps([1899, 1904, 1900, 2000]) === 2, 'There should be 2 leap years!');\nconsole.assert(countLeaps([1899, 1900]) === 0, 'There should be 0 leap years!');\nconsole.assert(countLeaps([4, 400, 4000]) === 3, 'There should be 3 leap years!');\n\nconsole.log();\nconsole.log('=== Debugging getNextLeap ===');\nconsole.assert(getNextLeap(2000) === 2004, 'Should skip 2000 to 2004!');\nconsole.assert(getNextLeap(1697) === 1704, 'Should be 1704, since 1700 is not a leap year!');\n\n/*\n * Note: If the lines below do not print, and you had to stop the program with\n * Ctrl+C, it is likely that your code is stuck in an infinite loop. This most\n * commonly occurs in a while-loop in the getNextLeap function.\n */\nconsole.log();\nconsole.log(\"======== FINISH ========\");\nconsole.log(`\n  NOTE: these console.log messages will have no effect\n  on automarking, so you do not need to remove before\n  submitting your work.\n`)"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab01_objects\\lab01_objects.md",
        "chunks": [
            {
                "summary": "From assessments -> lab01_objects -> lab01_objects.md: This chunk is an introductory section of a lab document that outlines the lab's title, estimated completion time, overall difficulty, and grading information. It also includes a due date and sets the stage for the background and setup instructions necessary for completing the lab, which focuses on understanding and implementing functions related to JavaScript objects.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-1%20hour-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-no-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n**Note**: Week 1 labs are worth 0% of your final grade. However, we will still automark this lab for you and provide you with a score out of 1 to give you a feel of the process. Please see our guide on the Course Website for further details.\n\n[TOC]\n\n# Due Date\n\nWeek 2 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n--NEW CHUNK--\n\n# Background\n\n## Rationale\n\nObjects are extremely important in JavaScript - they can be used to hold a collection of data, methods, other objects, and so much more!\n\nIn this lab, we will explore the tip of the iceberg for what objects can do!\n\n## Setup\n\n- If you are working on a CSE machine (e.g. via VLAB), ensure that you've run the command `1531 setup`. You only need to do this once at the beginning of the course.\n- Please make sure you have completed both `lab01_git` and `lab01_leap` prior.\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine.\n- In your terminal, change your directory (using the `cd` command) to the newly cloned lab. To check if you have done this correctly, type `ls` in this new directory to see if you can see the relevant files (including [objects.js](objects.js)).\n\n--NEW CHUNK--\n\n## Interface: Functions\n\nAn **interface** describes the characteristics of functions without concern for how they are implemented.\n\nBelow is an interface for the functions inside [objects.js](objects.js). Each function has:\n- A function name in the source code\n- A list of parameters that they take in\n- A return value/object\n- Specific behavior in cases where invalid input is provided\n\n---\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> lab01_objects.md: This chunk is part of the \"Interface: Functions\" section in the lab document, detailing the specifications for three functions related to creating and managing user profiles in JavaScript, specifically focusing on profile creation, age comparison, and name updating.",
                "content": "### `profileCreate`\n\n**Description**:  \nCreate a person's profile for the current time.  \nThere should be exactly three properties: `name`, `age`, and `createdAt`.  \n\n- The `updatedAt` property should not be in the returned object.\n- `Age` is calculated by subtracting the `birthYear` from the `currentYear`.\n- You do not need to worry about invalid inputs for `birthYear`, negative age, months of the year, etc.\n\n**Parameters**:  \n```(nameFirst, nameLast, birthYear)```\n\n**Return Type**:  \n```PersonProfile```\n\n**Example Return Value**:\n```json\n{\n  \"name\": \"Feliks Zemdegs\",\n  \"age\": 28,\n  \"createdAt\": 1715151808\n}\n```\n\n**Errors**:  \nN/A  \n\n**Difficulty**: \u2b50\u2b50\n\n---\n\n--NEW CHUNK--\n\n### `profileCompareAge`\n\n**Description**:  \nCompare the age of two different profiles.\n\n- If `profile1`'s age is higher than `profile2`'s age, return any positive number (e.g. `1`).\n- If `profile1`'s age is less than `profile2`'s age, return any negative number (e.g. `-1`).\n- Otherwise, if `profile1`'s age is the same as `profile2`'s age, return `0`.\n\n**Parameters**:  \n```(profile1, profile2)```\n\n**Return Type**:  \n```number```\n\n**Errors**:  \nN/A  \n\n**Difficulty**: \u2b50\n\n---\n\n--NEW CHUNK--\n\n### `profileUpdateName`\n\n**Description**:  \nGiven a profile:\n1. Edit the profile's name to be the new name.\n2. Create (if not existing) or edit the property `updatedAt`.\n\n**Example Input Profile**:\n```json\n{\n  \"name\": \"Alan Becker\",\n  \"age\": 34,\n  \"createdAt\": 1715153483\n}\n```\nIf the function call is:\n```profileUpdateName(profile, \"The Chosen One\")```\n\n**Example Updated Profile**:\n```json\n{\n  \"name\": \"The Chosen One\",\n  \"age\": 34,\n  \"createdAt\": 1715153483,\n  \"updatedAt\": 1715153483\n}\n```\n- The `updatedAt` value will most likely be the same as `createdAt` because Node.js will take less than 1 second to execute the code.\n- You **do not** need to worry about modifying the `age` field.\n- You **do not** need to return anything in this function (i.e., the return type is `undefined` and you should not use the `return` keyword).\n\n**Parameters**:  \n```(profile)```\n\n**Return Type**:  \n```undefined```  \n(This means that you do not need to return anything.)\n\n**Errors**:  \nN/A  \n\n**Difficulty**: \u2b50\n\n---\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> lab01_objects.md: This chunk provides detailed descriptions and specifications for three functions (`profileHasUpdate`, `profileSerialise`, and `profileDeserialise`) that are part of the interface for managing user profiles in JavaScript. It also includes the type definitions for the `PersonProfile` object, which is essential for understanding the expected structure and behavior of the functions outlined in the lab document.",
                "content": "### `profileHasUpdate`\n\n**Description**:  \nReturns `true` if the profile has the property `updatedAt`, otherwise returns `false`.\n\n**Parameters**:  \n```(profile)```\n\n**Return Type**:  \n```boolean```\n\n**Errors**:  \nN/A  \n\n**Difficulty**: \u2b50\n\n---\n\n--NEW CHUNK--\n\n### `profileSerialise`\n\n**Description**:  \nReturns a JSON-serialized string for a profile object.  \n_Hint: Try searching online for a built-in JavaScript function._\n\n**Parameters**:  \n```(profile)```\n\n**Return Type**:  \n```string```\n\n**Errors**:  \nN/A  \n\n**Difficulty**: \u2b50\n\n---\n\n--NEW CHUNK--\n\n### `profileDeserialise`\n\n**Description**:  \nReturns the original object after deserializing the JSON string for a profile object.  \n_Hint: Try searching online for a built-in JavaScript function._\n\n**Parameters**:  \n```(profile)```\n\n**Return Type**:  \n```object```\n\n**Errors**:  \nN/A  \n\n**Difficulty**: \u2b50\n\n--NEW CHUNK--\n\n## Interface: Data Types\n\nThis is the type definition for the input/output of the functions in the [Interface: Functions](#interface-functions).\n\nFor this lab, we will define a template for the object `PersonProfile` as:\n```ts\n{\n  name: string,         // e.g. 'Feliks Zemdegs'\n  age: number,          // e.g. 28\n  createdAt: number,    // e.g. 1715151808\n\n  // NOTE: this field is OPTIONAL, meaning it may or may not exist in the object.\n  // This is denoted by the question mark (?)\n  updatedAt?: number    // e.g. 1715151808\n}\n```\n\n| If a variable...                               | It is of type...                                           |\n|------------------------------------------------|-------------------------------------------------------------|\n| is exactly or starts with the prefix **name** | `string`                                       |\n| is exactly **birthYear**                       | `number`, specifically integer                |\n| is exactly **age**                             | `number`, specifically integer                |\n| is exactly **createdAt**                       | `number`, specifically an [integer UNIX timestamp](https://flaviocopes.com/how-to-get-timestamp-javascript) in seconds (not milliseconds!) |\n| is exactly **updatedAt**                       | `number`, specifically an [integer UNIX timestamp](https://flaviocopes.com/how-to-get-timestamp-javascript) in seconds (not milliseconds!) |\n| is exactly or starts with the prefix **profile**| `PersonProfile`                         |\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> lab01_objects.md: This chunk outlines the task and implementation details for a lab assignment focused on JavaScript objects, including instructions for running and testing the code, as well as tips for debugging and printing objects. It is situated after the background and rationale sections, providing essential guidance for completing the lab functions defined in the interface.",
                "content": "# Task\n\nYour task is to **implement the functions in [Interface](#interface-functions)**.\n\n## Implementation\n\nOpen the file [objects.js](./objects.js) in your preferred text editor. The stub code (interface with a fake temporary implementation) for each function has been provided for you.\n\nBefore replacing them with your implementation, pay close attention to the returned object and see how it aligns with the [Interface: Functions](#interface-fuctions) and [Interface: Data Types](#interface-data-types).\n\nComplete all listed functions.\n\n## Run & Test\n\nYou can run and test your code by typing the following in a terminal that is opened at the directory (folder) for this lab:\n```shell\n$ node objects.js\n```\nThis executes the code in [objects.js](objects.js), including the `console.log` at the bottom of the file.\n\n## Output format of console.log\n\nWhen debugging your code, you *may* find that the output of `console.log` has:\n- different colours (e.g. yellow/brown for numbers)\n- different spacing (e.g. spaces between brackets)\n- new lines (e.g. after an opening bracket)\n- other slight differences in indentation, commas, etc\n\nThis is completely fine. What matters is the returned value of your functions, which is what we will be assessing you on.\n\nUsing `console.log` is strictly for debugging purposes. It will not affect your mark in any way. In other words, how your results are displayed when printed or whether you leave these `console.log` statements in your code has 0 effects on your final automarking result.\n\n### Tips for Printing Objects\n\nFor objects with deeply-nested structures, sometimes they may show up when printed with `console.log` as `[Object]` or `[Array]`. In this case, what you can do is convert them to a JSON string before printing, e.g.\n```javascript\n// rather than:\nconsole.log(yourDeeplyNestedObject);\n\n// we can do:\nconsole.log(JSON.stringify(yourDeeplyNestedObject, null, 2));\n```\nThe third argument, \"2\", will pretty-print your object with 2 space indentation. You can view the documentation for JSON.stringify [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> lab01_objects.md: This chunk is part of the \"Submission\" section of the lab document, which provides instructions on how to submit the completed lab work using Git, along with important notes regarding testing and restrictions on external libraries.",
                "content": "# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\n# Notes\n- We will only test the behaviour explicitly defined in the specification. For cases that are not covered, you can make assumptions about how the relevant functions should behave.\n- Passing the given tests is a good indication of correctness but does not guarantee that you will receive the full mark for the lab.\n- You are advised to do further testing. In this lab, this can be done by adding more `console.log` at the bottom of [objects.js](objects.js)\n- You are not allowed to use any external libraries/modules in this exercise. This simply means that your code should run on a CSE machine without needing to use the `npm install` command\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab01_objects\\objects.js",
        "chunks": [
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk provides a definition and structure for the `PersonProfile` object, which is central to the lab's functionality, detailing its properties and an example instance. It serves as a foundational reference for the subsequent functions that manipulate and utilize `PersonProfile` objects throughout the document.",
                "content": "```\n/**\n * For this lab, we will be referring to PersonProfile as an\n * object containing a name, age and the time the object was created.\n *\n * Below is an example instance of this object:\n * {\n *   name: 'Feliks Zemdegs',\n *   age: 28,\n *   createdAt: 1715151808,\n * }\n *\n * @typedef {Object} PersonProfile\n * @property {string} name - The full name of the person.\n * @property {number} age - The current age of the person.\n * @property {number} createdAt - Unix timestamp in seconds for creation time\n * The syntax [variable] below denotes that the property is optional. This means that it may\n * or may not exist in the object.\n * @property {number} [updatedAt] - Unix timestamp in seconds for update time (optional)\n */\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk defines the `profileCreate` function, which is responsible for creating a person's profile object with properties for name, age, and creation timestamp, while excluding the optional `updatedAt` property. It is part of a larger document that outlines various functions for managing and manipulating person profile objects.",
                "content": "\n\n/**\n * Create a person's profile for the current time. There should be exactly\n * three properties: name, age and createdAt.\n *\n * The updatedAt property should not be in the returned object.\n *\n * Age is calculated by subtracting the birthYear from the currentYear. You\n * do not need to worry about invalid inputs for birthYear, negative age,\n * months of the year, etc.\n *\n * Below is a sample return value:\n * {\n *   name: 'Feliks Zemdegs',\n *   age: 28,\n *   createdAt: 1715151808,\n * }\n *\n * @param {string} nameFirst\n * @param {string} nameLast\n * @param {string} birthYear\n * @returns {PersonProfile}\n */\nfunction profileCreate(nameFirst, nameLast, birthYear) {\n  /* The current year can be retrieved as follows: */\n  const currentYear = new Date().getFullYear();\n  /* A unix timestamp can be created as follows: */\n  const timestamp = Math.floor(Date.now() / 1000);\n\n  // TODO: change the return statement below to the correct type\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk defines the `profileCompareAge` function, which is part of a larger JavaScript module for managing and manipulating `PersonProfile` objects. The function is designed to compare the ages of two profiles and return a numerical value indicating their relative ages, contributing to the overall functionality of the profile management system.",
                "content": "\n\n/**\n * Compare the age of two different profiles.\n * If profile1's age is higher than profile2's age, return any positive number (e.g. 1)\n * If profile1's age is less than profile2's age, return any negative number (e.g. -1)\n * Otherwise, profile1's age is the same as profile2's age, return 0.\n *\n * @param {PersonProfile} profile1\n * @param {PersonProfile} profile2\n * @returns {number}\n */\nfunction profileCompareAge(profile1, profile2) {\n  // TODO: change the return statement below to be a number >0, <0 or 0.\n  return null\n}\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk defines the `profileUpdateName` function, which is part of a larger document focused on managing and manipulating `PersonProfile` objects. The function is responsible for updating a person's name and modifying the `updatedAt` timestamp within the profile, contributing to the overall functionality of creating, comparing, and serializing profile data.",
                "content": "\n\n/**\n * Given a profile,\n * 1. Edit the profile's name to be the new name\n * 2. Create (if not exist), or edit the property updatedAt to be a new\n *    timestamp\n *\n * For example, if the given profile is:\n * {\n *   name: 'Alan Becker', age: 34, createdAt: 1715153483\n * }\n * and we make a function call such as: profileUpdateName('The Chosen One') The\n * new object could look like:\n * {\n *   name: 'The Chosen One', age: 34, createdAt: 1715153483 updatedAt:\n *   1715153612\n * }\n * where updatedAt would depend on the current time. Note that the updatedAt\n * value will 99% of the time be the same as \"createdAt\" because NodeJS will\n * take less than 1 second to execute your code.\n *\n * You do NOT need to worry about the age field\n *\n * You do NOT need to return anything in this function (i.e. the return type is\n * undefined - you should not use the return keyword)\n *\n * @param {PersonProfile} profile\n * @param {string} property\n * @returns {undefined}\n */\nfunction profileUpdateName(profile, newName) {\n  // TODO: edit the given profile object in-place for 'name' and 'updatedAt'.\n}\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk defines the function `profileHasUpdate`, which checks if a given `PersonProfile` object contains the optional `updatedAt` property, returning a boolean value based on its presence. It is part of a larger document that outlines various functions for creating, comparing, updating, serializing, and deserializing person profile objects.",
                "content": "\n\n/**\n * Returns true if the profile has the property 'updatedAt' and false otherwise\n *\n * @param {PersonProfile} profile\n * @returns {boolean}\n */\nfunction profileHasUpdate(profile) {\n  // TODO: return either true or false\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk defines the `profileSerialise` function, which is part of a larger JavaScript program that manages `PersonProfile` objects. The function is intended to convert a `PersonProfile` object into a JSON string, facilitating data serialization for storage or transmission.",
                "content": "\n\n/**\n * Convert the given profile into a JSON string\n * HINT: this function can be done in one line of code using a built-in JavaScript feature.\n *\n * @param {PersonProfile} profile\n * @returns {string}\n */\nfunction profileSerialise(profile) {\n  // TODO: research online for how to convert a JavaScript object to a JSON string\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk is part of a JavaScript module that defines functions for creating and managing a `PersonProfile` object, which includes functionalities for serialization and deserialization of profile data. The `profileDeserialise` function specifically focuses on converting a JSON string back into a `PersonProfile` object, complementing the earlier defined `profileSerialise` function.",
                "content": "\n\n/**\n * Parse the given serialised JSON string into a profile object (i.e. reverting profileSerialise)\n * HINT: this function can be done in one line of code using a built-in JavaScript feature.\n *\n * @param {string} profileString\n * @returns {PersonProfile}\n */\nfunction profileDeserialise(profileString) {\n  // TODO: research online for how to convert a JSON string to a JavaScript object.\n  return null\n}\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk serves as a debugging guide for the JavaScript functions defined in the document, providing instructions and notes on how to test and verify the functionality of the `PersonProfile` related functions using console output.",
                "content": "\n\n// DEBUG YOUR CODE - run with \"node objects.js\"\n// NOTE: you should add more console.log statements to debug your code for each function!\n\nconsole.log(`\n * You will not be able to compare two objects with '==='.\n * For week 1 and week 2, you can simply use console.log() and visually\n * compare the output line by line.\n *\n * NOTE: the output of any console.log statements, e.g. colours/whitespaces\n * does not matter when we mark your code, as we will be assessing the\n * returned objects from your functions directly.\n *\n * This means that if a number appears as brown/yellow, a string appears as\n * green, or some part of your output is on a different line, it is all okay!\n * This is simply how NodeJS format their output :).\n */`)\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk contains debugging console logs for testing the functionality of the `profileCreate`, `profileCompareAge`, and `profileUpdateName` functions, which are part of a lab focused on creating and managing `PersonProfile` objects in JavaScript.",
                "content": "\n\nconsole.log(\"\\n======= DEBUGGING profileCreate ======\");\nconsole.log(\"Calling profileCreate('Michael', 'Jordan', 1963). Check manually if the output is consistent:\");\nconsole.log('Received:', profileCreate('Michael', 'Jordan', 1963));\n\nconsole.log(\"\\n======= DEBUGGING profileCompareAge ======\");\nconsole.log('For this test, the console.assert statements below will print nothing if the test pass');\n// Hard-code the return values of profileCreate:\nconst benTen = { name: 'Ben Ten', age: 10, createdAt: 1716191810 };\nconst benEleven = { name: 'Ben Eleven', age: 11, createdAt: 1716191814 };\nconst benAlsoTen = { name: 'Ben Also-Ten', age: 10, createdAt: 1716191818 };\nconsole.assert(profileCompareAge(benTen, benEleven) < 0, '10 is less than 11, should return a negative number');\nconsole.assert(profileCompareAge(benEleven, benTen) > 0, '11 is greater than 10, should return a positive number');\nconsole.assert(profileCompareAge(benTen, benAlsoTen) === 0, '10 is equal to 10, should return 0');\n\nconsole.log(\"\\n======= DEBUGGING profileUpdateName ======\");\nconsole.log('For this test, you should see the name changes and the \"updatedAt\" field being added after edit');\nconst tennisPlayer = profileCreate('Novak', 'Djokovic', 1987);\nconsole.log('Before edit:', tennisPlayer);\nprofileUpdateName(tennisPlayer, 'Roger Federer');\nconsole.log('After edit:', tennisPlayer);\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk is part of a debugging section in a JavaScript program that manages and manipulates user profiles. It specifically tests the functionality of the `profileHasUpdate` function, which checks if a profile has been updated, by creating a profile for a singer, verifying its initial state, updating the name, and then confirming the update status.",
                "content": "\n\nconsole.log(\"\\n======= DEBUGGING profileHasUpdate ======\");\nconsole.log('For this test, the console.assert statements below will print nothing if the test pass');\nconst singer = profileCreate('Taylor', 'Swift', 1989);\nconsole.assert(profileHasUpdate(singer) === false, 'Error: this profile has not been changed, but profileHasUpdate returned true');\nprofileUpdateName(singer, 'Adele Laurie Blue Adkins');\nconsole.assert(profileHasUpdate(singer) === true, 'Error: this profile been changed, but profileHasUpdate returned false');\n\n"
            },
            {
                "summary": "From assessments -> lab01_objects -> objects.js: This chunk is part of a debugging section in a JavaScript program that defines functions for creating and managing a person's profile. It specifically tests the serialization and deserialization of a profile object to ensure that it can be accurately converted to a JSON string and reverted back to its original form.",
                "content": "\n\nconsole.log(\"\\n======= DEBUGGING profileSerialise ======\");\nconsole.log('For this test, you should manually check if the object was converted to a string and then revert back:');\nconst gamer = profileCreate('Sang-hyeok', 'Lee', 1996);\nconsole.log('Original:', gamer);\nconst serialisedStringGamer = profileSerialise(gamer);\nconsole.log('Serialised as JSON string:', serialisedStringGamer);\nconsole.log('Deserialised JSON string back to original:', profileDeserialise(serialisedStringGamer));\n```"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab02_arrays\\array.js",
        "chunks": [
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk is a function definition for `arraySum`, which is part of a larger JavaScript document containing various utility functions for array manipulation, including calculations for sum, product, minimum, maximum, and other operations on integer arrays.",
                "content": "/**\n * Compute the sum of the integer array.\n * If the array is empty, the sum is 0.\n *\n * @param {Array<number>} array of integers\n * @returns {number} the sum of the array\n */\nfunction arraySum(array) {\n  // FIXME\n  return -999;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk is part of a JavaScript code document that defines various functions for performing operations on integer arrays, including calculating the sum, product, minimum, maximum, and other manipulations of the arrays. The specific function in the chunk, `arrayProduct`, is intended to compute the product of the elements in an integer array, with a default return value for an empty array.",
                "content": "\n\n/**\n * Compute the product of the given integer array.\n * If the array is empty, the product is 1.\n *\n * @param {Array<number>} array of integers\n * @returns {number} the product of the array\n */\nfunction arrayProduct(array) {\n  // FIXME\n  return -999;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk is part of a JavaScript code document that defines various utility functions for manipulating and analyzing arrays of integers, including calculating sums, products, and finding minimum and maximum values. The specific function in the chunk, `arrayMin`, is intended to find the smallest number in a given array, returning `null` if the array is empty.",
                "content": "\n\n/**\n * Find the smallest number in the array\n *\n * @param {Array<number>} array of integers\n * @returns {number|null} the smallest number in the array, or\n * null if the array is empty\n */\nfunction arrayMin(array) {\n  // FIXME\n  return -999;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk is part of a JavaScript code document that defines various functions for manipulating and analyzing arrays of integers, including calculating sums, products, and finding minimum and maximum values. The specific function in the chunk, `arrayMax`, is intended to find the largest number in an array, returning null if the array is empty.",
                "content": "\n\n/**\n * Find the largest number in the array\n *\n * @param {Array<number>} array of integers\n * @returns {number|null} the largest number in the array, or\n * null if the array is empty\n */\nfunction arrayMax(array) {\n  // FIXME\n  return -999;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk defines the `arrayContains` function, which is part of a larger JavaScript document containing various utility functions for performing operations on arrays of integers, such as computing sums, products, and finding minimum and maximum values. The `arrayContains` function specifically checks for the presence of a specified integer within an array.",
                "content": "\n\n/**\n * Determine if the array contains a particular element.\n *\n * @param {Array<number>} array of integers\n * @param {number} item integer to check\n * @returns {boolean} whether the integer item is in the given array\n */\nfunction arrayContains(array, item) {\n  // FIXME: true or false instead of null\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk is part of a JavaScript code document that defines various functions for manipulating arrays of integers, including calculating sums, products, and finding minimum and maximum values. The specific function in this chunk, `arrayReversed`, is intended to create a new array that is the reverse of the input array without modifying the original.",
                "content": "\n\n/**\n * Create an array that is the reversed of the original.\n *\n * WARNING: a reminder that the original(s) array must not be modified.\n * You can create new arrays if needed.\n *\n * @param {Array<number>} array of integers\n * @returns {Array<number>} a new reversed array\n */\nfunction arrayReversed(array) {\n  // FIXME\n  return [-999, -888, -777];\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk defines the `removeOdd` function, which is part of a larger JavaScript document containing various utility functions for array manipulation, including calculations for sum, product, minimum, maximum, and operations like reversing arrays and finding common elements. The `removeOdd` function specifically focuses on filtering out odd numbers from an input array while ensuring the original array remains unchanged.",
                "content": "\n\n/**\n * Returns the array with all odd numbers removed\n * \n * WARNING: a reminder that the original(s) array must not be modified.\n * You can create new arrays if needed.\n * \n * @param {Array<number>} array of integeres\n * @returns {Array<number>} array of integers with odd numbers removed\n */\nfunction removeOdd(array) {\n  // FIXME\n  return [-998, -888, -778];\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk is part of a JavaScript code document that defines various functions for manipulating arrays of integers, including calculating sums, products, and finding minimum and maximum values. The specific function in the chunk, `floorArray`, is intended to return a new array with all elements rounded down to the nearest integer, while ensuring the original array remains unmodified.",
                "content": "\n\n/**\n * Returns the array with all the elements floored\n * (rounded down to the nearest integer)\n *\n * WARNING: a reminder that the original(s) array must not be modified.\n * You can create new arrays if needed.\n * \n * @param {Array<number>} array of numbers\n * @returns {Array<number>} array of integers\n */\nfunction floorArray(array) {\n  // FIXME\n  return [-999, -888, -777];\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk defines the `arraysMultiply` function, which is part of a larger JavaScript document containing various utility functions for array manipulation, including operations like summing, multiplying, and finding minimum and maximum values in integer arrays.",
                "content": "\n\n/**\n * Given two arrays, multiply the elements at each index from arrays and store\n * the result in a third array. If the given two arrays differ in length,\n * excess elements of the larger array will be added on at the end.\n *\n * For example,\n *     [1, 3, 2]\n *   x [2, 4, 3, 5, 9]\n *   -----------------\n *   = [2, 12, 6, 5, 9]\n *\n * The result will be the same if array1 and array2 are swapped.\n *\n * @param {Array<number>} array1 of integers\n * @param {Array<number>} array2 of integers\n * @returns {Array<number>} array1 x array2 at each index\n */\nfunction arraysMultiply(array1, array2) {\n  // FIXME\n  return [-999, -888, -777];\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk defines the `arraysCommon` function, which is intended to create a new array containing common elements between two input arrays, ensuring a one-to-one mapping and preserving the order from the first array. It is part of a larger document that includes various array manipulation functions, each marked with a `FIXME` comment indicating they need implementation.",
                "content": "\n\n/**\n * Create a third array containing common elements between two arrays.\n *\n * Each element in the first array can map to at most one element\n * in the second array, and vice versa (one-to-one relationship).\n * \n * Duplicated elements in each array are treated as separate entities.\n *\n * The order is determined by the first array.\n *\n * A few examples,\n *   arraysCommon([1,1], [1,1,1]) gives [1,1]\n *   arraysCommon([1,1,1], [1,1]) gives [1,1]\n *   arraysCommon([1,2,3,2,1], [5,4,3,2,1]) gives [1,2,3]\n *   arraysCommon([1,2,3,2,1], [2,2,3,3,4]) gives [2,3,2]\n *   arraysCommon([1,4,1,1,5,9,2,7], [1,8,2,5,1]) gives [1,1,5,2]\n *\n * WARNING: a reminder that the original array(s) must not be modified.\n * You can create new arrays if needed.\n *\n * @param {Array<number>} array1 of integers\n * @param {Array<number>} array2 of integers\n * @returns {Array<number>} number of common elements between two arrays\n */\nfunction arraysCommon(array1, array2) {\n  // FIXME\n  return [-999, -888, -777];\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: The chunk contains debugging code that tests the functionality of the `arraySum` and `arrayProduct` functions to ensure they return the expected results when provided with specific input arrays.",
                "content": "\n\n// ========================================================================= //\n\n/**\n * Debugging code\n */\n\nconsole.assert(arraySum([1, 2, 3, 4]) === 10, 'arraySum([1,2,3,4]) === 10');\nconsole.assert(arrayProduct([1, 2, 3, 4]) === 24, 'arrayProduct([1,2,3,4]) === 24');\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk is part of the debugging section of a JavaScript document that contains various array manipulation functions. It provides console log statements to test the functionality of the `arraysCommon` function, which identifies common elements between two arrays, and includes a note about comparing arrays in JavaScript.",
                "content": "\n\nconsole.log(`\n  NOTE: you can't directly compare two arrays with '===', so you may need\n  to come up with your own way of comparing arrays this week. For example, you\n  could use console.log() and observe the output manually.\n`)\nconsole.log();\nconsole.log('Testing : arrayCommon([1,2,3,2,1], [2,2,3,3,4])');\nconsole.log('Received:', arraysCommon([1, 2, 3, 2, 1], [2, 2, 3, 3, 4]));\nconsole.log('Expected: [ 2, 3, 2 ]');\nconsole.log();\n\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> array.js: This chunk is located at the end of the document, following the debugging code section, and serves as a placeholder for additional debugging messages that the developer may want to include during the testing phase of the functions implemented above.",
                "content": "\n\n// TODO: your own debugging here\n\nconsole.log('========================================================')\n\nconsole.log(`\n  NOTE: these console.log messages will have no effect\n  on automarking, so you do not need to remove before\n  submitting your work.\n`)"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab02_arrays\\lab02_arrays.md",
        "chunks": [
            {
                "summary": "From assessments -> lab02_arrays -> lab02_arrays.md: This chunk contains the introductory section of a lab document, including the lab title, estimated completion time, overall difficulty, and due date, followed by the background rationale and setup instructions for a JavaScript arrays lab. It specifically introduces the functions that will be implemented in the lab, starting with `arraySum`.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-3%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-no-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 3 Tuesday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n--NEW CHUNK--\n\n# Background\n\n## Rationale\n\nHave you ever made a shopping list? If you have, you would know that sometimes we need to\nsum up the prices, find the most expensive item (probably to get rid of), find common items between two lists to avoid double-buying, and so on.\n\nIntroducing: Javascript arrays - these are perfect when dealing with an ordered collection of items! In this lab, we will be bringing to life an interface that allows us to directly manipulate arrays of integers and perform common operations that you will find useful in COMP1531 and beyond.\n\n## Setup\n- If you are working on a CSE machine (e.g. via VLAB), ensure that you've run the command `1531 setup`. You only need to do this once at the beginning of the course.\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine. \n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab. To check if you have done this correctly, type `ls` in this new directory to see if you can see the relevant files (including [array.js](array.js)).\n\n--NEW CHUNK--\n\n## Interface: Functions\n\n### arraySum\n**Description**  \nComputes the sum of the given integer array.  \n\nIf the given array is empty, the sum is **0**.  \n\n**Parameters**  \n- `(array)`\n\n**Return Type**  \n- `<number>`\n\n**Errors**  \n- N/A  \n\n**Difficulty**  \n\u2b50  \n\n---\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> lab02_arrays.md: This chunk contains the specifications for several functions related to array operations, including calculating the product, finding minimum and maximum values, checking for element presence, reversing arrays, filtering even numbers, flooring values, and multiplying elements from two arrays. These functions are part of the overall interface defined in the lab document, which focuses on manipulating integer arrays in JavaScript.",
                "content": "### arrayProduct\n**Description**  \nComputes the product of the given integer array.  \n\nIf the given array is empty, the product is **1**.  \n\n**Parameters**  \n- `(array)`\n\n**Return Type**  \n- `<number>`\n\n**Errors**  \n- N/A  \n\n**Difficulty**  \n\u2b50  \n\n---\n\n--NEW CHUNK--\n\n### arrayMin\n**Description**  \nFinds the smallest number in the given array.  \n\n**Parameters**  \n- `(array)`\n\n**Return Type**  \n- `<number>`  \n\n**Errors**  \n- Returns `<null>` if the array is empty.  \n\n**Difficulty**  \n\u2b50  \n\n---\n\n--NEW CHUNK--\n\n### arrayMax\n**Description**  \nFinds the largest number in the given array.  \n\n**Parameters**  \n- `(array)`\n\n**Return Type**  \n- `<number>`  \n\n**Errors**  \n- Returns `<null>` if the array is empty.  \n\n**Difficulty**  \n\u2b50  \n\n---\n\n--NEW CHUNK--\n\n### arrayContains\n**Description**  \nDetermines if the array contains a particular integer element.  \n\n**Parameters**  \n- `(array, item)`\n\n**Return Type**  \n- `<boolean>`  \n\n**Errors**  \n- N/A  \n\n**Difficulty**  \n\u2b50  \n\n---\n\n--NEW CHUNK--\n\n### arrayReversed\n**Description**  \nCreates an array that is the reversed version of the original. The original array should **not** be modified.  \n\n**Parameters**  \n- `(array)`\n\n**Return Type**  \n- `<number[]>` or `<Array<number>>`\n\n**Errors**  \n- N/A  \n\n**Difficulty**  \n\u2b50  \n\n---\n\n--NEW CHUNK--\n\n### removeOdd\n**Description**  \nCreates an array that contains only even elements from the given array. The original array should **not** be modified.  \n\n**Parameters**  \n- `(array)`\n\n**Return Type**  \n- `<Array<number>>`\n\n**Errors**  \n- N/A  \n\n**Difficulty**  \n\u2b50  \n\n---\n\n--NEW CHUNK--\n\n### floorArray\n**Description**  \nCreates an array with all elements of the given array **floored** (rounded down to the nearest integer). The original array should **not** be modified.  \n\n**Parameters**  \n- `(array)`\n\n**Return Type**  \n- `<Array<number>>`\n\n**Errors**  \n- N/A  \n\n**Difficulty**  \n\u2b50  \n\n---\n\n--NEW CHUNK--\n\n### arraysMultiply\n**Description**  \nGiven two arrays, multiplies the elements at each index and stores the result in a new array.  \n\nIf the two arrays differ in length, **excess elements** of the larger array will be added at the end.  \n\n**Parameters**  \n- `(array1, array2)`\n\n**Return Type**  \n- `<number[]>` or `<Array<number>>`\n\n**Errors**  \n- N/A  \n\n**Difficulty**  \n\u2b50\u2b50  \n\n---\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> lab02_arrays.md: This chunk provides detailed information about the `arraysCommon` function, which is part of the interface for manipulating integer arrays in JavaScript. It outlines the function's purpose, parameters, return type, potential errors, and difficulty level, followed by tips for implementation and data types relevant to the task. This section is situated within the broader context of the lab's task instructions for implementing various array manipulation functions in the `array.js` file.",
                "content": "### arraysCommon\n**Description**  \nCreates a third array containing **common elements** between two arrays.  \n\nEach element in the first array can map to **at most one element** in the second array, and vice versa (one-to-one relationship).  \n\nDuplicated elements in each array are treated as separate entities.  \nThe order is determined by the first array.  \n\n**Parameters**  \n- `(array1, array2)`\n\n**Return Type**  \n- `<number[]>` or `<Array<number>>`\n\n**Errors**  \n- N/A  \n\n**Difficulty**  \n\u2b50\u2b50\u2b50  \n\n--NEW CHUNK--\n\n### Tip\n\n- For some of the functions above, further examples are provided in their documentation in [arrays.js](array.js).\n- **The original array passed in for each function should not be modified**. We have emphasised this in a few functions that are likely to cause issues, marked with `WARNING`.\n\n## Interface: Data Types\n| If the variable name | It is of type |\n| --- | --- |\n| contains **array** | `number[]`, which is the same as `Array<number>` and denotes an array of numbers such as `[1,2,3]`  |\n| is exactly **item** | `number`, specifically integer |\n\n--NEW CHUNK--\n\n# Task\n\n## Implementation\n\nOpen the file [array.js](./array.js) in your preferred text editor. The stub code for each function has been provided for you.\n\nComplete each function in [Interface: Functions](#interface-functions).\n\n## Run & Debug\n\nYou can run and debug your code by typing the following in a terminal opened in the directory (folder) for this lab:\n\n```shell\n$ node array.js\n```\n\n## Output format of console.log\n\nWhen debugging your code, you *may* find that the output of `console.log` has:\n- different colours (e.g. yellow/brown for numbers)\n- different spacing (e.g. spaces between brackets)\n- new lines (e.g. after an opening bracket)\n- other slight differences in indentation, commas, etc\n\nThis is completely fine. What matters is the returned value of your functions, which is what we will be assessing you on.\n\nUsing `console.log` is strictly for debugging purposes. It will not affect your mark in any way. In other words, how your results are displayed when printed or whether you leave these `console.log` statements in your code has 0 effects on your final automarking result.\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab02_arrays -> lab02_arrays.md: The chunk pertains to the submission guidelines and notes for a lab assignment focused on implementing various array manipulation functions in JavaScript. It outlines the process for committing code changes to a Gitlab repository and emphasizes the importance of testing and adhering to specified requirements.",
                "content": "# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\n# Notes\n- Pay close attention to any `WARNING` or when a function can have multiple return types, e.g. `{number|null}`.\n- Passing the given tests is a good indication of correctness but does not guarantee that you will receive the full mark for the lab.\n- You are advised to do further testing.\n- You may find the resource below useful:\n    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n- You are not allowed to use any external libraries/modules in this exercise. This means your code should run without needing to use the command `npm install`.\n- For this lab, and all future labs, you are allowed to use any features of NodeJS that runs on a CSE machine, unless explicitly stated otherwise in the specification. For example, `Math.min`, `Math.max`, `Array.find` and so on are all built-in features of NodeJS that can be used.\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab02_satisfaction\\lab02_satisfaction.md",
        "chunks": [
            {
                "summary": "From assessments -> lab02_satisfaction -> lab02_satisfaction.md: This chunk contains the introductory section of the lab document, including the lab title, estimated completion time, overall difficulty, and code assessment status. It also outlines the due date for the lab and provides background information on the rationale and setup for the lab, which focuses on ranking fast food restaurants based on various criteria.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-4%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-no-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 3 Tuesday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney) \n\n--NEW CHUNK--\n\n# Background\n\n## Rationale\n\nWith the rise of many fast-food franchises in recent times, each with its perks and quirks, it can often be difficult to decide on what's best to eat on your cheat day.\n\nIn this lab, we first attempt to rank fast food restaurants based on an ordered set of criteria similar to those from [Canstar Blue](https://www.canstarblue.com.au/stores-services/fast-food-restaurants/), then with **our satisfaction metric**. This will allow us to always be able to determine the best place to eat from a given set of options.\n\n## Setup\n\n- If you are working on a CSE machine (e.g. via VLAB), ensure that you've run the command `1531 setup`. You only need to do this once at the beginning of the course.\n- Please make sure you have completed `lab02_arrays` prior.\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine.\n- In your terminal, change your directory (using the `cd` command) to the newly cloned lab. To check if you have done this correctly, type `ls` in this new directory to see if you can see the relevant files (including [satisfaction.js](satisfaction.js)).\n\n--NEW CHUNK--\n\n## Interface: Functions\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th>Parameters</th>\n    <th>Return Type</th>\n    <th>Errors</th>\n  </tr>\n  <tr>\n    <td>\n        <code>sortedFastFood</code><br /><br />\n        Given an array of fast food restaurants, return a new sorted array in <b>descending order</b> by:<br/><br/>\n        <ol>\n            <li>valueForMoney</li>\n            <li>taste</li>\n            <li>timeToMake</li>\n            <li>foodVariety</li>\n            <li>customerService</li>\n            <li>name (in <b>ascending lexicographical order</b>, case-insensitive)</li>\n        </ol>\n        For example, if two restaurants have the same valueForMoney and taste, the one with a higher timeToMake will be in front (nearer to the start of the returned array).\n        <br/><br/>\n        If all other fields are equal and the name is compared, \"hungry Jacks\" will be before \"KFC\" because \"h\" is before \"K\".\n        <br/><br/>\n        You should NOT modify the order of the original array.\n        <br/><br/>\n        <b>Difficulty</b>: \u2b50\u2b50\u2b50\n    </td>\n    <td>\n        (fastFoodArray)\n    </td>\n    <td>\n        <code>fastFoodArray</code>\n    </td>\n    <td>\n        N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>sortedSatisfaction</code><br /><br />\n        Given an array of fast food restaurants, return a new sorted\n        array ranked by the overall satisfaction (highest first).\n        <br/><br/>\n        See below for a mathematical representation of the satisfaction formula.\n        <br/><br/>\n        If two restaurants have the same satisfaction, the names\n        are compared in ascending lexicographical order (case-insensitive).\n        For example, \"hungry Jacks\" will appear before \"KFC\" because\n        \"h\" is before \"K\".\n        <br/><br/>\n        You should NOT modify the order of the original array.\n        <br/><br/>\n        <b>Difficulty</b>: \u2b50\u2b50\u2b50\n    </td>\n    <td>\n        (fastFoodArray)\n    </td>\n    <td>\n        <code>satisfactionArray</code>\n    </td>\n    <td>\n        N/A\n    </td>\n</table>\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab02_satisfaction -> lab02_satisfaction.md: This chunk provides the mathematical formula for calculating the satisfaction of fast food restaurants, along with a detailed description of the data types used in the lab, which is essential for understanding the structure of the input and output for the functions being implemented.",
                "content": "### Satisfaction Formula\n\nThe satisfaction of a restaurant is the average score between `valueForMoney`, `taste`, `timeToMake`, `foodVariety` and `customerService`. This can be represented mathematically as:\n\n```math\n\\text{satisfaction} =\n\\frac{\n    \\text{valueForMoney}\n    + \\text{taste}\n    + \\text{timeToMake}\n    + \\text{foodVariety}\n    + \\text{customerService}\n}\n{5}\n```\n\nYou do not need to round the satisfaction value.\n\n--NEW CHUNK--\n\n## Interface: Data Types\n\n| If the variable name             | It is of type                                                                                                                      |\n| -------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| is exactly **fastFoodArray**     | `Array` of objects, where each `object` contains the keys `{name, customerService, foodVariety, valueForMoney, timeToMake, taste}` |\n| is exactly **name**              | `string`                                                                                                                           |\n| is exactly **customerService**   | `number`                                                                                                                           |\n| is exactly **foodVariety**       | `number`                                                                                                                           |\n| is exactly **valueForMoney**     | `number`                                                                                                                           |\n| is exactly **timeToMake**        | `number`                                                                                                                           |\n| is exactly **taste**             | `number`                                                                                                                           |\n| is exactly **restaurantName**    | `string`                                                                                                                           |\n| is exactly **satisfactionArray** | `Array` of objects, where each `object` contains the keys `{restaurantName, satisfaction}`                                         |\n| is exactly **satisfaction**      | `number`                                                                                                                           |\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab02_satisfaction -> lab02_satisfaction.md: This chunk provides an example structure of the `fastFoodArray` that will be used in the functions, along with expected output from the debugging console log after implementing the required functions in the lab. It is situated after the description of the data types and before the implementation instructions, serving as a reference for expected input and output formats.",
                "content": "## Example Array Structure\n\nBelow is an example of a `fastFoodArray` that you will receive in your functions.\n\n```js\nconst fastFoodArray = [\n  {\n    name: \"mcdonalds\",\n    valueForMoney: 3,\n    taste: 3,\n    timeToMake: 4,\n    foodVariety: 3,\n    customerService: 3,\n  },\n  {\n    name: \"kfc\",\n    valueForMoney: 4,\n    taste: 3,\n    timeToMake: 4,\n    foodVariety: 3,\n    customerService: 4,\n  },\n];\n```\n--NEW CHUNK--\n\nOnce you have implemented all functions, the output of the starter debugging `console.log` (assuming you have not modified the input array) is:\n\n<details close>\n<summary>click to view sample output</summary>\n\n```\n$ node satisfaction.js\n========================\n1. Testing Fast Food\n===========\n[\n  {\n    name: 'First fastFood, first satisfaction (4.8)',\n    valueForMoney: 5,\n    taste: 5,\n    timeToMake: 5,\n    foodVariety: 4,\n    customerService: 5\n  },\n  {\n    name: 'Second fastFood, second satisfaction (4.6)',\n    valueForMoney: 5,\n    taste: 4,\n    timeToMake: 4,\n    foodVariety: 5,\n    customerService: 5\n  },\n  {\n    name: 'Third fastFood, third satisfaction (4.6)',\n    valueForMoney: 5,\n    taste: 4,\n    timeToMake: 4,\n    foodVariety: 5,\n    customerService: 5\n  }\n]\n\n========================\n2. Testing Satisfaction\n===========\n[\n  {\n    restaurantName: 'First fastFood, first satisfaction (4.8)',\n    satisfaction: 4.8\n  },\n  {\n    restaurantName: 'Second fastFood, second satisfaction (4.6)',\n    satisfaction: 4.6\n  },\n  {\n    restaurantName: 'Third fastFood, third satisfaction (4.6)',\n    satisfaction: 4.6\n  }\n]\n```\n\nNote that having the same output does not guarantee that your function will behave correctly in all cases (e.g. empty array, one element, many elements, etc).\n\nWhile manually testing, you are welcome to make up your data or use those provided by\n[Canstar Blue](https://www.canstarblue.com.au/stores-services/fast-food-restaurants/).\nNote that the [Satisfaction Formula](#satisfaction-formula) that we use may be different.\n\n</details>\n\n--NEW CHUNK--\n"
            },
            {
                "summary": "From assessments -> lab02_satisfaction -> lab02_satisfaction.md: This chunk provides detailed instructions for the implementation of functions in the lab, including tips for sorting and common mistakes to avoid, as well as assumptions about the data structure and guidance on how to run and test the code. It is situated after the background information and before the submission guidelines in the overall document.",
                "content": "# Task\n\n## Implementation\n\nOpen the file [satisfaction.js](satisfaction.js) in your preferred text editor. The stub code for each function has been provided for you.\n\nComplete each function in [Interface: Functions](#interface-functions).\n\nFor sorting lexicographically, you should use the [`.localeCompare`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) method for strings! For example,\n```javascript\nconst s1 = 'my apple';\nconst s2 = 'my banana';\n\n// prints -1, i.e. < 0 (less than 0)\n// This is because 'a' is before 'b'\nconsole.log(s1.localeCompare(s2));\n```\n\n--NEW CHUNK--\n\n### Tips & Hints\n\n- You may want to introduce a helper function that compares two restaurants and return a positive, zero, or negative number depending on whether the first or second restaurant is considered \"better\".\n\n- You may find the `.sort()` method of arrays useful, although this lab can be completed without it. **An example of an approach that does NOT use .sort() is in the file [sample.js](sample.js)**.\n\n- Be careful with `\"name\"` vs `\"restaurantName\"` - read the specification carefully!\n\n- One common mistake in this lab is returning an array wrapped within another array or object, e.g.\n\n    ```js\n    const array = [1, 2, 3];\n\n    // 1. \u274c wrong, array within array\n    return [array];\n\n    // 2. \u274c wrong, array within object\n    return { array }; \n    \n    // 3. \u2705 correct\n    return array;\n    ```\n    please be wary of this, as **you will not be given a second chance for a rerun for this case**.\n\n## Assumptions\n\n1. All restaurant names will be case-insensitively unique.\n   - For example, if there is a restaurant `\"KFC\"`, there will not be another restaurant named `\"kfc\"`, `\"kFc\"` or `\"KFc\"`.\n1. You do not need to round the value of satisfaction.\n1. All objects in the fastFoodArray will follow the same structure from [Interface: Data Types](#interface-data-types).\n\n--NEW CHUNK--\n\n## Run & Test\n\nYou can run and test your code by typing the following in a terminal opened at the directory (folder) for this lab:\n\n```shell\n$ node satisfaction.js\n```\n\nThis executes the code in [satisfaction.js](satisfaction.js). Refer back to the [Expected Array Structure](#example-array-structure) for the expected output.\n"
            },
            {
                "summary": "From assessments -> lab02_satisfaction -> lab02_satisfaction.md: This chunk provides guidance on the output format of `console.log` statements used for debugging in the lab assignment, emphasizing that the appearance of the output does not affect the assessment of the returned values from the functions implemented in the lab. It also includes submission instructions and notes regarding testing and library usage.",
                "content": "## Output format of console.log\n\nWhen debugging your code, you *may* find that the output of `console.log` has:\n- different colours (e.g. yellow/brown for numbers)\n- different spacing (e.g. spaces between brackets)\n- new lines (e.g. after an opening bracket)\n- other slight differences in indentation, commas, etc\n\nThis is completely fine. What matters is the returned value of your functions, which is what we will be assessing you on.\n\nUsing `console.log` is strictly for debugging purposes. It will not affect your mark in any way. In other words, how your results are displayed when printed or whether you leave these `console.log` statements in your code has 0 effects on your final automarking result.\n\n--NEW CHUNK--\n\n# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\n# Notes\n\n- Passing the given tests is a good indication of correctness but does not guarantee that you will receive the full mark for the lab.\n- You are advised to do further testing.\n- You are not allowed to use any external libraries/modules in this exercise. This simply means you cannot use the command `npm install`.\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab02_satisfaction\\sample.js",
        "chunks": [
            {
                "summary": "From assessments -> lab02_satisfaction -> sample.js: This chunk serves as an introductory comment in a JavaScript file that provides guidance for creating a sorted array of people objects based on age and name, specifically in ascending order, without utilizing the built-in `.sort()` method. It encourages users to attempt the lab independently before referring to the provided example code.",
                "content": "```\n/*\n  Please only look at this file AFTER attempting the lab yourself and following\n  the other tips and hints from the specification!\n\n  Below is an example of how to programmatically create a new sorted array of\n  people of the form\n\n  ```\n  {\n    age: number\n    name: string\n  }\n  ```\n\n  in \"*ASCENDING*\" order, without using the .sort() method for arrays.\n\n  Copying/refactoring the code below to complete this lab is fair game :).\n*/\n"
            },
            {
                "summary": "From assessments -> lab02_satisfaction -> sample.js: This chunk defines a function that compares two person objects based on their age and name, which is used to facilitate sorting an array of people in ascending order by age and lexicographically by name.",
                "content": "\n/**\n * Compares 2 persons and return a number that is:\n * > 0 if person1 > person2\n * < 0 if person1 < person2\n * = 0 if person1 = person2\n *\n * An person is considered \"greater\" if, in this order\n *    1. They are older (higher age)\n *    2. Their name is lexiographically smaller (appear in the dictionary\n *       earlier, e.g. \"a\" is before \"b\")\n */\nfunction comparePeopleAscending(person1, person2) {\n  if (person1.age !== person2.age) {\n    return person1.age - person2.age;\n  }\n  return person1.name.localeCompare(person2.name)\n}\n"
            },
            {
                "summary": "From assessments -> lab02_satisfaction -> sample.js: This chunk defines the `sortedPeopleAscending` function, which creates and returns a new array of people sorted in ascending order by age and name, utilizing a custom comparison function without using the built-in `.sort()` method. It is part of a larger document that provides guidance on sorting arrays of objects representing people.",
                "content": "\n/**\n * Create and return a new array of sorted people.\n *\n * NOTE: Sorting in DESCENDING order or by different criteria will require\n *       a change in the compare function or this function, or both\n */\nfunction sortedPeopleAscending(inputPeopleArray) {\n  const sortedPeopleArray = [];\n  for (const currentPerson of inputPeopleArray) {\n    let index = 0;\n    // Find the index position where the current person\n    // is not \"greater\" than the next person\n    while (\n      index < sortedPeopleArray.length &&\n      comparePeopleAscending(currentPerson, sortedPeopleArray[index]) > 0\n    ) {\n      index++;\n    }\n\n    // insert the current person at this index. They are considered greater\n    // than everyone before them and less than everyone after them in the\n    // sortedPeopleArray.\n    // The 0 at the second argument means don't remove/replace any elements\n    // after adding.\n    sortedPeopleArray.splice(index, 0, currentPerson);\n  }\n  return sortedPeopleArray;\n}\n"
            },
            {
                "summary": "From assessments -> lab02_satisfaction -> sample.js: This chunk contains a sample array of people with their names and ages, along with a console log statement that demonstrates the usage of the `sortedPeopleAscending` function to sort the array in ascending order based on age and name. It is situated at the end of the document, following the implementation of the sorting logic.",
                "content": "\nconst people = [\n  { name: 'Miyoung', age: 8 },\n  { name: 'Danny', age: 7 },\n  { name: 'Bill', age: 7 },\n  { name: 'Aaron', age: 18 },\n  { name: 'Aaron', age: 7 },\n  { name: 'Miyoung', age: 20 },\n  { name: 'Jack', age: 20 },\n  { name: 'Cherrie', age: 7 },\n  { name: 'Iktimal', age: 19 },\n];\n\nconsole.log(sortedPeopleAscending(people));\n/*\nExpected output:\n  ```\n  [\n    { name: 'Aaron', age: 7 },\n    { name: 'Bill', age: 7 },\n    { name: 'Cherrie', age: 7 },\n    { name: 'Danny', age: 7 },\n    { name: 'Miyoung', age: 8 },\n    { name: 'Aaron', age: 18 },\n    { name: 'Iktimal', age: 19 },\n    { name: 'Jack', age: 20 },\n    { name: 'Miyoung', age: 20 }\n  ]\n  ```\n*/\n```"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab02_satisfaction\\satisfaction.js",
        "chunks": [
            {
                "summary": "From assessments -> lab02_satisfaction -> satisfaction.js: This chunk contains the function `sortedFastFood`, which is designed to sort an array of fast food restaurant objects based on multiple criteria such as value for money, taste, and customer service, while maintaining the original array's order. It is part of a larger document that includes another function for sorting based on overall satisfaction and provides examples and testing instructions for both functions.",
                "content": "```\n/**\n * NOTE: If you are having difficulty completing this exercise,\n * please take a look at our example in the file \"sample.js\"!\n */\n\n/**\n * Given an array of fast food restaurants, return a new sorted\n * array in descending order by:\n *\n *   1. valueForMoney\n *   2. taste\n *   3. timeToMake\n *   4. foodVariety\n *   5. customerService\n *   6. name (in lexicographical order, case-insensitive)\n *\n * For example, if two restaurants have the same valueForMoney and taste,\n * the one with a higher timeToMake will be in front \n * (nearer to the start of the returned array).\n *\n * If the all other fields are equal and the name is compared,\n * \"hungry Jacks\" will be before \"KFC\" because \"h\" is before \"K\".\n *\n * WARNING: You should NOT modify the order of the original array.\n *\n * @param {\n *   Array<{\n *     name: string,\n *     valueForMoney: number,\n *     taste: number,\n *     timeToMake: number,\n *     foodVariety: number,\n *     customerService: number\n *   }>\n * } fastFoodArray with information about fast food restaurants,\n * which should not be modified.\n * @returns array with the same items, sorted by the key-order given.\n */\nfunction sortedFastFood(fastFoodArray) {\n  // TODO: Observe the return type from the stub code\n  // FIXME: Replace the stub code with your implementation\n  return [\n    {\n      name: \"mcdonalds\",\n      valueForMoney: 3,\n      taste: 3,\n      timeToMake: 4,\n      foodVariety: 3,\n      customerService: 3,\n    },\n    {\n      name: \"kfc\",\n      valueForMoney: 4,\n      taste: 3,\n      timeToMake: 4,\n      foodVariety: 3,\n      customerService: 4,\n    },\n  ];\n}\n\n"
            },
            {
                "summary": "From assessments -> lab02_satisfaction -> satisfaction.js: This chunk contains the implementation and documentation for the `sortedSatisfaction` function, which calculates and returns a sorted array of fast food restaurants based on their overall satisfaction scores, along with a test section to validate its functionality.",
                "content": "\n\n/**\n * Given an array of fast food restaurants, return a new sorted\n * array ranked by the overall satisfaction.\n *\n * The satisfaction of a restaurant is the average score between\n * customerService, foodVariety, valueForMoney, timeToMake and taste.\n *\n * You do not need to round the satisfaction value.\n *\n * If two restaurants have the same satisfaction, the names\n * are compared in lexigraphical order (case-insensitive).\n * For example, \"hungry Jacks\" will appear before \"KFC\" because\n * \"h\" is before \"K\".\n *\n * WARNING: you should NOT modify the order of the original array.\n *\n * @param {\n*   Array<{\n*     name: string,\n*     valueForMoney: number,\n*     taste: number,\n*     timeToMake: number,\n*     foodVariety: number,\n*     customerService: number\n*   }>\n * } fastFoodArray with information about fast food restaurants,\n * which should not be modified.\n * @returns {\n *   Array<{\n *     restaurantName: string,\n *     satisfaction: number,\n *   }>\n * } a new sorted array based on satisfaction. The restaurantName\n * will be the same as the original name given.\n */\nfunction sortedSatisfaction(fastFoodArray) {\n  // TODO: Observe the return type from the stub code\n  // FIXME: Replace the stub code with your implementation\n  return [\n    {\n      restaurantName: 'kentucky',\n      satisfaction: 3.6,\n    },\n    {\n      restaurantName: 'maccas',\n      satisfaction: 3.2\n    }\n  ];\n}\n\n// ========================================================================= //\n\n/**\n * Execute the file with:\n *     $ node satisfaction.js\n *\n * The expected/sample output for the starter code is in the README.md.\n * Feel free to modify the code below to further test your functions.\n */\n\n// Note: do not use this \"fastFoods\" global variable directly in your function.\n// Your function has the parameter \"fastFoodArray\".\nconst fastFoods = [\n  {\n    name: 'Third fastFood, third satisfaction (4.6)',\n    valueForMoney: 5,\n    taste: 4,\n    timeToMake: 4,\n    foodVariety: 5,\n    customerService: 5\n  },\n  {\n    // Same as above, but name starts with \"S\"\n    // which is before \"T\" (case-insensitive)\n    name: 'Second fastFood, second satisfaction (4.6)',\n    valueForMoney: 5,\n    taste: 4,\n    timeToMake: 4,\n    foodVariety: 5,\n    customerService: 5\n  },\n  {\n    // Best foodVariety, and Best overall\n    name: 'First fastFood, first satisfaction (4.8)',\n    valueForMoney: 5,\n    taste: 5,\n    timeToMake: 5,\n    foodVariety: 4,\n    customerService: 5\n  },\n];\n\n// Note: We are using console.log because arrays cannot be commpared with ===.\n// There are better ways to test which we will explore in future weeks :).\nconsole.log('========================');\nconsole.log('1. Testing Fast Food');\nconsole.log('===========');\nconsole.log(sortedFastFood(fastFoods));\nconsole.log();\n\nconsole.log('========================');\nconsole.log('2. Testing Satisfaction');\nconsole.log('===========');\nconsole.log(sortedSatisfaction(fastFoods));\nconsole.log();\n\nconsole.log('========================================================');\nconsole.log(`\n  TIP:\n    after attempting yourself, if you are still stuck, please take a\n    look at sample.js in your respository.\n`);\nconsole.log(`\n  WARNING:\n    do not return an array within an array,\n      e.g. [[1, 2, 3]] (wrong) instead of [1, 2, 3] (correct).\n    You should only see one set of square brackets in the output.\n`);\n```"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_diary\\diary.js",
        "chunks": [
            {
                "summary": "From assessments -> lab03_diary -> diary.js: The chunk defines a global datastore object named `diary`, which serves as the foundational data structure for storing diary entries in the overall document. This section emphasizes that the object is an implementation detail and should not be directly accessed or exported in tests, allowing for flexibility in its modification.",
                "content": "/**\n * Defines a global datastore object. This is an implementation detail (blackboxed from your tests)\n * This means that you should NOT export this object or use it in your tests directly.\n *\n * You can remove/modify/edit the object as you wish. For example, changing `const` to `let`, adding\n * new properties, use a different data structure (e.g. a Map instead of an object), etc.\n */\nconst diary = {\n  entries: [],\n}\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.js: The chunk is a function definition for `clear`, which is responsible for resetting the global diary datastore by removing all diary entries and returning an empty object. It is part of a larger module that manages diary entries, including adding, viewing, listing, editing, and searching entries.",
                "content": "\n\n/**\n * Clear all diary entries in the global datastore and returns an empty object.\n * If you have added new properties or otherwise modified the initial diary\n * datastore, you will need to update this function accordingly.\n *\n * @returns {{}}\n */\nexport function clear() {\n  diary.entries = [];\n  return {};\n}\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.js: This chunk defines the `addDiaryEntry` function, which is responsible for adding a new entry to the global diary datastore. It includes parameters for the entry's title and content, and outlines the expected return values, including error handling for missing inputs. The function is part of a larger module that manages diary entries, including functionalities for viewing, editing, listing, and searching entries.",
                "content": "\n\n/**\n * Add a new diary entry to the global datastructure\n *\n * @param {string} title\n * @param {string} content\n * @returns {{ entryId: number} | { error: string }}\n */\nexport function addDiaryEntry(title, content) {\n  /*\n  // A sample implementation of this function has been added\n  // below for reference. You can use it as is, modify it to\n  // hold different information in your \"diary\" global data\n  // store or rewrite it completely if you wish.\n\n  if (!title) {\n    return { error: 'No title provided' };\n  }\n\n  if (!content) {\n    return { error: 'No content provided' };\n  }\n\n  const timestamp = Math.floor(Date.now() / 1000);\n  const entryId = diary.entries.length;\n  const newEntry = {\n    entryId,\n    title,\n    content,\n    timestamp,\n  }\n  diary.entries.push(newEntry);\n  return { entryId }\n  */\n\n  // FIXME: add implementation\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.js: This chunk defines the `viewDiaryEntry` function, which is responsible for retrieving the full details of a specific diary entry based on its unique identifier (`entryId`). It is part of a larger module that manages a diary data structure, including functions for adding, editing, listing, and searching diary entries.",
                "content": "\n\n/**\n * Returns the full detail of a diary entry corresponding to the input id.\n * @param {number} entryId\n * @returns {{ entry: { entryId: number, title: string, content: string, timestamp: number }}}\n */\nexport function viewDiaryEntry(entryId) {\n  // FIXME: return the correct entry object.\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.js: This chunk defines the `listDiaryEntries` function, which is responsible for retrieving and returning a list of brief details about all diary entries stored in the global `diary` object, ensuring that the most recently created entries are listed first. It is part of a larger module that manages diary entries, including adding, viewing, editing, and searching entries.",
                "content": "\n\n/**\n * List brief details about all diary entries\n * (please review the specification data types for what this includes)\n *\n * The most recently created entries should appear first, i.e. [e3, e2, e1]\n *\n * No additional information should be provided.\n *\n * @returns {{ entries: { entryId: number, title: string }[] }}\n */\nexport function listDiaryEntries() {\n  // FIXME: return an object of the form: { entries: [{ entryId: 1, title: 'some title' }] };\n  // NOTE: The most recently created entries should appear first, i.e. [e3, e2, e1]\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.js: This chunk is part of a JavaScript module that defines functions for managing a diary application, specifically focusing on editing existing diary entries by updating their title and content without altering the timestamp.",
                "content": "\n\n/**\n * Edits the title and content of a diary entry. You do not need to\n * update the timestamp.\n *\n * @param {number} entryId\n * @param {string} title\n * @param {string} content\n * @returns {{}}\n */\nexport function editDiaryEntry(entryId, title, content) {\n  // FIXME: add implementation and return an empty object, {}, instead of null\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.js: This chunk defines the `searchDiary` function, which is part of a diary management system. It allows users to search for diary entries based on a substring found in either the title or content of the entries. The function is designed to return a list of entries that match the search criteria, formatted as an object containing entry IDs and titles. This function is one of several that manipulate and retrieve data from a global diary datastore, which includes functionalities for adding, viewing, editing, and listing diary entries.",
                "content": "\n\n/**\n * Search through the diary for all entries whose title or content\n * contains the given substring. \n * \n * @param {*} substring \n * @param {*} titleOnly \n * @returns {{ entries: { entryId: number, title: string }[] }}\n */\nexport function searchDiary(substring, titleOnly) {\n  // FIXME: return an object of the form: { entries: [{ entryId: 1, title: 'some title' }] };\n  return null;\n}\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.js: This chunk is a directive for developers, located at the end of the document, emphasizing the importance of writing Jest tests in a specified file (`diary.test.js`) instead of using console logs for testing the code related to the diary functionality.",
                "content": "\n\n/**\n * DO NOT ADD console.log TO TEST YOUR CODE HERE.\n * Please write Jest tests in the file diary.test.js provided.\n */"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_diary\\diary.test.js",
        "chunks": [
            {
                "summary": "From assessments -> lab03_diary -> diary.test.js: The chunk is a placeholder comment within a test suite for a diary application, indicating that the test should be removed and replaced with actual test cases that are currently commented out below it.",
                "content": "test.todo('Remove this test and uncomment the tests further below');\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.test.js: This chunk contains the initial setup for testing a diary management system, including the import of necessary functions and the configuration of a test environment that resets the state before each test. It specifically focuses on the `clear` function and its expected behavior.",
                "content": "\n\n/*\n// Notice how we are only importing the functions listed from the specification, and not\n// our underlying \"diary\" object. To keep our tests black-box, we must only test the\n// known input and output that are explicitly specified (no more, no less).\n\nimport {\n  addDiaryEntry,\n  clear,\n  editDiaryEntry,\n  listDiaryEntries,\n  searchDiary,\n  viewDiaryEntry\n} from './diary';\n\nbeforeEach(() => {\n  // Reset the state of our data so that each tests can run independently\n  clear();\n});\n\ndescribe('clear', () => {\n  test('has the correct return type, {}', () => {\n    expect(clear()).toStrictEqual({});\n  });\n});\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.test.js: This chunk is part of a test suite for the `addDiaryEntry` function within a diary management system. It includes tests that verify the function's return type, its ability to handle multiple entries with the same title and content, and its validation of input parameters. This section is situated within a broader document that outlines various functionalities of the diary application, including adding, viewing, editing, and searching diary entries.",
                "content": "\n\ndescribe('addDiaryEntry', () => {\n  test('has the correct return type', () => {\n    const e = addDiaryEntry('Day 1', 'I worked on the adddDiaryEntry function');\n    expect(e).toStrictEqual({ entryId: expect.any(Number) });\n  });\n\n  test('can add two entries with the same title and content', () => {\n    const e1 = addDiaryEntry('Day 1', 'I worked on the adddDiaryEntry function');\n    const e2 = addDiaryEntry('Day 1', 'I worked on the adddDiaryEntry function');\n    expect(e2).toStrictEqual({ entryId: expect.any(Number)} )\n\n    // The two diary entries should have two different IDs\n    expect(e1.entryId).not.toStrictEqual(e2.entryId);\n  });\n\n  test.each([\n    { title: '', content: 'valid' },\n    { title: 'valid', content: '' },\n    { title: '', content: '' },\n  ])('returns an error for title=$title and content=$content', ({ title, content }) => {\n    expect(addDiaryEntry(title, content)).toStrictEqual({ error: expect.any(String) });\n  });\n});\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.test.js: This chunk is part of a test suite for the `viewDiary` function within a diary application, specifically focusing on verifying the behavior of viewing diary entries, including handling non-existent entry IDs and returning correct details for existing entries.",
                "content": "\n\ndescribe('viewDiary', () => {\n  test('returns an error for a non-existent entry id', () => {\n    expect(viewDiaryEntry(1)).toStrictEqual({ error: expect.any(String) });\n  });\n\n  describe('when one diary is created', () => {\n    let entry;\n    beforeEach(() => {\n      entry = addDiaryEntry('Day 1', 'One day');\n    });\n\n    test('view diary with invalid id', () => {\n      expect(viewDiaryEntry(entry.entryId + 1)).toStrictEqual({ error: expect.any(String) });\n    });\n\n    test('the correct details are returned', () => {\n      expect(viewDiaryEntry(entry.entryId)).toStrictEqual({\n        entry: {\n          entryId: entry.entryId,\n          title: 'Day 1',\n          content: 'One day',\n          timestamp: expect.any(Number),\n        }\n      });\n    });\n  });\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.test.js: This chunk is part of a series of test cases for a diary application, specifically focusing on the functionality of viewing and listing diary entries. It includes a placeholder test for viewing multiple entries and outlines tests for listing entries, including handling empty diaries and the need for additional tests for single and multiple entries.",
                "content": "\n\n  // Remove the todo and complete this test, or simply remove it and write other\n  // test cases as you see fit.\n  test.todo('can view multiple diary entries correctly');\n});\n\ndescribe('listDiaryEntries', () => {\n  test('correctly list an empty diary', () => {\n    expect(listDiaryEntries()).toStrictEqual({ entries: []})\n  });\n\n  test.todo('correctly list one entry');\n\n  test.todo('correctly list multiple entries');\n});\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.test.js: This chunk is part of a test suite for the `editDiaryEntry` function within a diary application. It includes tests for error handling with non-existent entry IDs, validation of title and content inputs, and successful editing of an existing diary entry. This section follows the tests for adding and viewing diary entries, ensuring that the editing functionality is thoroughly validated.",
                "content": "\n\ndescribe('editDiaryEntry', () => {\n  test('returns an error for a non-existent entry id', () => {\n    expect(editDiaryEntry(1, 'valid', 'valid')).toStrictEqual({ error: expect.any(String) });\n  });\n\n  describe('when one diary is created', () => {\n    let entry;\n    beforeEach(() => {\n      entry = addDiaryEntry('Day 1', 'One day');\n    });\n\n    test.each([\n      { title: '', content: 'valid' },\n      { title: 'valid', content: '' },\n      { title: '', content: '' },\n    ])('returns an error for title=$title and content=$content', ({ title, content }) => {\n      expect(editDiaryEntry(entry.entryId, title, content)).toStrictEqual({ error: expect.any(String) });\n    });\n\n    test.todo('and an invalid entry id is given');\n\n    test.todo('has the correct return type');\n\n    test('successfully edits a diary entry', () => {\n      editDiaryEntry(entry.entryId, 'newtitle', 'newcontent')\n      expect(viewDiaryEntry(entry.entryId)).toStrictEqual({\n        entry: {\n          entryId: entry.entryId,\n          title: 'newtitle',\n          content: 'newcontent',\n          timestamp: expect.any(Number),\n        }\n      });\n    });\n  });\n\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> diary.test.js: This chunk is part of a test suite for a diary application, specifically focusing on the `editDiaryEntry` and `searchDiary` functions. It includes tests for editing multiple diary entries and searching the diary, ensuring proper error handling and functionality when interacting with the diary entries.",
                "content": "\n\n  test.todo('successfully edits multiple diary entries');\n});\n\ndescribe('searchDiary', () => {\n  test('empty search string returns an error', () => {\n    expect(searchDiary('', false)).toStrictEqual({ error: expect.any(String) });\n  });\n\n  test('returns no results for an empty diary', () => {\n    expect(searchDiary('hi', false)).toStrictEqual({ entries: [] });\n  });\n\n  // TODO: add more tests\n});\n\n*/"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_diary\\lab03_diary.md",
        "chunks": [
            {
                "summary": "From assessments -> lab03_diary -> lab03_diary.md: This chunk provides an introduction to the lab assignment, including the lab title, estimated completion time, overall difficulty, and essential background information on the rationale for writing diary entries. It also outlines the initial setup steps for students, including cloning the repository and installing necessary packages, which are crucial for starting the lab work.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-3%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-yes-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 4 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n# Background\n\n## Rationale\n\nWriting diary entries is a great way to reduce our anxieties and relieve our nerves in stressful situations.\n\nIn this lab, you will learn about how we can store and operate on a collection of data (our diary entries) as well as writing blackbox tests\nto validate our work based on the given specification.\n\n## Getting Started\n\n- If you are working on a CSE machine (e.g. via VLAB), ensure that you've run the command `1531 setup`. You only need to do this once at the beginning of the course.\n- Please make sure you have completed `lab03_password` prior.\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine.\n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab. To check if you have done this correctly, type `ls` in this new directory to see if you can see the relevant files (including [diary.js](diary.js)).\n\n## Package Installation\n\n1. Open [package.json](package.json) and look under the key `\"devDependencies\"`. We have added these development packages from `lab03_password` for you:\n    ```json\n    \"devDependencies\": {\n      \"@babel/preset-env\": \"^7.23.9\",\n      \"jest\": \"^29.7.0\"\n    }\n    ```\n\n1. Use the command below to install all `\"devDependencies\"` (and also `\"dependencies\"`, although none is needed in this lab):\n    ```shell\n    $ npm install # shortcut: npm i\n    ```\n\n1. Under `\"scripts\"`, make the following changes:\n    ```json\n    \"scripts\": {\n        \"test\": \"jest\"\n    }\n    ```\n\n1. Use git status, add, commit and push your [package.json](package.json) and [package-lock.json](package-lock.json).\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> lab03_diary.md: This chunk provides detailed specifications for the functions that will be implemented in the diary application, including their parameters, return types, and error handling. It is part of the implementation section of the lab document, guiding students on how to create and manage diary entries effectively.",
                "content": "## Interface: Functions\n\nFor error cases, choose an appropriate error message. The automarking will allow for any string.\n```javascript\nreturn { error: 'a relevant error message of your choice.' }\n```\n\nBe wary of the input and output of each function below.\n- Parenthesis, `()`, denotes the parameters for each function\n- Curly braces, `{}`, denotes an Object return type\n    - what you see inside of `{}` are the properties expected in the object. You can find the value of these properties further below in the [Interface: Data Types](#interface-data-types) section. For example, The return type of `viewDiaryEntry` is `{entry}`, meaning a valid return statement could look like:\n        ```js\n        return {\n          entry: {\n            entryId: 999,\n            title: 'Day 1',\n            content: \"Today I don't feel like doing anything\",\n            timestamp: 1716194323,\n          }\n        }\n        ```\n        be careful with the double object nesting as seen above - this is an intentionally challenging aspect of this lab!\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th>Parameters</th>\n    <th>Return Type (Object)</th>\n    <th>Errors</th>\n  </tr>\n  <tr>\n    <td>\n        <code>clear</code><br /><br />\n        Remove all entries in the diary and returns an empty object\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n        <code>()</code>\n    </td>\n    <td>\n        <code>{}</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>addDiaryEntry</code><br /><br />\n        Creates a new diary entry, returning an object containing a unique entryId.\n        <br />\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n        <code>(title, content)</code>\n    </td>\n    <td>\n        <code>{entryId}</code>\n    </td>\n    <td>\n        Return the object <code>{error}</code> if:\n        <ul>\n            <li>The <code>title</code> is an empty string, <code>\"\"</code></li>\n            <li>The <code>content</code> is an empty string, <code>\"\"</code></li>\n        </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>viewDiaryEntry</code><br /><br />\n        Returns the full detail of a diary entry corresponding to the input id.\n        <br />\n        Please refer to the Return Type (Object) column\n        <br />\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n        <code>(entryId)</code>\n    </td>\n    <td>\n        <code>{entry}</code>\n    </td>\n    <td>\n        Return the object <code>{error}</code> if:\n        <ul>\n            <li>The <code>entryId</code> does not refer to an existing diary entry</li>\n        </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>listDiaryEntries</code><br /><br />\n        Returns brief details about all diary entries.\n        <br />\n        Please refer to the Return Type (Object) column.\n        <br />\n        <b>The most recently created entries should appear first, i.e. [e3, e2, e1] </b>\n        <br />\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n        <code>()</code>\n    </td>\n    <td>\n        <code>{entries}</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>editDiaryEntry</code><br /><br />\n        Edits the title and content of a diary entry and returns an empty object.\n        <br />\n        You do not need to update the timestamp.\n        <br />\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n        <code>(entryId, title, content)</code>\n    </td>\n    <td>\n        <code>{}</code>\n    </td>\n    <td>\n        Return the object <code>{error}</code> if:\n        <ul>\n            <li>The <code>entryId</code> does not refer to an existing entry created with <code>addDiaryEntry</code></li>\n            <li>The <code>title</code> is an empty string, <code>\"\"</code></li>\n            <li>The <code>content</code> is an empty string, <code>\"\"</code></li>\n        </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>searchDiary</code><br /><br />\n        Search through the diary for all entries whose title or content\n        contains the given substring. When <code>titleOnly</code> is set to <code>true</code> this search can be made to only look through the titles. \n        <br />\n        You can simply use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" target=\"_blank\">built-in <code>includes</code> method for strings</a>\n        <br />\n        Entries should appear in the order they were created, i.e. [e1, e2, e3]\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n        <code>(substring, titleOnly)</code>\n    </td>\n    <td>\n        <code>{entries}</code>\n    </td>\n    <td>\n        Return the object <code>{error}</code> if:\n        <ul>\n            <li>The <code>substring</code> is an empty string, <code>\"\"</code></li>\n        </ul>\n    </td>\n  </tr>\n</table>\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> lab03_diary.md: This chunk provides detailed information about the expected data types for the inputs and outputs of the functions defined in the \"Interface: Functions\" section of the lab document. It is crucial for understanding how to implement the diary entry functions correctly and for writing corresponding tests in the \"Task\" section.",
                "content": "## Interface: Data Types\n\nThis is only regarding the input/output of the functions in the [Interface: Functions](#interface-functions) and has no relation to the data object (implementation). Sometimes the implementation data types will very closely align, but there is no expectation they do.\n\n<table>\n  <tr>\n    <th>Variable name</th>\n    <th>Type</th>\n  </tr>\n  <tr>\n    <td>named exactly <b>error</b></td>\n    <td><code>string</code>, with the value being a relevant error message of your choice</td>\n  </tr>\n  <tr>\n    <td>named exactly <b>entryId</b></td>\n    <td><code>number</code>, specifically integer</td>\n  </tr>\n  <tr>\n    <td>named exactly <b>title</b></td>\n    <td><code>string</code></td>\n  </tr>\n  <tr>\n    <td>named exactly <b>content</b></td>\n    <td><code>string</code></td>\n  </tr>\n  <tr>\n    <td>named exactly <b>timestamp</b></td>\n    <td><code>number</code>, specifically a <a href=\"https://flaviocopes.com/how-to-get-timestamp-javascript\" target=\"_blank\">UNIX timestamp</a> in seconds (not milliseconds!)</td>\n  </tr>\n  <tr>\n    <td>named exactly <b>substring</b></td>\n    <td><code>string</code></td>\n  </tr>\n  <tr>\n    <td>named exactly <b>titleOnly</b></td>\n    <td><code>boolean</code></td>\n  </tr>\n  <tr>\n    <td>(outputs only) named exactly <b>entries</b></td>\n    <td><code>Array</code> of objects, where each <code>Object</code> is of type <code>{ entryId, title }</code></td>\n  </tr>\n  <tr>\n    <td>(outputs only) named exactly <b>entry</b></td>\n    <td><code>Object</code> containing keys <code>{entryId, title, content, timestamp}</code></td>\n  </tr>\n</table>\n\n# Task\n\n## Testing\n\n- This should be done before designing your database or implementing your functions.\n- In the file [diary.test.js](diary.test.js), write tests for all functions in [Interface: Functions](#interface-functions).\nYou should expect most of your tests to fail on your implementation initially!\n\n**IMPORTANT**: Your tests should **not** make assumptions about:\n- how data is stored\n- how IDs are generated. For example,\n    - one student's implementation could have the diary's `entryId` begin at id -1000 and decrease by 5 for each new `entryId`, i.e. -1000, -1005,-1010, etc.\n    - another student could randomise the ID (while still ensuring uniqueness).\n    - hint: look into `expect.any`.\n- which helper functions (i.e. not in the [Interface: Functions](#interface-functions)) are available.\n\nIn your tests, you should only be importing functions from [Interface: Functions](#interface-functions) and write your tests using only the knowledge of the input parameters, return values and the description of the function.\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> lab03_diary.md: This chunk provides guidance on testing, database design, implementation steps, and submission procedures for the diary entry lab, emphasizing the importance of independent tests and efficient database structure while outlining the implementation process for the required functions.",
                "content": "### Tips\n\nEach test should be independent of the other. To achieve this\n- we use [Setup and Teardown](https://jestjs.io/docs/setup-teardown) to streamline your code\n- for example, the `clear` function is called at the very beginning of every tests (inside `beforeEach`) in the starter test code we've given you\n\n## Database\n\nThe database is now black-boxed to us - you can design it however you like! We will have zero knowledge of your data structure when auto-marking. See more details in the [Testing](#testing) section.\n\nHowever, you may want to design your database such that the same information isn't stored/duplicated in multiple places. Consider the case where an entry's title is changed:\n- will this be easily achieved by changing one entry (e.g. the value of an object key) in your code, or will you have to find and change the title in multiple places?\n\n## Implementation\n\n1. Open the file [diary.js](./diary.js) in your preferred text editor. The stub code for each function has been provided for you.\n\n1. Complete each function in [Interface: Functions](#interface-functions).\n\n1. Test your code with your previously-written tests with\n    ```shell\n    $ npm test diary.test.js\n    ```\n\n1. Fix up any errors in your implementation.\n\n### Recommendation\n\nYou are encouraged to use Javascript built-in features (e.g. `for-of` loop) rather than traditional c-style loops using indices. Other array features such as `.find()`, `.filter()` and `.reduce()` are also encouraged and will be explored in further details in later weeks.\n\nWhile this is not worth any marks (as labs are auto-marked for correctness only), it will help to simplify your code and is good practice for your group project.\n\n# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n"
            },
            {
                "summary": "From assessments -> lab03_diary -> lab03_diary.md: The chunk provides a sample `package.json` file as part of the \"Additional Information\" section, which guides users on the key elements to focus on when setting up their project for the diary lab, specifically regarding scripts and dependencies.",
                "content": "# Additional Information\n\n## Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary>\n\n**Note**:\n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n\n```json\n{\n  \"name\": \"lab03_diary\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"type\": \"module\",\n  \"main\": \"diary.js\",\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"^7.17.10\",\n    \"jest\": \"^28.1.0\"\n  }\n}\n```\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_diary\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab03_diary -> package.json: The chunk represents the complete package.json configuration file for a JavaScript project named \"lab03_diary,\" detailing its metadata, dependencies, and scripts for managing the project.",
                "content": "{\n  \"name\": \"lab03_diary\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"type\": \"module\",\n  \"main\": \"diary.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"^7.23.9\",\n    \"jest\": \"^29.7.0\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_holidays\\holidays.js",
        "chunks": [
            {
                "summary": "From assessments -> lab03_holidays -> holidays.js: This chunk of code defines a function `holidaysInRange` that generates holiday date information for Halloween, Mother's Day, and Christmas within a specified year range. It also includes a `main` function that prompts the user for input years and displays the holiday data. The code is part of a larger module intended for holiday date calculations and user interaction.",
                "content": "import { format } from 'date-fns';\n// TODO: add more imports here\nimport { getChristmas } from 'date-fns-holiday-us';\nimport promptSync from 'prompt-sync';\n\n/**\n * Given a starting year and an ending year:\n * - If `start` is not at least 325, return an empty array.\n * - If `start` is strictly greater than `end`, return an empty array.\n * - Otherwise, return an array of objects containing information about the halloween,\n * mothers day and christmas date strings in the given (inclusive) range.\n *\n * An example format for christmas in 1970 is\n * - Friday, 25.12.1970\n *\n * @param {number} start - starting year, inclusive\n * @param {number} end - ending year, inclusive\n * @returns {Array<{halloween: string, christmas: string, mothersDay: string}>}\n */\nexport function holidaysInRange(start, end) {\n  // TODO:\n  return [\n    // Example for start=1970, end=1972\n    {\n      halloween: 'Saturday, 31.10.1970',\n      mothersDay: 'Sunday, 10.05.1970',\n      christmas: 'Friday, 25.12.1970'\n    },\n    {\n      halloween: 'Sunday, 31.10.1971',\n      mothersDay: 'Sunday, 09.05.1971',\n      christmas: 'Saturday, 25.12.1971'\n    },\n    {\n      halloween: 'Tuesday, 31.10.1972',\n      mothersDay: 'Sunday, 14.05.1972',\n      christmas: 'Monday, 25.12.1972'\n    }\n  ];\n}\n\n/**\n * TODO: Implement the two lines in the \"main\" function below.\n * This function is imported and called in main.js\n */\nexport function main() {\n  const prompt = promptSync();\n  const start = 1970; // FIXME use prompt and parseInt()\n  const end = 1972; // FIXME use prompt and parseInt()\n\n  const holidays = holidaysInRange(start, end);\n  console.log(holidays);\n}\n\n\n/**\n * Do not call the main function in this file - it is already imported\n * and called in main.js. Please revisit the specificaiton about this.\n */"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_holidays\\holidays.test.js",
        "chunks": [
            {
                "summary": "From assessments -> lab03_holidays -> holidays.test.js: This chunk contains a test case for the `holidaysInRange` function, which is designed to verify that the function correctly returns holiday dates for Halloween, Christmas, and Mother's Day for the years 1970 to 1972.",
                "content": "import { holidaysInRange } from './holidays';\n\ntest('Example - replace me', () => {\n  expect(holidaysInRange(1970, 1972)).toStrictEqual([\n    {\n      halloween: 'Saturday, 31.10.1970',\n      christmas: 'Friday, 25.12.1970',\n      mothersDay: 'Sunday, 10.05.1970'\n    },\n    {\n      halloween: 'Sunday, 31.10.1971',\n      christmas: 'Saturday, 25.12.1971',\n      mothersDay: 'Sunday, 09.05.1971'\n    },\n    {\n      halloween: 'Tuesday, 31.10.1972',\n      christmas: 'Monday, 25.12.1972',\n      mothersDay: 'Sunday, 14.05.1972'\n    }\n  ]);\n});\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_holidays\\jest.config.cjs",
        "chunks": [
            {
                "summary": "From assessments -> lab03_holidays -> jest.config.cjs: This chunk is a configuration file for a testing framework, specifying the environment as Node.js and limiting the number of concurrent worker processes to one.",
                "content": "module.exports = {\n  testEnvironment: 'node',\n  maxWorkers: 1,\n};\n\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_holidays\\main.js",
        "chunks": [
            {
                "summary": "From assessments -> lab03_holidays -> main.js: This chunk is a JavaScript code snippet that serves as the entry point for executing a program, specifically importing a function from another module and invoking it.",
                "content": "/**\n * Run your code manually with\n *     $ node main.js\n */\nimport { main } from './holidays.js';\n\nmain();\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_holidays\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab03_holidays -> package.json: The chunk represents the contents of a `package.json` file for a Node.js project named \"lab03_holidays,\" detailing its metadata, dependencies, and scripts for managing the project.",
                "content": "{\n  \"name\": \"lab03_holidays\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"type\": \"module\",\n  \"main\": \"holidays.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"^7.17.10\",\n    \"jest\": \"^28.1.0\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_holidays\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab03_holidays -> README.md: This chunk provides an introduction to the lab assignment, including the lab title, estimated completion time, overall difficulty, and essential background information. It outlines the rationale for the project, instructions for getting started, and details on package installation necessary for implementing the functionality to determine the dates of specific holidays.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-2%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-no-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n## Due Date\n\nWeek 4 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n## Background\n\n### Rationale\n\nEverybody loves holidays, and your client is no exception!\n\nYou have been approached with a problem - your client wishes to know which day of the week Halloween, Christmas and Mother's Day would fall on in a particular year, regardless of whether it is in the past, present or future.\n\nBeing a clever and efficient software engineer, you knew that writing a date-time library yourself could only bring forth pain and suffering. Fortunately, the wheels do not need to be re-invented for you have recently acquired infinite wisdom through the [Node Package Manager (npm)](https://docs.npmjs.com/about-npm).\n\n### Getting Started\n\n- If you are working on a CSE machine (e.g. via VLAB), ensure that you've run the command `1531 setup`. You only need to do this once at the beginning of the course.\n- Please make sure you have completed `lab03_password` prior.\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine.\n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab. To check if you have done this correctly, type `ls` in this new directory to see if you can see the relevant files (including [holidays.js](holidays.js)).\n\n### Package Installation\n\n1. Open [package.json](package.json) and look under the key `\"devDependencies\"`. We have added these development packages from `lab03_password` for you.\n\n1. Quickly install the packages with the command:\n\n   ```shell\n   $ npm install # shortcut: npm i\n   ```\n\n1. Under `\"scripts\"`, make the following changes:\n   ```json\n   \"scripts\": {\n       \"test\": \"jest\",\n   }\n   ```\n\nFor this exercise, we will be using the following libraries:\n\n- [date-fns](https://www.npmjs.com/package/date-fns) for parsing dates\n- [date-fns-holiday-us](https://www.npmjs.com/package/date-fns-holiday-us) for useful holiday functions\n- [prompt-sync](https://www.npmjs.com/package/prompt-sync) for reading user input from the command line\n\n1. You can install all three packages in one command with:\n\n   ```shell\n   $ npm i date-fns date-fns-holiday-us@0.2.1 prompt-sync\n   ```\n\n   Note that for date-fns-holiday-us, we are installing the specific version 0.2.1.\n\n1. Open [package.json](package.json) and ensure that these packages appear under the key `\"dependencies\"`, e.g\n   ```json\n   // Note: Your version number may differ\n   \"dependencies\": {\n     \"date-fns\": \"^2.28.0\",\n     \"date-fns-holiday-us\": \"^0.2.1\",\n     \"prompt-sync\": \"^4.2.0\"\n   }\n   ```\n1. Use git status, add, commit and push your [package.json](package.json) and [package-lock.json](package-lock.json).\n"
            },
            {
                "summary": "From assessments -> lab03_holidays -> README.md: This chunk is part of the \"Interface\" section of the document, detailing the functions and data types required for the implementation of the `holidaysInRange` and `main` functions in the context of a date-time library for determining holiday dates.",
                "content": "### Interface: Functions\n\n#### Note:\nThe return type `holidaysArray` is an array itself (`[...]`), rather than an object with this key (i.e. not`{ holidaysArray }`).\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th>Parameters</th>\n    <th>Return Type</th>\n    <th>Errors</th>\n  </tr>\n  <tr>\n    <td>\n        <code>holidaysInRange</code><br /><br />\n        Given a starting year and an ending year:\n        <ul>\n            <li>If <code>start</code> is not at least 325, return an empty array.</li>\n            <li>If <code>start</code> is strictly greater than <code>end</code>, return an empty array.</li>\n            <li>Otherwise, return an array of objects containing information about the Halloween, Christmas and\n          Mother's Day date strings in the given (inclusive) range.</li>\n        </ul>\n        <b>Difficulty</b>: \u2b50\u2b50\u2b50\n    </td>\n    <td>\n        (start, end)\n    </td>\n    <td>\n        <code>holidaysArray</code>\n    </td>\n    <td>\n        N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>main</code><br /><br />\n        Reads a starting year and an ending year from the user and displays (with <code>console.log</code>) the\n        values returned by the <code>holidaysInRange</code> function above.\n        <br/><br/>\n        Note:\n        <ul>\n            <li>\n                See further below for some expected behaviour of the main function.\n            </li>\n        </ul>\n        <b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n        (start, end)\n    </td>\n    <td>\n        <code>undefined</code>\n    </td>\n    <td>\n        N/A\n    </td>\n</table>\n\n### Interface: Data Types\n\n| Variable Name | Type                                                                                          |\n| ------------- | --------------------------------------------------------------------------------------------- |\n| start         | `number`, specifically integer                                                                |\n| end           | `number`, specifically integer                                                                |\n| halloween     | `string`, e.g. \"Sunday, 31.10.1971\"                                                           |\n| christmas     | `string`, e.g. \"Saturday, 25.12.1971\"                                                         |\n| mothersDay    | `string`, e.g. \"Sunday, 09.05.1971\"                                                           |\n| holidaysArray | `Array` of objects, where each object contains the keys `{halloween, christmas, mothersDay}` |\n| undefined | This means you do not need to return anything! |\n\nThe month and day should be 0-padded to 2 digits, and the year should be 0-padded to have a minimum of 4 digits (yyyy). For example, if the following years are within the range, the expected year format is:\n\n- 325 => 0325\n- 2000 => 2000\n- 20000 => 20000\n"
            },
            {
                "summary": "From assessments -> lab03_holidays -> README.md: This chunk outlines the task requirements for implementing the `holidaysInRange` function in the context of a lab assignment, including optional testing guidelines, implementation details, and instructions for reading user input from the command line. It is part of a larger document that provides background information, setup instructions, and an overview of the project's objectives related to determining holiday dates.",
                "content": "## Task\n\n### Writing Tests (optional)\n\nFor this lab, testing has been made optional (not assessed). However, you are still advised to write them to gain confidence that your code behaves as expected.\n\nIn [holidays.test.js](holidays.js), complete a test suite for `holidaysInRange`. You should aim to cover _different_ cases for the function.\n\nYou do not need to write tests for the `main` function (beyond the scope of this course).\n\nYou may find the following resource useful:\n\n- https://www.calendar-365.com/holidays/1970.html\n- Try changing `1970` to a different year in the link above\n- Note: The site does not support years before 1000 - however, similar to your implementation, our automarking will rely solely on the [date-fns-holiday-us](https://www.npmjs.com/package/date-fns-holiday-us) package so these cases are not a cause for concern.\n\n### Implementation\n\nIn [holidays.js](holidays.js), implement the function `holidaysInRange` according to its documentation.\n\nThis exercise is difficult to complete without using the libraries provided. You may want to spend some time reading the documentation for\n[date-fns](https://www.npmjs.com/package/date-fns) and [date-fns-holiday-us](https://www.npmjs.com/package/date-fns-holiday-us) before starting.\n\nEnsure that your code passes all of the written tests before submitting it.\n\n### Main - Reading Inputs from Commandline\n\nIn the `main` function, use [prompt-sync](https://www.npmjs.com/package/prompt-sync) to read the `start` and `end` year from the user and print the output of `holidaysInRange` to `stdout`. This function is imported and called in [main.js](main.js).\n\nNote that [prompt-sync](https://www.npmjs.com/package/prompt-sync) reads inputs as strings, so you will need to use convert them to integers using `parseInt()`!\n\nBelow is an example of how [prompt-sync](https://www.npmjs.com/package/prompt-sync) can be used to read a string and print it out to stdout:\n\n<details close>\n<summary>click to view</summary>\n\n```js\nimport promptSync from \"prompt-sync\";\n\nfunction main() {\n  const prompt = promptSync();\n  const string = prompt(\"Enter a message: \"); // has type \"string\"\n  console.log(string);\n}\n\n// Note: This is already done for you in main.js.\n// You should NOT call the main function inside holidays.js, otherwise your tests\n// will not run to completion when importing from holidays.js\nmain();\n```\n\n</details>\n\nHere are a few examples (it is fine if your output differs by white space):\n\n```shell\n$ node main.js\nEnter start: 1970                # NOTE: user enters 1970\nEnter end: 1972                  # NOTE: user enters 1972\n[\n  {\n    halloween: 'Saturday, 31.10.1970',\n    christmas: 'Friday, 25.12.1970',\n    mothersDay: 'Sunday, 10.05.1970'\n  },\n  {\n    halloween: 'Sunday, 31.10.1971',\n    christmas: 'Saturday, 25.12.1971',\n    mothersDay: 'Sunday, 09.05.1971'\n  },\n  {\n    halloween: 'Tuesday, 31.10.1972',\n    christmas: 'Monday, 25.12.1972',\n    mothersDay: 'Sunday, 14.05.1972'\n  }\n]\n```\n\n`Start` is less than 325:\n\n```shell\n$ node main.js\nEnter start: 324\nEnter end: 325\n[]\n```\n"
            },
            {
                "summary": "From assessments -> lab03_holidays -> README.md: This chunk provides important tips for implementing the lab assignment, including guidance on using libraries, submission procedures, and managing project dependencies, specifically focusing on the use of `git` and the handling of the `node_modules` directory. It also includes a sample `package.json` file to illustrate the expected structure and dependencies for the project.",
                "content": "## Tips\n\n1. Avoid manually parsing the date string format yourself - use the provided libraries!\n1. You may not use any libraries other than the ones listed unless mentioned otherwise by our course staff.\n\n## Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n\n\n## Additional Information\n\n### Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary><br/>\n\n**Note**:\n\n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n\n```json\n{\n  \"name\": \"lab03_holidays\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"type\": \"module\",\n  \"main\": \"holidays.js\",\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"^7.17.10\",\n    \"jest\": \"^28.1.0\"\n  },\n  \"dependencies\": {\n    \"date-fns\": \"^2.28.0\",\n    \"date-fns-holiday-us\": \"^0.2.1\",\n    \"prompt-sync\": \"^4.2.0\"\n  }\n}\n```\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_password\\jest.config.cjs",
        "chunks": [
            {
                "summary": "From assessments -> lab03_password -> jest.config.cjs: This chunk is a configuration file for a testing framework, specifying the test environment as Node.js and limiting the number of concurrent workers to one.",
                "content": "module.exports = {\n  testEnvironment: 'node',\n  maxWorkers: 1,\n};\n\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_password\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab03_password -> package.json: This chunk represents the metadata and configuration details of a Node.js project, specifically a package.json file for a module named \"lab03_password,\" outlining its version, description, main entry point, scripts, and licensing information.",
                "content": "{\n  \"name\": \"lab03_password\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"type\": \"module\",\n  \"main\": \"password.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_password\\password.js",
        "chunks": [
            {
                "summary": "From assessments -> lab03_password -> password.js: This chunk contains the documentation and implementation outline for the `checkPassword` function, which assesses the strength of a given password based on specific criteria, as well as notes on testing practices related to the function.",
                "content": "/**\n * NOTE: Tests for the checkPassword should be written first,\n * before implementing the function below.\n * @module password\n */\n\n/**\n * Checks the strength of the given password and returns a string\n * to represent the result.\n *\n * The returned string (in Title Case) is based on the requirements below:\n * - \"Strong Password\"\n *     - at least 12 characters long\n *     - at least  1 number\n *     - at least  1 uppercase letter\n *     - at least  1 lowercase letter\n *     - at least 1 special character from this list: [!, @, $, %, ^, &, *, +, #]\n *       (this list does NOT include the comma or square brackets)\n * - \"Moderate Password\"\n *     - at least  10 characters long\n *     - at least  1 letter (upper or lower case)\n *     - at least  1 number\n * - \"Horrible Password\"\n *     - passwords that are exactly any of the top 5 (not 20) passwords\n *     from the 2025 Nordpass Ranking:\n*      - https://en.wikipedia.org/wiki/List_of_the_most_common_passwords\n * - \"Poor Password\"\n *     - any password that is not horrible, moderate or strong.\n *\n * @param {string} password to check\n * @returns {string} string to indicate the strength of the password.\n */\nexport function checkPassword(password) {\n  /**\n   * FIXME\n   *\n   * Note: your stringformat must match the specification exactly.\n   * Please read the specficiation carefully.\n   */\n  return '';\n}\n\n/**\n * Testing will no longer be done in here with console.log.\n * See password.test.js and write Jest tests instead!\n */\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_password\\password.test.js",
        "chunks": [
            {
                "summary": "From assessments -> lab03_password -> password.test.js: This chunk is a Jest test file for the `checkPassword` function, containing a placeholder test and commented-out examples that demonstrate how to structure password validation tests.",
                "content": "/**\n * @see password\n * @module password.test\n *\n * TIP: you are highly encouraged to look into test.each, test.only, test.skip, test.todo\n * from the jest documentations: https://jestjs.io/docs/api\n */\n\nimport { checkPassword } from './password';\n\ntest('Remove this test and uncomment the other tests below', () => {\n  expect(1 + 1).toEqual(2);\n});\n\n/*\n\n// You can remove or replace this with your own tests.\n// TIP: you may want to explore \"test.each\"\ndescribe('Example block of tests', () => {\n  test('Example test 1', () => {\n    expect(checkPassword('something')).toEqual('Poor Password');\n  });\n\n  test('Example test 2', () => {\n    expect(checkPassword('not a good test')).toEqual('Poor Password');\n  });\n});\n\n*/\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab03_password\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab03_password -> README.md: This chunk contains the introductory section of a lab document focused on password strength assessment, including the lab's title, estimated completion time, overall difficulty, and background information outlining the rationale for the lab, as well as instructions for getting started with the project.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-3%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-yes-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 4 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n# Background\n\n## Note\n\n**The quality of your tests will be assessed in this lab and future labs from this point onwards**.\n\n## Rationale\n\nUsers are not very clever. They tend to choose the ~~laziest~~ most convenient option available despite being fully aware of the drawbacks that it entails. \n\nTake passwords, for example - how often do people:\n\n1. use a common phrase such as `password`,\n1. re-use the same password across different accounts, or\n1. use/combine simple words (e.g. `hearsay`) to make a weak password,\n\nthus sacrificing security for the sake of not having to remember a strong yet difficult string of authentication. \n\nIn this lab, your goal is to rate the strength of a password using a set of requirements and produce a test suite that can dynamically verify, to a satisfactory extent, that a particular solution will meet these requirements.\n\n## Getting Started\n\n- If you are working on a CSE machine (e.g. via VLAB), ensure that you've run the command `1531 setup`. You only need to do this once at the beginning of the course.\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine. \n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab. To check if you have done this correctly, type `ls` in this new directory to see if you can see the relevant files (including [password.js](password.js)).\n\n"
            },
            {
                "summary": "From assessments -> lab03_password -> README.md: This chunk provides detailed instructions on installing Jest, a JavaScript testing framework, and configuring it for use in the password strength assessment lab. It outlines the steps for setting up the testing environment, modifying the package.json file, and preparing for the implementation of the password strength checking function.",
                "content": "## Jest Installation\n\n*[Jest](https://jestjs.io/) is a delightful JavaScript Testing Framework with a focus on simplicity*. To get started,\n\n1. Install Jest as a development dependency by specifying the option `--save-dev`. We do this because testing packages are unnecessary in production code.\n    ```shell\n    $ npm install --save-dev jest@28.1.0 # shortcut: npm i -D jest@28.1.0\n    ```\n\n1. For compatibility with our new import/export syntax, we will also install [@babel/preset-env](https://www.npmjs.com/package/@babel/preset-env).\n    ```shell\n    $ npm install --save-dev @babel/preset-env # shortcut: npm i -D @babel/preset-env\n    ```\n\n1. Open [package.json](package.json) and confirm that jest and @babel/preset-env are shown in `\"devDependencies\"`, e.g\n    ```json\n    // Note: Your version number may differ\n    \"devDependencies\": {\n      \"@babel/preset-env\": \"^7.17.10\",\n      \"jest\": \"^28.1.0\"\n    }\n    ```\n\n1. Also, under `\"scripts\"`, you should see a section similar to:\n    ```json\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    }\n    ```\n    Modify the value of the key `test` to `jest`:\n    ```json\n    \"scripts\": {\n      \"test\": \"jest\"\n    }\n    ```\n\n1. You can run your added scripts with the command `npm run [script]`. However, since `test` is a special keyword in `npm`, you can use any of the three commands below:\n    ```shell\n    $ npm run test\n    $ npm test\n    $ npm t\n    ```\n\n1. To check that you have completed the steps correctly, compare your [package.json](package.json) with our sample package.json in the [Additional Information](#additional-information) section.\n\n1. Type `git status` in your terminal. You should see that [package.json](package.json) and [package-lock.json](package-lock.json) have been modified or is untracked. Use git to add, commit and push these changes.\n\n## Interface: Functions\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th>Parameters</th>\n    <th>Return Type</th>\n    <th>Errors</th>\n  </tr>\n  <tr>\n    <td>\n        <code>checkPassword</code><br /><br />\n        Checks the strength of the given password and returns a string\n        to represent the result.\n        <br/><br/>\n        The returned string, in [Title Case](https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case), is based on the requirements below:\n        <br/><br/>\n        <ol>\n            <li>\n                \"Strong Password\"\n                <ul>\n                    <li>at least 12 characters long</li>\n                    <li>at least  1 number</li>\n                    <li>at least  1 uppercase letter</li>\n                    <li>at least  1 lowercase letter</li>\n                    <li>at least 1 special character from this list: [!, @, $, %, ^, &, *, +, #] <i>(this list does NOT include the comma or square brackets)</i></li>\n                </ul>\n            </li>\n            <li>\n                \"Moderate Password\"\n                <ul>\n                    <li>at least  10 characters long</li>\n                    <li>at least  1 number</li>\n                    <li>at least  1 letter (uppercase OR lowercase)</li>\n                </ul>\n            </li>\n            <li>\n                \"Horrible Password\"\n                <ul>\n                    <li>\n                        passwords that are exactly any of the <a href=\"https://en.wikipedia.org/wiki/List_of_the_most_common_passwords\" target=\"_blank\"><b>top 5</b> (not 20) most common passwords</a> in the 2025 Nordpass Ranking.\n                    </li>\n                </ul>\n            </li>\n            <li>\n                \"Poor Password\"\n                <ul>\n                    <li>\n                        all remaining passwords that are not horrible, moderate or strong.\n                    </li>\n                <ul>\n            </li>\n        </ol>\n        <b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n        (password)\n    </td>\n    <td>\n        <code>string</code>\n    </td>\n    <td>\n        N/A\n    </td>\n  </tr>\n</table>\n"
            },
            {
                "summary": "From assessments -> lab03_password -> README.md: This chunk outlines the interface for data types related to the password strength assessment task and provides detailed instructions for writing tests for the `checkPassword` function, which is a key component of the lab assignment focused on password security evaluation.",
                "content": "## Interface: Data Types\n| Variable Name | Type |\n| --- | --- |\n| `password` | `string` - you can assume [printable ASCII characters](https://aticleworld.com/printable-ascii-characters-list/) (Decimals 32-126 inclusive) |\n\n# Task\n\n## Writing Tests\n\nBefore implementing `checkPassword`,\n\n1. Open the file [password.test.js](password.test.js).\n1. Write at least 10 tests for `checkPassword`.\n    - you should avoid repeated/redundant tests.\n    - ensure that each test targets exactly one specific case.\n    - aim to cover as many different cases for the function as you can. **You will be assessed on this**.\n    - try to follow the specification as closely as possible when designing your tests.\n1. Run your tests with\n    ```shell\n    $ npm t\n    ```\n1. Ensure that there are unexpected errors. You should expect the current stub code in `checkPassword` to fail most tests.\n1. Use git to add, commit and push [password.test.js](password.test.js).\n\n\n### Tips with Jest\n- View the API and documentation at https://jestjs.io/docs/api\n    - particularly, `test.each`, `test.only`, `test.todo` and `test.skip`\n- You may want to explore `test.each` - this is a way to write multiple tests succinctly.\n\n## Implementation\n\nOnce you have written your test suite,\n\n1. Open [password.js](password.js) and implement `checkPassword` according to its documentation\n1. Run your test\n1. Fix any bug in your implementation\n1. Git add, commit and push your code\n\n# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n"
            },
            {
                "summary": "From assessments -> lab03_password -> README.md: The chunk provides important guidelines and restrictions for testing the password strength function, including what should and should not be tested, as well as specific requirements for returning results. It also includes additional information about the sample `package.json` file and miscellaneous details related to project setup and dependencies.",
                "content": "# Notes\n\n- You should only test the requirements specified in the [Interface: Functions](interface-functions).\n\n- You should **not** be testing any undefined behaviour (e.g do not pass in a `number` instead of a `string` for a password).\n\n- You are not allowed to use any other external libraries/modules in this exercise. This means that unless instructed otherwise, you cannot use `npm install`.\n\n- You **MUST** return the string exactly as described in the specification, i.e.\n    ```js\n    return 'Strong Password';\n    return 'Moderate Password';\n    return 'Horrible Password';\n    return 'Poor Password';\n    ```\n\n    we **will not accept any other formats** for these strings. There will be **no opportunity for re-runs if you do not return one of these 4 strings** each\n    time your function is called - please be wary of this.\n\n# Additional Information\n\n## Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary><br/>\n\n**Note**: \n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n\n```json\n{\n  \"name\": \"lab03_password\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"type\": \"module\",\n  \"main\": \"password.js\",\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"^7.17.10\",\n    \"jest\": \"^28.1.0\"\n  }\n}\n```\n\n</details>\n\n## Miscellaneous\n\n<details>\n\n<summary>Other information that is not core to the course</summary><br/>\n\n- For starting new projects, \n    - a [package.json](package.json) file can be generated with `npm init`, where you will be prompted with a series of questions.\n    - Alternatively, `npm init --yes` (shortcut `npm init -y`) will immediately generate a [package.json](package.json) with default options.\n    - However, we will always provide you with a stub [package.json](package.json) in the labs, so you won't ever need to do this.\n- [@babel/preset-env](https://www.npmjs.com/package/@babel/preset-env) will only be needed in lab03 \n    - this is for using javascript Jest with ES Modules (notice the key `\"type\"` in [package.json](package.json) has the value `\"module\"`).\n    - this package is utilised in the file [.babelrc.cjs](.babelrc.cjs).\n    - labs in future weeks will not require this dependency.\n- [jest.config.cjs](jest.config.cjs)\n    - This is the configuration file for jest. For future labs, it will be `jest.config.js`.\n    - `.cjs` is a way to specify that the file is a Common Module (<=ES5) rather than ES6 Module (with new import/export syntax)\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_encanto\\.gitlab-ci.yml",
        "chunks": [
            {
                "summary": "From assessments -> lab04_encanto -> .gitlab-ci.yml: This chunk represents a configuration snippet for a GitLab CI/CD pipeline, specifically defining the image, stages, before_script commands, and a testing job that runs checks on the master branch.",
                "content": "image: comp1531/automarking:latest\n\nstages:\n  - checks\n    \nbefore_script:\n  - echo 'Add more commands here. This runs before all of your jobs'\n  - echo 'You may want to add commands such as installing dependencies (npm i/npm ci), etc'\n\ntesting:\n  stage: checks\n  script:\n    - echo \"Please modify your .gitlab-ci.yml file to run test on your code!\"\n  only:\n    - master\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_encanto\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab04_encanto -> package.json: The chunk represents the package.json configuration file for a project named \"lab04_encanto,\" detailing its metadata, main entry point, scripts, dependencies, and licensing information, which is essential for managing the project's development and testing environment.",
                "content": "{\n  \"name\": \"lab04_encanto\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Where everything is fantastical and magical\",\n  \"main\": \"src/madrigal.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"jest\": \"^29.7.0\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_encanto\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab04_encanto -> README.md: This chunk contains the introductory section of the lab document, including the lab title, estimated completion time, overall difficulty, and initial setup instructions for the TypeScript installation process, which are essential for students to begin their work on the COMP1531 lab related to Disney's film \"Encanto.\"",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-3%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-no-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-no-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 5 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n# Background\n\n## Rationale\n\nWelcome to the Family Madrigal, where all the people are fantastical and magical! \n\nDisney's film [Encanto](https://en.wikipedia.org/wiki/Encanto_(film)) features an extraordinary family where every child is blessed with a unique gift - every child except our poor protagonist, Mirabel. Through the magic of static typing, you must move the mountains, make the flowers bloom and prove that Mirabel is indeed the most special Madrigal of all!\n\nTo assist you with this lab and the remainder of the term, COMP1531 will bestow upon you our greatest gift - the miracle of TypeScript! This is JavaScript, but more fantastical and magical!\nAlso, here is a [playlist](https://www.youtube.com/watch?v=iLP_CMVLfVc&list=PLKPn7hqvUwgx-ddMdUbOTIHshyg-iQCIa) that you can listen to while completing this lab.\n\n## Getting Started\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB\nor your local machine.\n- In your terminal, change your directory (using the `cd` command) into the newly\ncloned lab. \n- Ensure that **you've run the command `1531 setup` at least once** since the beginning of the term!\n\n## TypeScript Installation\n\n*[Typescript](https://www.typescriptlang.org/) is a strongly typed programming language that builds on Javascript, giving you better tooling at any scale*. To get started,\n\n1. Open [package.json](package.json) and look at existing packages in `\"dependencies\"` and `\"devDependencies\"`. Install them with:\n    ```shell\n    $ npm install # shortcut: npm i\n    ```\n1. Install [typescript](https://www.npmjs.com/package/typescript) and [ts-node](https://www.npmjs.com/package/ts-node) as development dependencies so we can use the `tsc` and `ts-node` commands:\n    ```shell\n    $ npm install --save-dev typescript ts-node # shortcut: npm i -D typescript ts-node\n    ```\n1. Install [ts-jest](https://www.npmjs.com/package/ts-jest) to use jest on typescript code:\n    ```shell\n    $ npm install --save-dev ts-jest @types/jest # shortcut: npm i -D ts-jest @types/jest\n    ```\n1. Open your [package.json](package.json) and add the scripts below. Notice the `--noEmit` option for `\"tsc\"` - this means that `tsc` will only be used for type-checking, and typescript files will not be compiled to javascript files.\n    ```json\n    \"scripts\": {\n      \"test\": \"jest\",\n      \"tsc\": \"tsc --noEmit\",\n      \"ts-node\": \"ts-node\"\n    }\n    ```\n1. To check that you have completed the steps correctly, compare your [package.json](package.json) with our sample package.json in the [Additional Information](#additional-information) section.\n1. Use `git` to `add`, `commit` and `push` your [package.json](package.json) and [package-lock.json](package-lock.json).\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> README.md: This chunk provides the detailed interface for functions that need to be implemented in the lab assignment, outlining their names, descriptions, parameters, return types, and potential errors, as part of the TypeScript programming tasks related to the Disney film \"Encanto.\"",
                "content": "## Interface: Functions\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th>Parameters</th>\n    <th>Return Type</th>\n    <th>Errors</th>\n  </tr>\n  <tr>\n    <td>\n        <code>addMadrigal</code>\n        <br/><br/>\n        Given a name, an age and an <b>optional</b> gift, create and return a Madrigal member.\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n<pre>(\n  name: string,\n  age: number,\n  gift?: string\n)</pre>\n    </td>\n    <td>\n        <code>Madrigal</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>addSong</code>\n        <br/><br/>\n        Given a name and either a string or array of strings denoting the singers, create and return a Song.\n        <br/><br/>\n        You are guaranteed that if singers is an array of strings, it will contain at least 2 strings.\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n<pre>(\n  name: string,\n  singers: string | string[]\n)</pre>\n    </td>\n    <td>\n        <code>Song</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>getNamesMixed</code>\n        <br/><br/>\n        Given a list that may contain a mixture of Madrigal and Song items, return the name of these items in the order they were given in.\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n<pre>(\n  array: (Madrigal | Song)[]\n)</pre>\n    </td>\n    <td>\n        <code>string[]</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>getNamesPure</code>\n        <br/><br/>\n        Given a list only Madrigal items or only Song items, return the name of these items in the order they were given in.\n        <br/><br/>\n        The implementation for this function can use or be the same as getNamesMixed. What differs is the type annotation for the input parameters.\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n<pre>(\n  array: Madrigal[] | Song[]\n)</pre>\n    </td>\n    <td>\n        <code>string[]</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>checkIsSinger</code>\n        <br/><br/>\n        Check if the given madrigal is one of the singers in the given song.\n        <br/><br/>\n        <b>Madrigal property</b>: since all Madrigals are fantastically unique,\n        you are guaranteed that no two Madrigals will have their names be a\n        substring of the other.\n        <br/><br/>\n        For example, if there is a Madrigal named \"Mirabel\", there will not\n        be another madrigal named \"Mira\", \"ira\", \"bel\", etc\n        (you don't need to consider these cases).\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n<pre>(\n  madrigal: Madrigal,\n  song: Song\n)</pre>\n    </td>\n    <td>\n        <code>boolean</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>getSortedMadrigals</code>\n        <br/><br/>\n        Return a new sorted array of madrigals based on:\n        <ol>\n          <li>age, in ascending order, and if equal then</li>\n          <li>name, in lexicographical order (using <code>s1.localeCompare(s2)</code>)</li>\n        </ol>\n        For example, the items below are correctly sorted:\n        <ul>\n          <li>\n            Mirabel (age 15)\n          </li>\n          <li>\n            Dolores (age 22)\n          </li>\n          <li>\n            Isabella (age 22)\n          </li>\n        </ul>\n        since Mirabel is the youngest, and 'D' is before 'I' between Dolores and Isabella.\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n<pre>(\n  madrigals: Madrigal[],\n)</pre>\n    </td>\n    <td>\n        <code>Madrigal[]</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>getSongsWithMadrigals</code>\n        <br/><br/>\n        Given an array of madrigals and an array of songs, return all songs that contain any of the madrigals as a singer.\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n<pre>(\n  madrigals: Madrigal[],\n  songs: Song[]\n)</pre>\n    </td>\n    <td>\n        <code>Song[]</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>getMostSpecialMadrigal</code>\n        <br/><br/>\n        Given an array of madrigals and an array of songs, return the madrigal that sang the most songs, for they are <i>clearly</i> the most special. \n        <br/><br/>\n        If two madrigals have the same number of songs sung, the one that appeared first in the array will be returned.\n        <br/><br/>\n        You do not need to worry about the case where the list of madrigals is empty (this will not be tested).\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\u2b50\n    </td>\n    <td>\n<pre>(\n  madrigals: Madrigal[],\n  songs: Song[]\n)</pre>\n    </td>\n    <td>\n        <code>Madrigal</code>\n    </td>\n    <td>\n      N/A\n    </td>\n  </tr>\n</table>\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> README.md: This chunk provides important tips and notes regarding the implementation of functions and data types for the lab assignment, specifically focusing on the creation of Madrigal and Song objects, as well as guidelines for ensuring proper function behavior and type annotations in TypeScript. It also outlines the testing process using Jest, which is essential for validating the implementation.",
                "content": "### Tips\n\n1. When creating a Madrigal, if a `gift` is not specified, the key `gift` should not exist in the returned object.\n1. Names are case-sensitive, i.e. \"Bruno\", \"bruNo\" an \"bRunO\" are all different people. The only exception is that when sorting, you can simply follow the order of the default `.localeCompare()` method for strings.\n1. Challenge: in the `checkIsSinger` function, it is fine to use if-conditions to check whether the key `singers` is a string or an array. However, it is also possible to implement this function in 1 line by taking advantage of the **Madrigal Property** and a common method for both strings and arrays.\n1. All functions in this lab are [pure functions](https://en.wikipedia.org/wiki/Pure_function). You should NOT need to introduce a \"dataStore\" or use any global variables.\n\n\n## Interface: Data Types\n\n| Interface | Structure |\n| --- | --- |\n| `Madrigal` | Object containing keys `{name: string, age: number, gift?: string}` |\n| `Song` | Object containing keys `{name: string, singers: string \\| string[]}` |\n\nNote: \n- `gift?` denotes that the gift is optional.\n  - i.e. both `{name: 'Luisa', age: 19}` and `{name: 'Luisa', age: 19, gift: 'Super Strength'}` are valid.\n\n- `string | string[]` is a union between a string and an array of strings.\n  - i.e. both `'Mirabel'` and `['Mirabel', 'Isabella']` are valid.\n\n- In COMP1531, you can use both the `interface` and `type` keywords, e.g.\n    ```ts\n    interface Animal {\n      name: string;\n      family: string;\n    }\n\n    // or\n\n    type Animal = {\n      name: string;\n      familty: string;\n    }\n    ```\n    while there are some [differences](https://blog.logrocket.com/types-vs-interfaces-typescript),\n    they are outside the scope of COMP1531 and will not be covered. For most of our simple use cases,\n    you can consider them interchangable.\n\n# Task\n\n## Testing\n\n### Using jest\n\nTests have already been written for you in [src/madrigal.test.ts](src/madrigal.test.ts). However, they are currently\ncommented out and you will need to uncomment them. Afterwards, you can run the tests with:\n```shell\n$ npm t\n```\nYou do not need to write any additional tests.\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> README.md: This chunk provides instructions on type-checking and running TypeScript code using `tsc` and `ts-node`, as well as guidance on implementing functions in the `src/madrigal.ts` file according to specified interfaces. It also discusses continuous integration practices related to the GitLab repository for the lab assignment.",
                "content": "### Type-checking with tsc\n\nMoreover, in [src/main.ts](src/main.ts), we have provided code that calls the [Interface: Functions](#interface-functions) with both valid and invalid arguments.\n\nTo type-check your code, use the command\n```shell\n$ npm run tsc\n```\nThe file [src/main.ts](src/main.ts) will display errors if your type annotations in [src/madrigal.ts](src/madrigal.ts) do not conform with the Interface.\n\n### Running ts-node \n\nYou can also run this file directly with ts-node (which will also do what tsc does behind the scene).\nFrom the root directory of this lab:\n```shell\n$ npm run ts-node src/main.ts\n```\n\nThe expected output (potentially with different white spaces) is\n```text\n{ name: 'Mirabel', age: 15 }\n{ name: 'Isabella', age: 22, gift: 'Flower Creation' }\n[ 'Mirabel', 'Isabella' ]\n[ 'Waiting on a Miracle', 'What Else Can I Do?' ]\n[ 'Mirabel', 'Waiting on a Miracle', 'Isabella', 'What Else Can I Do?' ]\ntrue\nfalse\n[ { name: 'Mirabel', age: 15 }, { name: 'Isabella', age: 22, gift: 'Flower Creation' } ]\n[ { name: 'What Else Can I Do?', singers: [ 'Isabella', 'Mirabel' ] } ]\n{ name: 'Mirabel', age: 15 }\n```\n\n## Implementation\n\nIn [src/madrigal.ts](src/madrigal.ts), implement the functions in [Interface: Functions](#interface-functions) with type annotations following [Interface: Data Types](#interface-data-types).\n\n\n## Continuous Integration\n\nYou may have noticed from previous labs that there is a green tick (\u2705) on commits in the marking branch - pretty cool, huh?\n\nThis is thanks to the file [.gitlab-ci.yml](.gitlab-ci.yml) in our Gitlab repository, which defines a set of commands (i.e. a script) for our Gitlab runner to execute. Attend week 4 lectures to find out more!\n\nAlso, if you're interested, here is more documentation from Gitlab:\n  - https://docs.gitlab.com/ee/ci/quick_start/index.html\n  - https://docs.gitlab.com/ee/ci/yaml/\n\nFor our purposes though, the task is simple. We want our pipeline to run `npm install` and `npm test` every time we push to the master branch. Have a look through [.gitlab-ci.yml](.gitlab-ci.yml) and think about how this can be achieved, then modify the file accordingly.\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> README.md: The chunk is located towards the end of the document, following the implementation instructions and testing guidelines for the TypeScript lab assignment. It outlines the submission process for the lab, including steps for using Git to push changes, checking the repository, and managing storage on CSE machines, as well as providing additional information about the sample `package.json` and miscellaneous details related to the lab.",
                "content": "# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n\n# Additional Information\n\n## Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary><br/>\n\n**Note**: \n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n\n```json\n{\n  \"name\": \"lab04_encanto\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Where everything is fantastical and magical\",\n  \"main\": \"src/madrigal.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"tsc\": \"tsc --noEmit\",\n    \"ts-node\": \"ts-node\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^27.5.1\",\n    \"jest\": \"^28.1.0\",\n    \"ts-jest\": \"^28.0.2\",\n    \"ts-node\": \"^10.7.0\",\n    \"typescript\": \"^4.6.4\"\n  }\n}\n```\n\n</details>\n\n## Miscellaneous\n\n<details>\n\n<summary>Other information that is not core to the course</summary><br/>\n\n1. While *compile* is the umbrella term used in this lab, it is more technical to say that TypeScript *transpiles* into JavaScript. See [here](https://stackoverflow.com/questions/44931479/compiling-vs-transpiling) for further details about their differences.\n\n1. **The files below can be safely ignored - we will always provide them for you if necessary**:\n    - [tsconfig.json](tsconfig.json) - configuration file for typescript compilation. Note that when using `tsc` with a file argument, `tsconfig.json` will (oddly) be ignored.\n    - [jest.config.js](jest.config.js) - configuration file for jest to use ts-jest, generated with `npx ts-jest config:init`.\n    - [.gitignore](.gitignore) - tells git which files/patterns to ignore while committing.\n\n1. Also, you may have noticed that [@babel/preset-env](https://www.npmjs.com/package/@babel/preset-env) is no longer used in this lab. \n    - This is because we have transitioned to [typescript](https://www.npmjs.com/package/typescript) and [ts-jest](https://www.npmjs.com/package/ts-jest).\n    - [jest.config.js](jest.config.js) has been updated from lab03 accordingly.\n\n1. Finally, notice that [@types/jest](https://www.npmjs.com/package/@types/jest) is in our [package.json](package.json)'s `\"devDependencies\"`.\n    - This is the type definition for jest\n    - Generally, to use a *library* with TypeScript, you may want to also install @types/*library*.\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_encanto\\src\\madrigal.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab04_encanto -> src -> madrigal.test.ts: The chunk is an import statement and a placeholder test case at the beginning of a JavaScript test file that is designed to test various functions related to the Madrigal family and their songs, as defined in the './madrigal' module.",
                "content": "import {\n  Madrigal,\n  Song,\n  addMadrigal,\n  addSong,\n  getNamesMixed,\n  getNamesPure,\n  checkIsSinger,\n  getSortedMadrigals,\n  getSongsWithMadrigals,\n  getMostSpecialMadrigal,\n} from './madrigal';\n\ntest('Remove this test and uncomment the other tests below', () => {\n  expect(1 + 1).toEqual(2);\n});\n\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> src -> madrigal.test.ts: The chunk contains unit tests for the functions `addMadrigal` and `addSong`, which are part of a testing suite for a Madrigal family and song management system. These tests validate the correct creation of Madrigal family members and songs, ensuring that the functions behave as expected when provided with various inputs.",
                "content": "\n\n/*\n\ndescribe('addMadrigal', () => {\n  test('no gift', () => {\n    expect(addMadrigal('Mirabel', 15)).toStrictEqual({ name: 'Mirabel', age: 15 });\n  });\n\n  test('with gift', () => {\n    expect(\n      addMadrigal('Mirabel', 15, 'butterflies')\n    ).toStrictEqual({ name: 'Mirabel', age: 15, gift: 'butterflies' });\n  });\n});\n\ndescribe('addSong', () => {\n  test.each([\n    {\n      name: 'Columbia, Mi Encanto',\n      singers: '',\n      expected: { name: 'Columbia, Mi Encanto', singers: '' }\n    },\n    {\n      name: 'Turn It Down',\n      singers: 'Dolores',\n      expected: { name: 'Turn It Down', singers: 'Dolores' }\n    },\n    {\n      name: 'What Else Can I Do',\n      singers: ['Isabella', 'Mirabel'],\n      expected: { name: 'What Else Can I Do', singers: ['Isabella', 'Mirabel'] }\n    },\n  ])('($name, $singers) => $expected', ({ name, singers, expected }) => {\n    expect(addSong(name, singers)).toStrictEqual(expected);\n  });\n});\n\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> src -> madrigal.test.ts: The chunk is part of a test suite for a JavaScript module related to the \"Encanto\" movie, specifically focusing on creating and managing the Madrigal family and their songs. It includes the setup of Madrigal family members and songs, which are used in subsequent tests to validate various functionalities of the module.",
                "content": "\n\ndescribe('Encanto tests', () => {\n  // ====================================================================== //\n  // Creating Madrigal Family\n  // ====================================================================== //\n\n  const pedro = addMadrigal('Pedro', 76);\n  const abuela = addMadrigal('Alma', 75);\n\n  const casita = addMadrigal('Casita', 50, 'Draws, Floors, Doors');\n  const bruno = addMadrigal('Bruno', 50, 'Visions');\n\n  const pepa = addMadrigal('Pepa', 50, 'Weather-Controlling Mood');\n  const felix = addMadrigal('Felix', 50);\n  const dolores = addMadrigal('Dolores', 22, 'Super Hearing');\n  const camilo = addMadrigal('Camilo', 15, 'Shapeshifting');\n  const antonio = addMadrigal('Antonio', 5, 'Talking to Animals');\n\n  const julieta = addMadrigal('Julieta', 50, 'Healing Meals');\n  const augustine = addMadrigal('Augustine', 50);\n  const isabella = addMadrigal('Isabella', 22, 'Flower Creation');\n  const luisa = addMadrigal('Luisa', 19, 'Super Strength');\n  const mirabel = addMadrigal('Mirabel', 15);\n\n  const madrigalFamily: Madrigal[] = [\n    pedro, abuela, casita, bruno,\n    pepa, felix, dolores, camilo, antonio,\n    julieta, augustine, isabella, luisa, mirabel,\n  ];\n  const madrigalNames: string[] = [\n    pedro.name, abuela.name, casita.name, bruno.name,\n    pepa.name, felix.name, dolores.name, camilo.name, antonio.name,\n    julieta.name, augustine.name, isabella.name, luisa.name, mirabel.name,\n  ];\n\n  // ====================================================================== //\n  // Creating Songs\n  // Playlist https://youtube.com/playlist?list=PLKPn7hqvUwgx-ddMdUbOTIHshyg-iQCIa\n  // Bonus Dolores Song: https://www.youtube.com/watch?v=GcHijBTHk4Y\n  // ====================================================================== //\n\n  const theFamilyMadrigal = addSong('The Family Madrigal', [mirabel.name, abuela.name]);\n  const waitingOnAMiracle = addSong('Waiting on a Miracle', mirabel.name);\n  const surfacePressure = addSong('Surface Pressure', luisa.name);\n  const weDontTalkAboutBruno = addSong(\"We Don't Talk About Bruno\", [\n    abuela.name, pepa.name, felix.name, dolores.name,\n    camilo.name, isabella.name, mirabel.name,\n  ]);\n  const whatElseCanIDo = addSong('What Else Can I Do?', [isabella.name, mirabel.name]);\n  const dosOruguitas = addSong('Dos Oruguitas', pedro.name);\n  const turnItDown = addSong('Turn It Down', dolores.name);\n  const allOfYou = addSong('All Of You', madrigalNames);\n\n  const songs: Song[] = [\n    theFamilyMadrigal, waitingOnAMiracle, surfacePressure,\n    weDontTalkAboutBruno, whatElseCanIDo, dosOruguitas,\n    allOfYou, turnItDown,\n  ];\n  const songNames: string[] = [\n    theFamilyMadrigal.name, waitingOnAMiracle.name, surfacePressure.name,\n    weDontTalkAboutBruno.name, whatElseCanIDo.name, dosOruguitas.name,\n    allOfYou.name, turnItDown.name,\n  ];\n\n  // ====================================================================== //\n\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> src -> madrigal.test.ts: The chunk is part of a series of tests within a Jest testing suite for a Madrigal family and song management system. Specifically, it focuses on the functionality of retrieving names from a mixed array of Madrigal family members and songs, validating the expected outputs for various input scenarios.",
                "content": "\n\n  describe('getNames', () => {\n    describe.each([\n      { getFunction: getNamesMixed },\n      { getFunction: getNamesPure },\n    ])('$getFunction.name', ({ getFunction }) => {\n      test.each([\n        // Empty case\n        { input: [], expected: [] },\n        // Madrigals only\n        { input: [mirabel], expected: [mirabel.name] },\n        { input: [dolores, camilo], expected: [dolores.name, camilo.name] },\n        { input: madrigalFamily, expected: madrigalNames },\n        // Songs only\n        { input: [surfacePressure], expected: [surfacePressure.name] },\n        { input: [turnItDown, allOfYou], expected: [turnItDown.name, allOfYou.name] },\n        { input: songs, expected: songNames },\n      ])('Expected: $expected', ({ input, expected }) => {\n        expect(getFunction(input)).toStrictEqual(expected);\n      });\n    });\n\n    test.each([\n      { input: [luisa, surfacePressure], expected: [luisa.name, surfacePressure.name] },\n      { input: [...songs, ...madrigalFamily], expected: [...songNames, ...madrigalNames] },\n    ])('getNamesMixed => $expected', ({ input, expected }) => {\n      expect(getNamesMixed(input)).toStrictEqual(expected);\n    });\n  });\n\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> src -> madrigal.test.ts: This chunk is part of a series of tests within a Jest testing suite for functions related to the Madrigal family and their songs from the movie \"Encanto.\" It specifically focuses on verifying the functionality of the `checkIsSinger` function, which checks if a given singer is associated with a specific song, and the `getSortedMadrigals` function, which sorts the Madrigal family members based on age and name.",
                "content": "\n\n  describe('checkIsSinger', () => {\n    test.each([\n      { singer: mirabel, song: addSong('new', ''), expected: false },\n      { singer: mirabel, song: surfacePressure, expected: false },\n      { singer: luisa, song: surfacePressure, expected: true },\n      { singer: bruno, song: weDontTalkAboutBruno, expected: false },\n      { singer: dolores, song: weDontTalkAboutBruno, expected: true },\n    ])('($song.name, $singer.name) => $expected', ({ singer, song, expected }) => {\n      expect(checkIsSinger(singer, song)).toBe(expected);\n    });\n  });\n\n  describe('getSortedMadrigals', () => {\n    describe.each([\n      { name: 'empty', madrigals: [], expected: [] },\n      { name: 'one item', madrigals: [dolores], expected: [dolores] },\n      { name: 'two items no swap age', madrigals: [antonio, dolores], expected: [antonio, dolores] },\n      { name: 'two items swap age', madrigals: [dolores, antonio], expected: [antonio, dolores] },\n      { name: 'two items no swap name', madrigals: [dolores, isabella], expected: [dolores, isabella] },\n      { name: 'two items swap name', madrigals: [isabella, dolores], expected: [dolores, isabella] },\n      {\n        name: 'whole family',\n        madrigals: madrigalFamily,\n        expected: [\n          antonio, camilo, mirabel, luisa, dolores, isabella,\n          augustine, bruno, casita, felix, julieta, pepa,\n          abuela, pedro,\n        ]\n      },\n    ])('$name', ({ madrigals, expected }) => {\n      let backupCopy: Madrigal[];\n\n      beforeEach(() => {\n        backupCopy = [...madrigals];\n      });\n\n      test('correct order', () => {\n        expect(getSortedMadrigals(madrigals)).toStrictEqual(expected);\n      });\n\n      test('original list not modified', () => {\n        expect(madrigals).toStrictEqual(backupCopy);\n      });\n    });\n  });\n\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> src -> madrigal.test.ts: This chunk is part of a set of unit tests for the function `getSongsWithMadrigals`, which checks the association between madrigal family members and their corresponding songs. It includes various test cases to validate the correct retrieval of songs based on the provided madrigals, ensuring that the output matches expected results without duplicates.",
                "content": "\n\n  describe('getSongsWithMadrigals', () => {\n    const testCases = [\n      // Single\n      { madrigals: [pedro], madrigalSongs: [dosOruguitas, allOfYou] },\n      { madrigals: [abuela], madrigalSongs: [theFamilyMadrigal, weDontTalkAboutBruno, allOfYou] },\n      { madrigals: [casita], madrigalSongs: [allOfYou] },\n      { madrigals: [bruno], madrigalSongs: [allOfYou] },\n      { madrigals: [pepa], madrigalSongs: [weDontTalkAboutBruno, allOfYou] },\n      { madrigals: [felix], madrigalSongs: [weDontTalkAboutBruno, allOfYou] },\n      { madrigals: [dolores], madrigalSongs: [weDontTalkAboutBruno, allOfYou, turnItDown] },\n      { madrigals: [camilo], madrigalSongs: [weDontTalkAboutBruno, allOfYou] },\n      { madrigals: [antonio], madrigalSongs: [allOfYou] },\n      { madrigals: [julieta], madrigalSongs: [allOfYou] },\n      { madrigals: [augustine], madrigalSongs: [allOfYou] },\n      { madrigals: [isabella], madrigalSongs: [whatElseCanIDo, weDontTalkAboutBruno, allOfYou] },\n      { madrigals: [luisa], madrigalSongs: [surfacePressure, allOfYou] },\n      {\n        madrigals: [mirabel],\n        madrigalSongs: [\n          theFamilyMadrigal, waitingOnAMiracle,\n          weDontTalkAboutBruno, whatElseCanIDo, allOfYou\n        ]\n      },\n\n      // Compound\n      { madrigals: [bruno, casita], madrigalSongs: [allOfYou] },\n      {\n        madrigals: [luisa, isabella],\n        madrigalSongs: [whatElseCanIDo, weDontTalkAboutBruno, surfacePressure, allOfYou]\n      },\n      {\n        madrigals: [dolores, mirabel, luisa],\n        madrigalSongs: [\n          theFamilyMadrigal, surfacePressure, waitingOnAMiracle,\n          turnItDown, weDontTalkAboutBruno, whatElseCanIDo, allOfYou\n        ]\n      },\n      { madrigals: madrigalFamily, madrigalSongs: songs },\n    ];\n    test.each(\n      testCases.map(t => ({ testName: getNamesPure(t.madrigals), testData: t }))\n    )('$testName', ({ testData }) => {\n      const { madrigals, madrigalSongs } = testData;\n      const songArray = getSongsWithMadrigals(madrigals, songs);\n      const songSet = new Set(songArray);\n      const expectedSet = new Set(madrigalSongs);\n\n      // Comparing sets since order don't matter\n      expect(songSet).toStrictEqual(expectedSet);\n\n      // Should fail if solution contains duplicates\n      expect(songArray.length).toEqual(expectedSet.size);\n    });\n  });\n\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> src -> madrigal.test.ts: This chunk contains unit tests for the function `getMostSpecialMadrigal`, which determines the most significant member of the Madrigal family based on their associated songs. It is part of a larger suite of tests that validate various functionalities related to the Madrigal family and their songs, ensuring the correctness of the implemented logic in the context of the \"Encanto\" theme.",
                "content": "\n\n  describe('getMostSpecialMadrigal', () => {\n    const testCases = [\n      { madrigals: [bruno, casita], expectedMadrigal: bruno },\n      { madrigals: [luisa, isabella], expectedMadrigal: isabella },\n      { madrigals: [dolores, luisa, isabella], expectedMadrigal: dolores },\n      { madrigals: [dolores, luisa, mirabel, isabella], expectedMadrigal: mirabel },\n      { madrigals: madrigalFamily, expectedMadrigal: mirabel },\n    ];\n    test.each(\n      testCases.map(t => ({ testName: getNamesPure(t.madrigals), testData: t }))\n    )('$testName', ({ testData }) => {\n      const { madrigals, expectedMadrigal } = testData;\n      expect(getMostSpecialMadrigal(madrigals, songs)).toStrictEqual(expectedMadrigal);\n    });\n\n    test('No songs, return first madrigal', () => {\n      expect(getMostSpecialMadrigal([abuela, dolores], [])).toStrictEqual(abuela);\n    });\n  });\n});\n\n*/"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_encanto\\src\\madrigal.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab04_encanto -> src -> madrigal.ts: This chunk contains TypeScript code defining interfaces and functions related to \"Madrigals\" and \"Songs,\" with a focus on adding type annotations to improve type safety and clarity in a pure functional programming context.",
                "content": "/**\n * Add type annotations to function parameters and replace all type stubs 'any'.\n *\n * Note: All functions in this lab are pure functions (https://en.wikipedia.org/wiki/Pure_function)\n * You should NOT introduce a \"dataStore\" or use any global variables in this file.\n */\n\nexport interface Madrigal {\n  // TODO: add type annotations\n  name: any;\n  age: any;\n  gift?: any;\n}\n\nexport interface Song {\n  // TODO: add type annotations\n  name: any;\n  singers: any;\n}\n\n// TODO: remove 'any' and add type annotations\nexport function addMadrigal(name: any, age: any, gift? : any): any {\n  // TODO: implementation\n  return { name: 'John Lennon', age: 40 };\n}\n\n// TODO: remove 'any' and add type annotations\nexport function addSong(name: any, singers: any): any {\n  // TODO: implementation\n  return { name: 'Something', singers: 'Beatles' };\n}\n\n// TODO: add type annotations\nexport function getNamesMixed(array) {\n  // TODO: implementation\n  return ['string', 'array'];\n}\n\n// TODO: add type annotations\nexport function getNamesPure(array) {\n  // TODO: implementation\n  return ['string', 'array'];\n}\n\n// TODO: add type annotations\nexport function checkIsSinger(madrigal, song) {\n  // TODO: implementation. Should be a boolean, i.e. true/false\n  return null;\n}\n\n// TODO: add type annotations\nexport function getSortedMadrigals(madrigals) {\n  // TODO: implementation\n  return [];\n}\n\n// TODO: add type annotations\nexport function getSongsWithMadrigals(madrigals, songs) {\n  // TODO: implementation\n  return [];\n}\n\n// TODO: add type annotations\nexport function getMostSpecialMadrigal(madrigals, songs) {\n  // TODO: implementation\n  return { name: 'stub code', age: 999, gift: 'potates' };\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_encanto\\src\\main.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab04_encanto -> src -> main.ts: The chunk contains TypeScript code that imports various functions and types related to madrigals and songs, along with a function `_unusedTypecheck` designed to validate type annotations by intentionally causing TypeScript errors for incorrect usages of those functions. This serves as a testing mechanism to ensure type correctness in the overall codebase.",
                "content": "import {\n  Madrigal,\n  Song,\n  addMadrigal,\n  addSong,\n  getNamesMixed,\n  getNamesPure,\n  checkIsSinger,\n  getSortedMadrigals,\n  getSongsWithMadrigals,\n  getMostSpecialMadrigal,\n} from './madrigal';\n\n// ========================================================================= //\n\n/**\n * This is NOT a standard way of writing code. The purpose of\n * this function is to stop tsc/ts-node from compiling your code\n * if your type annotation is not consistent with the specification\n * by using comments that starts with \"ts-expect-error\".\n *\n * DO NOT COPY THIS IN YOUR MAJOR PROJECT OR ANY OTHER LABS.\n *\n * TLDR:\n * - It should compile if your type annotations are correct.\n * - Don't call directly, and don't copy!\n */\nfunction _unusedTypecheck() {\n  // @ts-expect-error invalid name type\n  addMadrigal(false, 15, 'valid');\n  // @ts-expect-error invalid age type\n  addMadrigal('Mirabel', false, 'valid');\n  // @ts-expect-error invalid gift type\n  addMadrigal('Mirabel', 15, false);\n  // @ts-expect-error extra argument\n  addMadrigal('Mirabel', 15, 'valid', 'extra argument');\n  // @ts-expect-error missing argument\n  addMadrigal('Mirabel');\n\n  // @ts-expect-error due to invalid name type\n  addSong(false, 'Isabella');\n  // @ts-expect-error due to invalid singers type\n  addSong(\"We Don't Talk About Bruno\", false);\n  // @ts-expect-error missing argument\n  addSong('Waiting on a Miracle');\n  // @ts-expect-error extra argument\n  addSong('Waiting on a Miracle', 'Mirabel', 'extra argument');\n\n  // ========================================================================= //\n\n  const luisa = addMadrigal('Luisa', 15, 'Super Strength');\n  const surfacePressure = addSong('Surface Pressure', luisa.name);\n\n  // @ts-expect-error invalid list\n  getNamesMixed([1, 2, 3]);\n  // @ts-expect-error extra arguments\n  getNamesMixed([luisa], 'extra Argument');\n  // @ts-expect-error missing arguments\n  getNamesMixed();\n\n  /**\n   * NOTE: If you get an error here, it means that your code is not\n   * type-annotated correctly. Please double check the specification!\n   */\n  // @ts-expect-error invalid list\n  getNamesPure([1, 2, 3]);\n  // @ts-expect-error extra argument\n  getNamesPure([luisa], 'extra Argument');\n  // @ts-expect-error missing arguments\n  getNamesPure();\n  // @ts-expect-error mixed of songs and madrigrals\n  getNamesPure([luisa, surfacePressure]);\n\n  // @ts-expect-error invalid madrigal\n  checkIsSinger('invalid', surfacePressure);\n  // @ts-expect-error invalid song\n  checkIsSinger(luisa, 'invalid');\n  // @ts-expect-error extra argument\n  checkIsSinger(luisa, surfacePressure, 'extra argument');\n  // @ts-expect-error missing arguments\n  checkIsSinger(luisa);\n\n  // @ts-expect-error invalid madrigal list\n  getSortedMadrigals([1, 2, 3]);\n  // @ts-expect-error extra argument\n  getSortedMadrigals([luisa], 'extra argument');\n  // @ts-expect-error missing arguments\n  getSortedMadrigals();\n\n  // @ts-expect-error invalid madrigal list\n  getSongsWithMadrigals([1, 2, 3], [surfacePressure]);\n  // @ts-expect-error invalid song list\n  getSongsWithMadrigals([luisa], [1, 2, 3]);\n  // @ts-expect-error extra argument\n  getSongsWithMadrigals([luisa], [surfacePressure], 'extra argument');\n  // @ts-expect-error missing arguments\n  getSongsWithMadrigals([luisa]);\n\n  // @ts-expect-error invalid madrigal list\n  getMostSpecialMadrigal([1, 2, 3], [surfacePressure]);\n  // @ts-expect-error invalid song list\n  getMostSpecialMadrigal([luisa], [1, 2, 3]);\n  // @ts-expect-error extra argument\n  getMostSpecialMadrigal([luisa], [surfacePressure], 'extra argument');\n  // @ts-expect-error missing arguments\n  getMostSpecialMadrigal([luisa]);\n}\n\n"
            },
            {
                "summary": "From assessments -> lab04_encanto -> src -> main.ts: This chunk of code demonstrates the creation and manipulation of `Madrigal` and `Song` objects using functions imported from the `madrigal` module. It includes examples of adding madrigals and songs, as well as retrieving and displaying their names and relationships, along with sample output comments for clarity. This section follows a type-checking function that ensures proper usage of the API.",
                "content": "\n\n// Typescript is smart enough to infer type, so including \": Madrigal\" is optional\nconst mirabel: Madrigal = addMadrigal('Mirabel', 15);\nconst isabella = addMadrigal('Isabella', 22, 'Flower Creation');\n\nconst waitingOnAMiracle: Song = addSong('Waiting on a Miracle', mirabel.name);\nconst whatElseCanIDo = addSong('What Else Can I Do?', [isabella.name, mirabel.name]);\n\n/*\nSample Output (with different white-space) when using the command:\n\n    $ npm run ts-node src/main.ts\n\nfrom the root lab directory:\n```\n{ name: 'Mirabel', age: 15 }\n{ name: 'Isabella', age: 22, gift: 'Flower Creation' }\n[ 'Mirabel', 'Isabella' ]\n[ 'Waiting on a Miracle', 'What Else Can I Do?' ]\n[ 'Mirabel', 'Waiting on a Miracle', 'Isabella', 'What Else Can I Do?' ]\ntrue\nfalse\n[ { name: 'Mirabel', age: 15 }, { name: 'Isabella', age: 22, gift: 'Flower Creation' } ]\n[ { name: 'What Else Can I Do?', singers: [ 'Isabella', 'Mirabel' ] } ]\n{ name: 'Mirabel', age: 15 }\n```\n\nUse `npm test` for a more comprehensive test suite (in madrigal.test.ts).\n*/\nconsole.log(mirabel);\nconsole.log(isabella);\nconsole.log(getNamesPure([mirabel, isabella]));\nconsole.log(getNamesPure([waitingOnAMiracle, whatElseCanIDo]));\nconsole.log(getNamesMixed([mirabel, waitingOnAMiracle, isabella, whatElseCanIDo]));\nconsole.log(checkIsSinger(isabella, whatElseCanIDo));\nconsole.log(checkIsSinger(isabella, waitingOnAMiracle));\nconsole.log(getSortedMadrigals([isabella, mirabel]));\nconsole.log(getSongsWithMadrigals([isabella], [waitingOnAMiracle, whatElseCanIDo]));\nconsole.log(getMostSpecialMadrigal([isabella, mirabel], [waitingOnAMiracle, whatElseCanIDo]));"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_shapes\\.eslintrc.json",
        "chunks": [
            {
                "summary": "From assessments -> lab04_shapes -> .eslintrc.json: The chunk represents the configuration settings for an ESLint setup tailored for a TypeScript project, including parser options, environment settings, global variables, and a comprehensive set of linting rules to enforce coding standards and best practices.",
                "content": "{\n  \"ignorePatterns\": [\"build\"],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\n    \"@typescript-eslint\",\n    \"jest\"\n  ],\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2022,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n  \"env\": {\n    \"es2021\": true,\n    \"node\": true,\n    \"jest\": true\n  },\n  \"globals\": {\n    \"document\": \"readonly\",\n    \"navigator\": \"readonly\",\n    \"window\": \"readonly\"\n  },\n  \"rules\": {\n    \"no-unused-vars\": [\"error\", {\n      \"args\": \"none\",\n      \"caughtErrors\": \"none\",\n      \"ignoreRestSiblings\": true,\n      \"vars\": \"all\"\n    }],\n    \n    // Everything below here is standard 1531\n\n    \"@typescript-eslint/no-var-requires\": 0,\n    \"@typescript-eslint/no-unused-vars\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n \n    \"no-var\": \"warn\",\n    \"object-shorthand\": 0, // [\"warn\", \"properties\"],\n\n    \"accessor-pairs\": [\"error\", { \"setWithoutGet\": true, \"enforceForClassMembers\": true }],\n    \"array-bracket-spacing\": [\"error\", \"never\"],\n    \"array-callback-return\": [\"error\", {\n      \"allowImplicit\": false,\n      \"checkForEach\": false\n    }],\n    \"arrow-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"block-spacing\": [\"error\", \"always\"],\n    \"brace-style\": [\"error\", \"1tbs\", { \"allowSingleLine\": true }],\n    \"camelcase\": [\"error\", {\n      \"allow\": [\"^UNSAFE_\"],\n      \"properties\": \"never\",\n      \"ignoreGlobals\": true,\n      \"ignoreDestructuring\": true\n    }],\n    \"comma-dangle\": [\"error\", {\n      \"arrays\": \"only-multiline\",\n      \"objects\": \"only-multiline\",\n      \"imports\": \"only-multiline\",\n      \"exports\": \"only-multiline\",\n      \"functions\": \"never\"\n    }],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"comma-style\": [\"error\", \"last\"],\n    \"computed-property-spacing\": [\"error\", \"never\", { \"enforceForClassMembers\": true }],\n    \"constructor-super\": \"error\",\n    \"curly\": [\"error\", \"multi-line\"],\n    \"default-case-last\": \"error\",\n    \"dot-location\": [\"error\", \"property\"],\n    \"dot-notation\": [\"error\", { \"allowKeywords\": true }],\n    \"eol-last\": \"error\",\n    \"eqeqeq\": [\"error\", \"always\", { \"null\": \"ignore\" }],\n    \"func-call-spacing\": [\"error\", \"never\"],\n    \"generator-star-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"indent\": [\"error\", 2, {\n      \"SwitchCase\": 1,\n      \"VariableDeclarator\": 1,\n      \"outerIIFEBody\": 1,\n      \"MemberExpression\": 1,\n      \"FunctionDeclaration\": { \"parameters\": 1, \"body\": 1 },\n      \"FunctionExpression\": { \"parameters\": 1, \"body\": 1 },\n      \"CallExpression\": { \"arguments\": 1 },\n      \"ArrayExpression\": 1,\n      \"ObjectExpression\": 1,\n      \"ImportDeclaration\": 1,\n      \"flatTernaryExpressions\": false,\n      \"ignoreComments\": false,\n      \"ignoredNodes\": [\"TemplateLiteral *\", \"JSXElement\", \"JSXElement > *\", \"JSXAttribute\", \"JSXIdentifier\", \"JSXNamespacedName\", \"JSXMemberExpression\", \"JSXSpreadAttribute\", \"JSXExpressionContainer\", \"JSXOpeningElement\", \"JSXClosingElement\", \"JSXFragment\", \"JSXOpeningFragment\", \"JSXClosingFragment\", \"JSXText\", \"JSXEmptyExpression\", \"JSXSpreadChild\"],\n      \"offsetTernaryExpressions\": true\n    }],\n    \"key-spacing\": [\"error\", { \"beforeColon\": false, \"afterColon\": true }],\n    \"keyword-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"lines-between-class-members\": [\"error\", \"always\", { \"exceptAfterSingleLine\": true }],\n    \"multiline-ternary\": [\"error\", \"always-multiline\"],\n    \"new-cap\": [\"error\", { \"newIsCap\": true, \"capIsNew\": false, \"properties\": true }],\n    \"new-parens\": \"error\",\n    \"no-array-constructor\": \"error\",\n    \"no-async-promise-executor\": \"error\",\n    \"no-caller\": \"error\",\n    \"no-case-declarations\": \"error\",\n    \"no-class-assign\": \"error\",\n    \"no-compare-neg-zero\": \"error\",\n    \"no-cond-assign\": \"error\",\n    \"no-const-assign\": \"error\",\n    \"no-constant-condition\": [\"error\", { \"checkLoops\": false }],\n    \"no-control-regex\": \"error\",\n    \"no-debugger\": \"error\",\n    \"no-delete-var\": \"error\",\n    \"no-dupe-args\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-duplicate-case\": \"error\",\n    \"no-useless-backreference\": \"error\",\n    \"no-empty\": [\"error\", { \"allowEmptyCatch\": true }],\n    \"no-empty-character-class\": \"error\",\n    \"no-empty-pattern\": \"error\",\n    \"no-eval\": \"error\",\n    \"no-ex-assign\": \"error\",\n    \"no-extend-native\": \"error\",\n    \"no-extra-bind\": \"error\",\n    \"no-extra-boolean-cast\": \"error\",\n    \"no-extra-parens\": [\"error\", \"functions\"],\n    \"no-fallthrough\": \"error\",\n    \"no-floating-decimal\": \"error\",\n    \"no-func-assign\": \"error\",\n    \"no-global-assign\": \"error\",\n    \"no-implied-eval\": \"error\",\n    \"no-import-assign\": \"error\",\n    \"no-invalid-regexp\": \"error\",\n    \"no-irregular-whitespace\": \"error\",\n    \"no-iterator\": \"error\",\n    \"no-labels\": [\"error\", { \"allowLoop\": false, \"allowSwitch\": false }],\n    \"no-lone-blocks\": \"error\",\n    \"no-loss-of-precision\": \"error\",\n    \"no-misleading-character-class\": \"error\",\n    \"no-prototype-builtins\": \"error\",\n    \"no-useless-catch\": \"error\",\n    \"no-mixed-operators\": [\"error\", {\n      \"groups\": [\n        [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n        [\"&&\", \"||\"],\n        [\"in\", \"instanceof\"]\n      ],\n      \"allowSamePrecedence\": true\n    }],\n    \"no-mixed-spaces-and-tabs\": \"error\",\n    \"no-multi-spaces\": \"error\",\n    \"no-multi-str\": \"error\",\n    \"no-multiple-empty-lines\": [\"error\", { \"max\": 1, \"maxEOF\": 0 }],\n    \"no-new\": \"error\",\n    \"no-new-func\": \"error\",\n    \"no-new-object\": \"error\",\n    \"no-new-symbol\": \"error\",\n    \"no-new-wrappers\": \"error\",\n    \"no-obj-calls\": \"error\",\n    \"no-octal\": \"error\",\n    \"no-octal-escape\": \"error\",\n    \"no-proto\": \"error\",\n    \"no-redeclare\": [\"error\", { \"builtinGlobals\": false }],\n    \"no-regex-spaces\": \"error\",\n    \"no-return-assign\": [\"error\", \"except-parens\"],\n    \"no-self-assign\": [\"error\", { \"props\": true }],\n    \"no-self-compare\": \"error\",\n    \"no-sequences\": \"error\",\n    \"no-shadow-restricted-names\": \"error\",\n    \"no-sparse-arrays\": \"error\",\n    \"no-tabs\": \"error\",\n    \"no-template-curly-in-string\": \"error\",\n    \"no-this-before-super\": \"error\",\n    \"no-throw-literal\": \"error\",\n    \"no-trailing-spaces\": \"error\",\n    \"no-undef\": \"error\",\n    \"no-undef-init\": \"error\",\n    \"no-unexpected-multiline\": \"error\",\n    \"no-unmodified-loop-condition\": \"error\",\n    \"no-unneeded-ternary\": [\"error\", { \"defaultAssignment\": false }],\n    \"no-unreachable\": \"error\",\n    \"no-unreachable-loop\": \"error\",\n    \"no-unsafe-finally\": \"error\",\n    \"no-unsafe-negation\": \"error\",\n    \"no-unused-expressions\": [\"error\", {\n      \"allowShortCircuit\": true,\n      \"allowTernary\": true,\n      \"allowTaggedTemplates\": true\n    }],\n    \n    \"no-use-before-define\": [\"error\", { \"functions\": false, \"classes\": false, \"variables\": false }],\n    \"no-useless-call\": \"error\",\n    \"no-useless-computed-key\": \"error\",\n    \"no-useless-constructor\": \"error\",\n    \"no-useless-escape\": \"error\",\n    \"no-useless-rename\": \"error\",\n    \"no-useless-return\": \"error\",\n    \"no-void\": \"error\",\n    \"no-whitespace-before-property\": \"error\",\n    \"no-with\": \"error\",\n    \"object-curly-newline\": [\"error\", { \"multiline\": true, \"consistent\": true }],\n    \"object-curly-spacing\": [\"error\", \"always\"],\n    \"object-property-newline\": [\"error\", { \"allowMultiplePropertiesPerLine\": true }],\n    \"one-var\": [\"error\", { \"initialized\": \"never\" }],\n    \"operator-linebreak\": [\"error\", \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\", \"|>\": \"before\" } }],\n    \"padded-blocks\": [\"error\", { \"blocks\": \"never\", \"switches\": \"never\", \"classes\": \"never\" }],\n    \"prefer-const\": [\"error\", {\"destructuring\": \"all\"}],\n    \"prefer-promise-reject-errors\": \"error\",\n    \"prefer-regex-literals\": [\"error\", { \"disallowRedundantWrapping\": true }],\n    \"quote-props\": [\"error\", \"as-needed\"],\n    \"quotes\": [\"error\", \"single\", { \"avoidEscape\": true, \"allowTemplateLiterals\": false }],\n    \"rest-spread-spacing\": [\"error\", \"never\"],\n    \"semi\": [2, \"always\"],\n    \"semi-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"space-before-blocks\": [\"error\", \"always\"],\n    \"space-before-function-paren\": [\"off\"],\n    \"space-in-parens\": [\"error\", \"never\"],\n    \"space-infix-ops\": \"error\",\n    \"space-unary-ops\": [\"error\", { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [\"error\", \"always\", {\n      \"line\": { \"markers\": [\"*package\", \"!\", \"/\", \",\", \"=\"] },\n      \"block\": { \"balanced\": true, \"markers\": [\"*package\", \"!\", \",\", \":\", \"::\", \"flow-include\"], \"exceptions\": [\"*\"] }\n    }],\n    \"symbol-description\": \"error\",\n    \"template-curly-spacing\": [\"error\", \"never\"],\n    \"template-tag-spacing\": [\"error\", \"never\"],\n    \"unicode-bom\": [\"error\", \"never\"],\n    \"use-isnan\": [\"error\", {\n      \"enforceForSwitchCase\": true,\n      \"enforceForIndexOf\": true\n    }],\n    \"valid-typeof\": [\"error\", { \"requireStringLiterals\": true }],\n    \"wrap-iife\": [\"error\", \"any\", { \"functionPrototypeMethods\": true }],\n    \"yield-star-spacing\": [\"error\", \"both\"],\n    \"yoda\": [\"error\", \"never\"]\n  }\n}"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_shapes\\.gitlab-ci.yml",
        "chunks": [
            {
                "summary": "From assessments -> lab04_shapes -> .gitlab-ci.yml: This chunk represents a GitLab CI/CD configuration file (.gitlab-ci.yml) that defines the image to be used, the stages of the pipeline, and the jobs for testing and linting, specifically set to run only on the master branch.",
                "content": "image: comp1531/automarking:latest\n\nstages:\n  - checks\n\nbefore_script:\n  - echo 'Add more commands here. This runs before all of your jobs'\n  - echo 'You may want to add commands such as installing dependencies (npm i/npm ci), etc'\n\ntesting:\n  stage: checks\n  script:\n    - echo 'Edit your .gitlab-ci.yml to run tests!'\n  only:\n    - master\n\nlinting:\n  stage: checks\n  script:\n    - echo 'Edit your .gitlab-ci.yml to run lint!'\n  only:\n    - master\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_shapes\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab04_shapes -> package.json: The chunk represents the entire content of a `package.json` file for a TypeScript project named \"lab04_shapes,\" detailing its version, description, main entry point, scripts, dependencies, and development dependencies.",
                "content": "{\n  \"name\": \"lab04_shapes\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/main.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.12\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"dependencies\": {\n    \"eslint\": \"^8.56.0\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_shapes\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab04_shapes -> README.md: This chunk provides an introduction to the lab assignment, including details on the lab's purpose, background information on linting, and instructions for setting up ESLint in the project environment. It outlines the steps necessary to prepare for the lab, ensuring that students can effectively improve the code style of a pre-written software piece.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-10%20minutes-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-yes-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-no-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 5 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n\n# Background\n\n## Note\n\n**Linting will be assessed in this lab and future labs from this point onwards**.\n\n## Rationale\n\nRules are meant to be broken... except for the ones we set in COMP1531! In this\nlab, you are tasked with fixing the style of a pre-written piece of software\nthat is currently in pretty bad... shape. \n\nBy this, we mean that while the code is executable by machines, it is hardly\nreadable by us humans. With your personal assistant `ESLint`, improve the style\nof the code while adhering to our linting rules and set of requirements.\n\n## Getting Started\n- Please ensure that you have completed `lab04_encanto` prior.\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB\nor your local machine.\n- In your terminal, change your directory (using the `cd` command) into the newly\ncloned lab.\n- Ensure that **you've run the command `1531 setup` at least once** since the beginning of the term!\n\n## ESLint Installation\n\n*[ESLint](https://eslint.org/) is a static code analysis tool for identifying problematic patterns found in JavaScript code*. To get started,\n\n1. Open [package.json](package.json) and look at existing packages in `\"dependencies\"` and `\"devDependencies\"`. Install them with:\n    ```shell\n    $ npm install # shortcut: npm i\n    ```\n1. Install [eslint](https://www.npmjs.com/package/eslint)\n    ```shell\n    $ npm install --save-dev eslint@8 # shortcut: npm i -D eslint@8\n    ```\n1. Install a few more plugins necessary for eslint to work with typescript and jest:\n    ```shell\n    $ npm install --save-dev eslint-plugin-jest @typescript-eslint/parser @typescript-eslint/eslint-plugin\n    ```\n1. Open [package.json](package.json) and modify your scripts while noting the key `\"lint\"`.\n    ```json\n    \"scripts\": {\n        \"test\": \"jest\",\n        \"tsc\": \"tsc --noEmit\",\n        \"ts-node\": \"ts-node\",\n        \"lint\": \"eslint '**/*.ts'\",\n        \"lint-fix\": \"eslint --fix '**/*.ts'\"\n    }\n    ```\n1. Usually, ESLint will need to be configured (initialised) for each new project. However, we have already provided the configuration file [.eslintrc.json](.eslintrc.json) in your repository, so this step won't be necessary.\n1. Use `git` to `add`, `commit` and `push` your [package.json](package.json) and [package-lock.json](package-lock.json).\n"
            },
            {
                "summary": "From assessments -> lab04_shapes -> README.md: This chunk provides detailed information about the function `drawShape`, including its parameters, return type, potential errors, and the data types used, as part of the implementation task in a lab focused on improving code style and compliance with ESLint rules.",
                "content": "## Interface: Functions\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th>Parameters</th>\n    <th>Return Type</th>\n    <th>Errors</th>\n  </tr>\n  <tr>\n    <td>\n        <code>drawShape</code>\n        <br/><br/>\n        Return a string representing a particular shape based on the given number of sides, size and isSolid property.\n        <br/><br/>\n        The only valid numbers for the sides argument are:\n        <ul>\n            <li>3</li>\n            <li>4</li>\n        </ul>\n        both of which can either be solid or hollow (not solid).\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n        (sides, size, isSolid)\n    </td>\n    <td>\n        <code>string</code>\n    </td>\n    <td>\n        Return <code>\"Invalid Input\"</code> if the\n        <ul>\n            <li>sides is not 3 or 4</li>\n            <li>size is a negative integer</li>\n        </ul>\n    </td>\n  </tr>\n</table>\n\n## Interface: Data Types\n| Variable Name | Type |\n| --- | --- |\n| `sides` | `number`, specifically 3 or 4 |\n| `size` | `number`, specifically integer |\n| `isSolid` | `boolean` |\n\n# Task\n\n## Testing\n\nThe tests for `drawShape` are already provided in [src/shapes.test.js](src/shapes.test.js).\nYou do not need to modify the test file or write any additional tests for this lab.\n\n## Implementation\n\nThe function `drawShape` has been implemented for you. However, the code style used\nis currently not ESLint-compliant.\n\nModify [src/shape.ts](src/shape.js) to fix all linting errors. Once done,\nthe commands\n```shell\n$ npm run lint\n```\nand\n```shell\n$ npm test\n```\nshould not display any error.\n\nIf you wish, you could also refactor the code (for example by introducing\nhelper functions to reduce repeated code). However, we will only assess whether\nyour modified code passes both the linter and test.\n\n### Tip:\n\nIn the set-up instructions, we have added a script called `lint-fix`. Running\n```shell\n$ npm run lint-fix\n```\nwill thus fix all the auto-fixable linting errors. You may also be to auto-fix most linting errors\nfrom your IDE.\n"
            },
            {
                "summary": "From assessments -> lab04_shapes -> README.md: This chunk provides instructions on setting up Continuous Integration for the lab project, emphasizing the need to include linting in the pipeline alongside testing and installation commands. It also outlines submission guidelines and additional information regarding the sample `package.json` file.",
                "content": "## Continuous Integration\n\nSimilar to `lab04_encanto`, we want our pipeline to run `npm install` and `npm test`. However, the challenge this time is to also add a linting element with the `npm run lint` command.\n\nOpen [.gitlab-ci.yml](.gitlab-ci.yml) and update your pipeline accordingly!\n\nYou are recommended to do this for future labs and use the pipeline as a quick sanity check since it is not uncommon to forget about linting our code before submission :).\n\n# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n\n# Additional Information\n\n## Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary><br/>\n\n**Note**: \n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n\n```json\n{\n  \"name\": \"lab04_shapes\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/main.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"tsc\": \"tsc --noEmit\",\n    \"ts-node\": \"ts-node\",\n    \"lint\": \"eslint src/**.ts\",\n    \"lint-fix\": \"eslint --fix src/**.ts\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^27.5.1\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.23.0\",\n    \"@typescript-eslint/parser\": \"^5.23.0\",\n    \"eslint\": \"^8.15.0\",\n    \"eslint-plugin-jest\": \"^26.2.1\",\n    \"jest\": \"^28.1.0\",\n    \"ts-jest\": \"^28.0.2\",\n    \"ts-node\": \"^10.7.0\",\n    \"typescript\": \"^4.6.4\"\n  }\n}\n```\n\n</details>\n"
            },
            {
                "summary": "From assessments -> lab04_shapes -> README.md: This chunk provides guidance on resolving IDE linting issues that may arise when using tools like VSCode, specifically addressing potential discrepancies between IDE linting and command-line linting results. It also includes additional miscellaneous information regarding files that can be ignored during the lab, enhancing the overall understanding of project setup and maintenance.",
                "content": "## IDE Linting\n\n<details>\n\n<summary>Test file issues</summary><br/>\n\nIf your IDE, e.g. VSCode, displays linting issues in the test file for `describe`, `test`, `expect`, etc, but the command\n```shell\n$ npm run lint\n```\n\nbehaves as expected, try creating an empty file called `jsconfig.json` in\nthe root folder of this repository. One way would be:\n```shell\n$ touch jsconfig.json\n```\n\n</details>\n\n## Miscellaneous\n\n<details>\n\n<summary>Other information that is not core to the course</summary><br/>\n\n**The files below can be safely ignored - we will always provide them for you if necessary**:\n\nIn addition to the new files introduced from lab04_encanto:\n- [.eslintrc.json](.eslintrc.json) - COMP1531 linting rules. Fun fact, comments are not possible in standard JSON files, but ESLint allows it.\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_shapes\\src\\main.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab04_shapes -> src -> main.ts: This chunk of code demonstrates the usage of the `drawShape` function from the `shapes` module to generate and log various geometric shapes, including solid and hollow squares and triangles of size 5, showcasing different configurations for visual representation.",
                "content": "import { drawShape } from './shapes';\n\nconsole.log('Solid Square of Size 5');\nconsole.log(drawShape(4, 5, true));\nconsole.log();\n\nconsole.log('Solid Triangle of Size 5');\nconsole.log(drawShape(3, 5, true));\nconsole.log();\n\nconsole.log('Hollow Square of Size 5');\nconsole.log(drawShape(4, 5, false));\nconsole.log();\n\nconsole.log('Hollow Triangle of Size 5');\nconsole.log(drawShape(3, 5, false));\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_shapes\\src\\shapes.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab04_shapes -> src -> shapes.test.ts: The chunk contains a set of test data used for unit testing the `drawShape` function, which generates solid and hollow shapes (squares and triangles) of varying sizes. This data is utilized in the subsequent test cases to validate the functionality of the shape drawing implementation.",
                "content": "import { drawShape } from './shapes';\n\nconst testData = [\n  {\n    size: 0,\n    solidSquare: '',\n    solidTriangle: '',\n    hollowSquare: '',\n    hollowTriangle: '',\n  },\n  {\n    size: 1,\n    solidSquare: '*',\n    solidTriangle: '*',\n    hollowSquare: '*',\n    hollowTriangle: '*',\n  },\n  {\n    size: 2,\n    solidSquare: '* *\\n* *',\n    solidTriangle: '*\\n* *',\n    hollowSquare: '* *\\n* *',\n    hollowTriangle: '*\\n* *',\n  },\n  {\n    size: 3,\n    solidSquare: '* * *\\n* * *\\n* * *',\n    solidTriangle: '*\\n* *\\n* * *',\n    hollowSquare: '* * *\\n*   *\\n* * *',\n    hollowTriangle: '*\\n* *\\n* * *',\n  },\n  {\n    size: 4,\n    solidSquare: '* * * *\\n* * * *\\n* * * *\\n* * * *',\n    solidTriangle: '*\\n* *\\n* * *\\n* * * *',\n    hollowSquare: '* * * *\\n*     *\\n*     *\\n* * * *',\n    hollowTriangle: '*\\n* *\\n*   *\\n* * * *',\n  },\n  {\n    size: 5,\n    solidSquare: '* * * * *\\n* * * * *\\n* * * * *\\n* * * * *\\n* * * * *',\n    solidTriangle: '*\\n* *\\n* * *\\n* * * *\\n* * * * *',\n    hollowSquare: '* * * * *\\n*       *\\n*       *\\n*       *\\n* * * * *',\n    hollowTriangle: '*\\n* *\\n*   *\\n*     *\\n* * * * *',\n  },\n];\n\n"
            },
            {
                "summary": "From assessments -> lab04_shapes -> src -> shapes.test.ts: The chunk is part of a test suite that validates error handling in the `drawShape` function, specifically checking for invalid shape types and negative size inputs.",
                "content": "\n\ndescribe('Error', () => {\n  test('invalid shape', () => {\n    expect(drawShape(5, 5, true)).toEqual('Invalid Input');\n  });\n\n  test('negative size', () => {\n    expect(drawShape(3, -1, true)).toEqual('Invalid Input');\n  });\n});\n\n"
            },
            {
                "summary": "From assessments -> lab04_shapes -> src -> shapes.test.ts: The chunk is part of a test suite that verifies the functionality of the `drawShape` function, specifically focusing on generating solid shapes (squares and triangles) based on given sizes. It follows error handling and tests for hollow shapes in the overall document.",
                "content": "\n\ndescribe('isSolid', () => {\n  describe('square', () => {\n    test.each(testData)('of size $size', ({ size, solidSquare }) => {\n      expect(drawShape(4, size, true)).toEqual(solidSquare);\n    });\n  });\n  describe('triangle', () => {\n    test.each(testData)('of size $size', ({ size, solidTriangle }) => {\n      expect(drawShape(3 , size, true)).toEqual(solidTriangle);\n    });\n  });\n});\n\n"
            },
            {
                "summary": "From assessments -> lab04_shapes -> src -> shapes.test.ts: This chunk is part of a test suite that evaluates the functionality of drawing hollow shapes, specifically squares and triangles, using the `drawShape` function. It follows tests for solid shapes and includes various test cases based on predefined test data.",
                "content": "\n\ndescribe('Hollow', () => {\n  describe('square', () => {\n    test.each(testData)('of size $size', ({ size, hollowSquare }) => {\n      expect(drawShape(4, size, false)).toEqual(hollowSquare);\n    });\n  });\n  describe('triangle', () => {\n    test.each(testData)('of size $size', ({ size, hollowTriangle }) => {\n      expect(drawShape(3, size, false)).toEqual(hollowTriangle);\n    });\n  });\n});"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab04_shapes\\src\\shapes.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab04_shapes -> src -> shapes.ts: The chunk contains the implementation of the `drawShape` function, which generates string representations of geometric shapes (triangles and squares) based on the number of sides, size, and whether the shape is solid or hollow. It includes error handling for invalid inputs and contains several code quality issues that need to be addressed for compliance with ESLint standards.",
                "content": "export function drawShape (sides: number, size: number, isSolid: boolean) {\n    // TODO: Fix the horrendous code below to be eslint-compliant.\n    // FIXME: Remove all TODOs and FIXMEs and you are done!\n    const TrIaNgLe_sides = 3;\n    const valid_sidess = [\n        TrIaNgLe_sides,\n        4\n    ]\n\n    if (!valid_sidess.includes(sides)) return 'Invalid Input'\n    if (size < 0) return 'Invalid Input';\n\n    let result = '' ;\n    if (sides === 4 && isSolid) {\n        for (let row = 0; row < size; row++) {\n            let line = ''\n            for (let col = 0; col < size; col++) {\n                line += '* '\n            }\n            result += line.trim() + '\\n'\n        }\n    } else if (sides === TrIaNgLe_sides && isSolid === true) {\n        for (let row = 0; row < size; row++) {  \n            let line = '';          \n            for (let col = 0; col <= row; col++) {\n                line += '* ';     \n            }\n            result += line.trim() + \"\\n\";  \n        }\n    } else if (sides == 4 && !isSolid) {\n        for (let row = 0; row < size; row++) {\n            let line = ``;\n            for (let col = 0; col < size; col++) {\n                if (row === 0 || row === size - 1 || col === 0 || col === size - 1) {\n                    line += '* '\n                } else {\n                    line += '  ';\n                }\n            }\n            let undefinedVariable;\n            console.log(undefinedVariable);\n            result += line.trim() + '\\n';\n        }\n    } else if (sides == 3 && isSolid === false) {\n        console.log(\"I'm a debugging print statement, remove me >:C!\");\n        for (let row = 0; row < size; row++) {\n            let line = '';\n            for (let col = 0; col <= row; col++) {\n                if (row === 0 || row === size - 1 || col === 0 || col === row) {\n                    line += '* ';\n                } else {\n                    line += '  ';\n                }\n            }\n            result += `${line}`.trim() + '\\n';\n        }\n    } else {\n        const importantVariable = 'Why are we still here, just to suffer';\n        result += 'Invalid Input';\n    }\n    // The line below is indented with a tab character (\\t), not 4 spaces\n    return result.trim();\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\.eslintrc.json",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> .eslintrc.json: The chunk represents the configuration settings for ESLint, specifically tailored for a TypeScript project, including parser options, environment settings, global variables, and a comprehensive set of linting rules to enforce code quality and consistency.",
                "content": "{\n  \"ignorePatterns\": [\"build\"],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\n    \"@typescript-eslint\",\n    \"jest\"\n  ],\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2022,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n  \"env\": {\n    \"es2021\": true,\n    \"node\": true,\n    \"jest\": true\n  },\n  \"globals\": {\n    \"document\": \"readonly\",\n    \"navigator\": \"readonly\",\n    \"window\": \"readonly\"\n  },\n  \"rules\": {\n    \"no-unused-vars\": \"off\",\n    \"@typescript-eslint/no-unused-vars\": [\"error\", {\n      \"args\": \"none\",\n      \"caughtErrors\": \"none\",\n      \"ignoreRestSiblings\": true,\n      \"vars\": \"all\"\n    }],\n    \n    // Everything below here is standard 1531\n\n    \"@typescript-eslint/no-var-requires\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n\n    \"no-var\": \"warn\",\n    \"object-shorthand\": 0, // [\"warn\", \"properties\"],\n\n    \"accessor-pairs\": [\"error\", { \"setWithoutGet\": true, \"enforceForClassMembers\": true }],\n    \"array-bracket-spacing\": [\"error\", \"never\"],\n    \"array-callback-return\": [\"error\", {\n      \"allowImplicit\": false,\n      \"checkForEach\": false\n    }],\n    \"arrow-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"block-spacing\": [\"error\", \"always\"],\n    \"brace-style\": [\"error\", \"1tbs\", { \"allowSingleLine\": true }],\n    \"camelcase\": [\"error\", {\n      \"allow\": [\"^UNSAFE_\"],\n      \"properties\": \"never\",\n      \"ignoreGlobals\": true,\n      \"ignoreDestructuring\": true\n    }],\n    \"comma-dangle\": [\"error\", {\n      \"arrays\": \"only-multiline\",\n      \"objects\": \"only-multiline\",\n      \"imports\": \"only-multiline\",\n      \"exports\": \"only-multiline\",\n      \"functions\": \"never\"\n    }],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"comma-style\": [\"error\", \"last\"],\n    \"computed-property-spacing\": [\"error\", \"never\", { \"enforceForClassMembers\": true }],\n    \"constructor-super\": \"error\",\n    \"curly\": [\"error\", \"multi-line\"],\n    \"default-case-last\": \"error\",\n    \"dot-location\": [\"error\", \"property\"],\n    \"dot-notation\": [\"error\", { \"allowKeywords\": true }],\n    \"eol-last\": \"error\",\n    \"eqeqeq\": [\"error\", \"always\", { \"null\": \"ignore\" }],\n    \"func-call-spacing\": [\"error\", \"never\"],\n    \"generator-star-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"indent\": [\"error\", 2, {\n      \"SwitchCase\": 1,\n      \"VariableDeclarator\": 1,\n      \"outerIIFEBody\": 1,\n      \"MemberExpression\": 1,\n      \"FunctionDeclaration\": { \"parameters\": 1, \"body\": 1 },\n      \"FunctionExpression\": { \"parameters\": 1, \"body\": 1 },\n      \"CallExpression\": { \"arguments\": 1 },\n      \"ArrayExpression\": 1,\n      \"ObjectExpression\": 1,\n      \"ImportDeclaration\": 1,\n      \"flatTernaryExpressions\": false,\n      \"ignoreComments\": false,\n      \"ignoredNodes\": [\"TemplateLiteral *\", \"JSXElement\", \"JSXElement > *\", \"JSXAttribute\", \"JSXIdentifier\", \"JSXNamespacedName\", \"JSXMemberExpression\", \"JSXSpreadAttribute\", \"JSXExpressionContainer\", \"JSXOpeningElement\", \"JSXClosingElement\", \"JSXFragment\", \"JSXOpeningFragment\", \"JSXClosingFragment\", \"JSXText\", \"JSXEmptyExpression\", \"JSXSpreadChild\"],\n      \"offsetTernaryExpressions\": true\n    }],\n    \"key-spacing\": [\"error\", { \"beforeColon\": false, \"afterColon\": true }],\n    \"keyword-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"lines-between-class-members\": [\"error\", \"always\", { \"exceptAfterSingleLine\": true }],\n    \"multiline-ternary\": [\"error\", \"always-multiline\"],\n    \"new-cap\": [\"error\", { \"newIsCap\": true, \"capIsNew\": false, \"properties\": true }],\n    \"new-parens\": \"error\",\n    \"no-array-constructor\": \"error\",\n    \"no-async-promise-executor\": \"error\",\n    \"no-caller\": \"error\",\n    \"no-case-declarations\": \"error\",\n    \"no-class-assign\": \"error\",\n    \"no-compare-neg-zero\": \"error\",\n    \"no-cond-assign\": \"error\",\n    \"no-const-assign\": \"error\",\n    \"no-constant-condition\": [\"error\", { \"checkLoops\": false }],\n    \"no-control-regex\": \"error\",\n    \"no-debugger\": \"error\",\n    \"no-delete-var\": \"error\",\n    \"no-dupe-args\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-duplicate-case\": \"error\",\n    \"no-useless-backreference\": \"error\",\n    \"no-empty\": [\"error\", { \"allowEmptyCatch\": true }],\n    \"no-empty-character-class\": \"error\",\n    \"no-empty-pattern\": \"error\",\n    \"no-eval\": \"error\",\n    \"no-ex-assign\": \"error\",\n    \"no-extend-native\": \"error\",\n    \"no-extra-bind\": \"error\",\n    \"no-extra-boolean-cast\": \"error\",\n    \"no-extra-parens\": [\"error\", \"functions\"],\n    \"no-fallthrough\": \"error\",\n    \"no-floating-decimal\": \"error\",\n    \"no-func-assign\": \"error\",\n    \"no-global-assign\": \"error\",\n    \"no-implied-eval\": \"error\",\n    \"no-import-assign\": \"error\",\n    \"no-invalid-regexp\": \"error\",\n    \"no-irregular-whitespace\": \"error\",\n    \"no-iterator\": \"error\",\n    \"no-labels\": [\"error\", { \"allowLoop\": false, \"allowSwitch\": false }],\n    \"no-lone-blocks\": \"error\",\n    \"no-loss-of-precision\": \"error\",\n    \"no-misleading-character-class\": \"error\",\n    \"no-prototype-builtins\": \"error\",\n    \"no-useless-catch\": \"error\",\n    \"no-mixed-operators\": [\"error\", {\n      \"groups\": [\n        [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n        [\"&&\", \"||\"],\n        [\"in\", \"instanceof\"]\n      ],\n      \"allowSamePrecedence\": true\n    }],\n    \"no-mixed-spaces-and-tabs\": \"error\",\n    \"no-multi-spaces\": \"error\",\n    \"no-multi-str\": \"error\",\n    \"no-multiple-empty-lines\": [\"error\", { \"max\": 1, \"maxEOF\": 0 }],\n    \"no-new\": \"error\",\n    \"no-new-func\": \"error\",\n    \"no-new-object\": \"error\",\n    \"no-new-symbol\": \"error\",\n    \"no-new-wrappers\": \"error\",\n    \"no-obj-calls\": \"error\",\n    \"no-octal\": \"error\",\n    \"no-octal-escape\": \"error\",\n    \"no-proto\": \"error\",\n    \"no-redeclare\": [\"error\", { \"builtinGlobals\": false }],\n    \"no-regex-spaces\": \"error\",\n    \"no-return-assign\": [\"error\", \"except-parens\"],\n    \"no-self-assign\": [\"error\", { \"props\": true }],\n    \"no-self-compare\": \"error\",\n    \"no-sequences\": \"error\",\n    \"no-shadow-restricted-names\": \"error\",\n    \"no-sparse-arrays\": \"error\",\n    \"no-tabs\": \"error\",\n    \"no-template-curly-in-string\": \"error\",\n    \"no-this-before-super\": \"error\",\n    \"no-throw-literal\": \"error\",\n    \"no-trailing-spaces\": \"error\",\n    \"no-undef\": \"error\",\n    \"no-undef-init\": \"error\",\n    \"no-unexpected-multiline\": \"error\",\n    \"no-unmodified-loop-condition\": \"error\",\n    \"no-unneeded-ternary\": [\"error\", { \"defaultAssignment\": false }],\n    \"no-unreachable\": \"error\",\n    \"no-unreachable-loop\": \"error\",\n    \"no-unsafe-finally\": \"error\",\n    \"no-unsafe-negation\": \"error\",\n    \"no-unused-expressions\": [\"error\", {\n      \"allowShortCircuit\": true,\n      \"allowTernary\": true,\n      \"allowTaggedTemplates\": true\n    }],\n    \n    \"no-use-before-define\": [\"error\", { \"functions\": false, \"classes\": false, \"variables\": false }],\n    \"no-useless-call\": \"error\",\n    \"no-useless-computed-key\": \"error\",\n    \"no-useless-constructor\": \"error\",\n    \"no-useless-escape\": \"error\",\n    \"no-useless-rename\": \"error\",\n    \"no-useless-return\": \"error\",\n    \"no-void\": \"error\",\n    \"no-whitespace-before-property\": \"error\",\n    \"no-with\": \"error\",\n    \"object-curly-newline\": [\"error\", { \"multiline\": true, \"consistent\": true }],\n    \"object-curly-spacing\": [\"error\", \"always\"],\n    \"object-property-newline\": [\"error\", { \"allowMultiplePropertiesPerLine\": true }],\n    \"one-var\": [\"error\", { \"initialized\": \"never\" }],\n    \"operator-linebreak\": [\"error\", \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\", \"|>\": \"before\" } }],\n    \"padded-blocks\": [\"error\", { \"blocks\": \"never\", \"switches\": \"never\", \"classes\": \"never\" }],\n    \"prefer-const\": [\"error\", {\"destructuring\": \"all\"}],\n    \"prefer-promise-reject-errors\": \"error\",\n    \"prefer-regex-literals\": [\"error\", { \"disallowRedundantWrapping\": true }],\n    \"quote-props\": [\"error\", \"as-needed\"],\n    \"quotes\": [\"error\", \"single\", { \"avoidEscape\": true, \"allowTemplateLiterals\": false }],\n    \"rest-spread-spacing\": [\"error\", \"never\"],\n    \"semi\": [2, \"always\"],\n    \"semi-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"space-before-blocks\": [\"error\", \"always\"],\n    \"space-before-function-paren\": [\"off\"],\n    \"space-in-parens\": [\"error\", \"never\"],\n    \"space-infix-ops\": \"error\",\n    \"space-unary-ops\": [\"error\", { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [\"error\", \"always\", {\n      \"line\": { \"markers\": [\"*package\", \"!\", \"/\", \",\", \"=\"] },\n      \"block\": { \"balanced\": true, \"markers\": [\"*package\", \"!\", \",\", \":\", \"::\", \"flow-include\"], \"exceptions\": [\"*\"] }\n    }],\n    \"symbol-description\": \"error\",\n    \"template-curly-spacing\": [\"error\", \"never\"],\n    \"template-tag-spacing\": [\"error\", \"never\"],\n    \"unicode-bom\": [\"error\", \"never\"],\n    \"use-isnan\": [\"error\", {\n      \"enforceForSwitchCase\": true,\n      \"enforceForIndexOf\": true\n    }],\n    \"valid-typeof\": [\"error\", { \"requireStringLiterals\": true }],\n    \"wrap-iife\": [\"error\", \"any\", { \"functionPrototypeMethods\": true }],\n    \"yield-star-spacing\": [\"error\", \"both\"],\n    \"yoda\": [\"error\", \"never\"]\n  }\n}"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\.gitlab-ci.yml",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> .gitlab-ci.yml: This chunk is a configuration snippet for a CI/CD pipeline using Docker, specifically for automating testing processes in a project. It outlines the stages and scripts to be executed, including instructions for setting up the environment and running tests, while also indicating that further enhancements like linting are planned.",
                "content": "# https://hub.docker.com/repository/docker/comp1531/automarking/general\nimage: comp1531/automarking:latest\n\nstages:\n  - checks\n\ntesting:\n  stage: checks\n  script:\n    - echo \"Uncomment script below once you have updated your package.json\"\n    # - npm install\n    # - SERVER_LOG=$(mktemp)\n\n    # # Start server in background and capture output in temp file\n    # - npm start &> $SERVER_LOG & pid=$!\n    # - sleep 2\n    # - ps -o pid | egrep -q \"^\\s*${pid}$\" || (cat $SERVER_LOG && exit 1)\n\n    # # Run test then kill server\n    # - npm test || (cat $SERVER_LOG && exit 1)\n    # - sleep 1\n    # - kill -SIGINT %1\n\n    # - cat $SERVER_LOG\n  only:\n    - master\n\n# TODO: add linting\n\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> package.json: The chunk represents the complete package.json configuration for the project \"lab05_checkins,\" detailing its metadata, scripts, dependencies, and development dependencies, which are essential for managing the project's TypeScript environment and testing setup.",
                "content": "{\n  \"name\": \"lab05_checkins\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/server.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"ts-node\": \"ts-node\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.12\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.20.0\",\n    \"@typescript-eslint/parser\": \"^6.20.0\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-plugin-jest\": \"^27.6.3\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"ts-node-dev\": \"^2.0.0\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"dependencies\": {\n    \"ts-node\": \"^10.9.2\"\n  },\n  \"engines\": {\n    \"node\": \"<=20\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> README.md: This chunk provides an introduction to the lab assignment, detailing the estimated completion time, overall difficulty, and the necessary steps to set up the Express framework for a RESTful Web API project. It outlines the installation process for required packages and scripts in the `package.json` file, serving as a foundational guide for students to begin their implementation of the backend service.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-2%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-yes-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-yes-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 5 Friday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n# Background\n\n## Rationale\n\nWith over 220 hospitals, NSW Health needs a way to monitor\ndaily admissions at each hospital for further analysis and future planning.\n\nBeing a recent recruit of the specialised Digitalisation team, you have been tasked with the transition of an existing\n[MVP](https://www.atlassian.com/agile/product-management/minimum-viable-product) backend service into a\n[RESTful Web API](https://aws.amazon.com/what-is/restful-api).\nYour co-workers have already completed the swagger documentation and HTTP tests before you were recruited -\nit is now up to you to push this project across the finish line!\n\n## Getting Started\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine.\n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab.\n\nBefore starting, **please make sure that you've seen last week's lectures (week 4)**!\n\nYou may also find the following projects helpful:\n- tutorial 5 express exercise, or if this is before your tutorial:\n- Week 5 Server Example\n    - https://nw-syd-gitlab.cseunsw.tech/COMP1531/24T2/week5-server-example\n    - we recommend reading through the sample implementation and complete some of the \"OPTIONAL ACTIVITY\" in the two test files.\n\n## Express Installation\n\n*[Express](https://expressjs.com/) is a fast, unopinionated minimalist web framework for Node.js*. To get started,\n\n1. Open [package.json](package.json) and look at existing packages in `\"dependencies\"` and `\"devDependencies\"`. Install them with:\n    ```shell\n    $ npm install\n    ```\n\n1. Install [express](https://www.npmjs.com/package/express), along with the middlewares\n    - [cors](https://www.npmjs.com/package/cors) to allow access from other domains (needed for frontend to connect)\n    - [morgan](https://www.npmjs.com/package/morgan) (OPTIONAL) to log (print to terminal) incoming HTTP requests.\n    ```shell\n    $ npm install express cors morgan\n    ```\n\n1. Install the type definitions for the dependencies above as development dependencies:\n    ```shell\n    $ npm install --save-dev @types/express @types/cors @types/morgan\n    ```\n\n1. Finally, we will install\n    - [ts-node-dev](https://www.npmjs.com/package/ts-node-dev) (OPTIONAL, but HIGHLY RECOMMENDED)\n        - to run our server in debug mode\n        - automatically restart the server when changes are made to the code\n    - [sync-request-curl](https://www.npmjs.com/package/sync-request-curl)\n        - for testing purposes\n        - we will use this to send HTTP requests to our server\n        - please **read the documentation for this package** - if it bugs out on npm, you can view the docs on [Github](https://github.com/nktnet1/sync-request-curl) instead\n    ```shell\n    $ npm install --save-dev ts-node-dev sync-request-curl\n    ```\n\n1. Open your [package.json](package.json) and add the following scripts:\n    ```json\n    \"scripts\": {\n        \"test\": \"jest\",\n        \"ts-node\": \"ts-node\",\n        \"ts-node-dev\": \"ts-node-dev\",\n        \"tsc\": \"tsc --noEmit\",\n        \"lint\": \"eslint '**/*.ts'\"\n        // Any other scripts you want here\n    }\n    ```\n\n1. Tip: for convenience, you may also add `ts-node` in a `start` script to run [src/server.ts](src/server.ts):\n    ```json\n    \"start\": \"ts-node src/server.ts\",\n    \"start-dev\": \"ts-node-dev src/server.ts\",\n    ```\n    Similar to `test`, `start` is a special value in `npm`. Thus, either of the below will work:\n    ```shell\n    $ npm run start\n    $ npm start\n    ```\n\n1. To check that you have completed the steps correctly, compare your [package.json](package.json) with our sample package.json in the [Additional Information](#additional-information) section.\n\n1. Use `git` to `add`, `commit` and `push` your [package.json](package.json) and [package-lock.json](package-lock.json).\n\n1. (Optional) Update [.gitlab-ci.yml](.gitlab-ci.yml) with testing and linting.\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> README.md: The chunk is situated within the \"Task\" section of the document, which outlines the requirements for testing and implementing a RESTful Web API for monitoring hospital admissions. It provides guidance on writing HTTP tests, understanding the API interface through the Swagger documentation, and transforming the existing checkins service into a web server using Express.",
                "content": "## Interface\n\nSee [swagger.yaml](swagger.yaml).\n\nNote that in addition to the \"Example Value\" tab that shows a valid sample/stub return value, you can also view the schema of the response.\nThis will often contains further descriptions or constraints.\n\nFor example, take a look at the `checkoutTime` for `GET` `/admissions/list`:\n![Swagger Tips](assets/swagger-tips.png)\n\n# Task\n\n## Testing\n\nSee [src/root.test.ts](src/root.test.ts) and [src/echo.test.ts](src/echo.test.ts) for examples of how you can write HTTP tests with [sync-request-curl](https://www.npmjs.com/package/sync-request-curl). **Make sure to remove the redundant tests and uncomment the correct ones**.\n\nYou can create as many test files or directories as you like. The quality of your tests will be assessed, so aim to cover as many different cases as possible.\n\nThe file [src/checkins.test.ts](src/checkins.test.ts) has been populated with a few tests for you to help get you started. Complete all the `test.todo`, and add any further tests you deem necessary after reading the [swagger.yaml](swagger.yaml) file.\n\nYou should **only be testing the HTTP layer**. This is done by sending requests to the server and checking the responses. The idea of \"functions\" or \"data store\" are considered implementation details and should not be imported or tested directly in any test file (this is because the level of abstraction has shifted to HTTP, so our black-box tests can only operate at this level). Your test should work for another student's implementation of the server.\n\nTo test your code, you will need to use two different terminals:\n\n<table>\n    <tr>\n        <th><b>Terminal 1 - Server</b></th>\n        <th><b>Terminal 2 - Test</b></th>\n    </tr>\n    <tr>\n        <td>\n            <code>$ npm run ts-node src/server.ts</code>\n        </td>\n        <td>\n            <code>$ npm test</code>\n        </td>\n    </tr>\n</table>\n\n## Implementation\n\nThe core logic of the application has already been implemented for you in [src/checkins.ts](src/checkins.ts).\n\nAfter completing the test suite in the previous section, your task is to\n1. read through the file [swagger.yaml](swagger.yaml) to understand the API requirements and input/output of each route\n1. read through the file [src/checkins.ts](src/checkins.ts) to understand the existing functions and its input/output\n1. transform the checkins service into a backend web server using [express](https://www.npmjs.com/package/express) **by modifying the file [src/server.ts](src/server.ts)**.\n\nNote:\n\n- When reading from the JSON body (i.e. with `req.body`), the types of all properties will be correct and does not require type casting.\n\n- When reading from the URL params, (i.e. with `req.params`), the types will need to be explicitly casted, e.g. for `eventid` as a number:\n    ```ts\n    const eventId = parseInt(req.params.eventid as string);\n    ```\n\n- When reading from the query string (i.e. with `req.query`), the types will need to be explicitly casted, e.g. for `minAge` as a number:\n    ```ts\n    const minAge = parseInt(req.query.minAge);\n    ```\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> README.md: This chunk provides instructions on integrating Swagger API documentation into the Express server, detailing the installation of necessary dependencies, code modifications in the server file, and tips for using API clients effectively. It also includes common troubleshooting tips for errors encountered during server operation and testing.",
                "content": "## Swagger API\n\nIf you wish to use the \"Try it out\" button to send requests to your server directly, click on the dropdown to open the instructions below.\n\n<details close>\n\n<summary>Instructions for adding dynamic swagger route</summary>\n\n1. Install the necessary dependencies\n\n    ```shell\n    $ npm i yamljs swagger-ui-express\n    $ npm i -D @types/yamljs @types/swagger-ui-express\n    ```\n\n1. Add the following imports at the top of [src/server.ts](src/server.ts):\n    ```typescript\n    import YAML from 'yamljs';\n    import swaggerUi from 'swagger-ui-express';\n    ```\n\n1. Add the following lines directly below the definition of your `app` (i.e. below the line `const app = express()`) in [src/server.ts](src/server.ts):\n\n    ```typescript\n    const swaggerDocument = YAML.load('./swagger.yaml');\n    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n    ```\n\n1. Access your server from the browser and follow the `/api-docs` path. For example, assuming your server is running on port `49152`, this would be:\n\n    ```\n    http://127.0.0.1:49152/api-docs/\n    ```\n\n</details>\n\n## API Clients\n\nIf you are using an API Client such as ARC, Insomnia or POSTMAN, be mindful that to send a valid body for PUT/POST requests, you should:\n1. Check that the `\"Body content type\"` is set as `\"application/json\"`\n1. Your `JSON` string uses double quotes (`\"\"`) for both keys and values\n\nOn VLAB (and **not** VSCode SSH-FS, which isn't supported),\n\n1. ARC can be run with:\n    ```shell\n    $ 1531 arc\n    ```\n1. Insomnia can be run with\n    ```shell\n    $ 1531 insomnia\n    ```\n1. Postman can be run with\n    ```shell\n    $ 1531 postman\n    ```\n\nIf you are working locally and wish to use these tools, you are advised to look up the instructions specific to your environment.\n\n## Tips, Hints and Common Mistakes\n\n1. If you see the error `ECONNREFUSED` in your tests, this could mean two things:\n    1. The tests are not sending requests to a valid server. One common mistake is forgetting to add a leading slash, e.g. `echo` instead of the correct `/echo`. If this is the case, Jest would also be showing that port `80` is used instead of the value in your [config.json](config.json), i.e. `\"connect ECONNREFUSED 127.0.0.1:80\"`\n    1. Your server has not been started successfully. Check the output of the terminal running your server to see why.\n\n1. When starting your server, if you see an error message equivalent to `Error: listen EADDRINUSE: address already in use :::49152`, it is likely that:\n    1. You are working on a CSE machine (e.g. through VLAB) and another student is using this port\n    1. You have another terminal running a server on the same port (e.g. 49152)\n\n    Try changing the port number in the file `config.json` to a different value and try again.\n\n1. If your server encounters the error `ERR_HTTP_HEADERS_SENT`, this could mean that you are using `res.json()` more than once in your `server.ts`.\n    - Note that, unlike `return`, this does not terminate the route and it is not possible to send a response twice for a single request.\n    - This is why we recommend you abstract your code into a function in another file (which uses `return`), then simply use `res.json()` once in `server.ts` and treat the routes as \"wrappers\". Another workaround is:\n        <details close>\n        <summary>click to view</summary>\n\n        ```js\n        if (somethingCondition) {\n            res.status(someStatus).json({});\n            return;\n        }\n        res.json();\n        ```\n        or more simply,\n        ```js\n        if (somethingCondition) {\n            return res.status(someStatus).json({});\n        }\n        res.json();\n        ```\n\n        </details>\n\n1. If you receive an error with the code `404`, it means that the route you're requesting in your test cannot be found on your server. This is likely due to:\n    - You not having implemented the route\n    - There is a typo in either your test or server, e.g. `/admissions/list` in one and, incorrectly, `/admission/list` in the other.\n    - You are using `ts-node` (instead of `ts-node-dev` which automatically reloads on change) to start your server and have forgotten to manually restart the server to load the new changes.\n    - You've forgotten a leading slash (`/`), e.g. you have `admissions/list` instead of `/admissions/list`\n\n1. If you receive an error with the code `500`, this means that your server has crashed while handling a request. The best place to look for why this occurred would be the server log (the output of the terminal that you're running the server on)\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> README.md: The chunk pertains to the \"Submission\" section of the document, which outlines the steps for submitting the completed lab work, including using Git for version control and managing project dependencies on CSE machines. It also includes a sample `package.json` file for reference.",
                "content": "# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n\n# Additional Information\n\n## Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary><br/>\n\n**Note**:\n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n\n```json\n{\n  \"name\": \"lab05_checkins\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/server.ts\",\n  \"scripts\": {\n    \"start\": \"ts-node src/server.ts\",\n    \"start-dev\": \"ts-node-dev src/server.ts\",\n    \"test\": \"jest\",\n    \"ts-node\": \"ts-node\",\n    \"tsc\": \"tsc --noEmit\",\n    \"lint\": \"eslint src/**.ts\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/cors\": \"^2.8.12\",\n    \"@types/express\": \"^4.17.13\",\n    \"@types/jest\": \"^27.5.1\",\n    \"@types/morgan\": \"^1.9.3\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.23.0\",\n    \"@typescript-eslint/parser\": \"^5.23.0\",\n    \"eslint\": \"^8.15.0\",\n    \"eslint-plugin-jest\": \"^26.2.1\",\n    \"jest\": \"^28.1.0\",\n    \"ts-node-dev\": \"^3.0.0\",\n    \"sync-request-curl\": \"^3.0.0\",\n    \"ts-jest\": \"^28.0.2\",\n    \"typescript\": \"^4.6.4\"\n  },\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.18.1\",\n    \"morgan\": \"^1.10.0\",\n    \"ts-node\": \"^10.7.0\"\n  }\n}\n```\n\n</details>\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> README.md: The \"Miscellaneous\" section provides additional information and insights that are not central to the main course content, specifically addressing differences in the Jest configuration file and its implications for test execution.",
                "content": "## Miscellaneous\n\n<details>\n\n<summary>Other information that is not core to the course</summary><br/>\n\n1. You may have noticed that [jest.config.js](jest.config.js) is slightly different from lab04_encanto - it has the added key `maxWorkers: 1`.\n    - This is so that test files run one at a time (i.e. synchronously, as opposed to asynchronously), otherwise we will run into issues with sync-request.\n    - Async is beyond the scope of COMP1531 :).\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\swagger.yaml",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> swagger.yaml: The chunk contains the OpenAPI specification header for the Checkins Server API, including metadata such as the API title, description, version, server configuration, and tags that categorize the available routes. This section serves as an introduction to the API, outlining its purpose and structure before detailing the specific endpoints and their functionalities.",
                "content": "openapi: 3.0.3\ninfo:\n  title: Checkins Server API\n  description: |\n    API for managing patient check-in admissions\n\n    Please examine the example return values carefully when writing your tests.\n\n    Moreover, next to the \"Example Value\" tab is the \"Schema\" tab, which will explain each attribute/property of an object in further details.\n\n  version: 1.0.0\nservers:\n  - url: \"{protocol}://{host}:{port}\"\n    variables:\n      protocol:\n        default: http\n      host:\n        default: '127.0.0.1'\n      port:\n        default: '49152'\n\ntags:\n  - name: Sample\n    description: These are sample routes that we've already implemented for you!\n  - name: Admissions\n    description: Operation on hospital checkin admissions\n  - name: Other\n    description: Routes that don't fit in any of the categories above\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> swagger.yaml: This chunk contains the API path definitions for the root route and the echo route within the Checkins Server API, specifically under the \"Sample\" tag. It outlines the functionality for displaying a welcome message and echoing back a user-provided message, including their respective request parameters and response schemas.",
                "content": "\n\npaths:\n  /:\n    get:\n      tags:\n        - Sample\n      summary: Displays a message\n      description: This is the root route that has already been implemented for you. It returns a welcome message.\n      responses:\n        '200':\n          description: \"Returns a welcome message\"\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - message\n                properties:\n                  message:\n                    type: string\n                    example: \"Welcome to Lab05 Checkins Server's root URL!\"\n\n  /echo/echo:\n    get:\n      tags:\n        - Sample\n      summary: Echo back a message\n      description: |\n        This is a sample echo route that has already been implemented for you.\n        It returns a same message that was given in the query string, although an error is returned if you try to echo \"echo\".\n      parameters:\n        - name: message\n          in: query\n          required: true\n          schema:\n            type: string\n            example: \"helloworld!\"\n\n      responses:\n        '200':\n          description: \"Echos the same mssage back\"\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - message\n                properties:\n                  message:\n                    type: string\n                    example: \"Helloworld!\"\n        '400':\n          description: |\n            If any of the following is true:\n            - Attempting to echo the message \"echo\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"Cannot echo 'echo'!\"\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> swagger.yaml: The chunk contains API endpoints related to managing patient admissions, specifically focusing on clearing all admissions from the data store and checking in a new patient with their details. This section falls under the \"Admissions\" category and is part of the overall API for managing patient check-in admissions.",
                "content": "\n\n  /clear:\n    delete:\n      tags:\n        - Other\n      summary: \"Clear all admissions. Difficulty: \u2b50\"\n      description: Remove all checkin admissions from the data store.\n      responses:\n        '200':\n          description: Admissions cleared successfully\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /admissions/checkin:\n    post:\n      tags:\n        - Admissions\n      summary: \"Check in a patient. Difficulty: \u2b50\"\n      description: Create a new admission in the data store, holding information about the patient's name, age and checkin time.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - patientName\n                - patientAge\n              properties:\n                patientName:\n                  type: string\n                  example: Bob\n                patientAge:\n                  type: integer\n                  example: 23\n      responses:\n        '200':\n          description: Check-in successful\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  admissionId:\n                    type: integer\n                    example: 1\n        '400':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: Age must be 0 or greater.\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> swagger.yaml: The chunk defines the API endpoint for listing patient admissions, detailing the request parameters, response structure, and potential error messages, situated within the \"Admissions\" section of the Checkins Server API documentation.",
                "content": "\n\n  /admissions/list:\n    get:\n      tags:\n        - Admissions\n      summary: \"List admissions. Difficulty: \u2b50\"\n      description: |\n        List all admissions from patients who have checked in. If a `maxAge` is given in the\n        query string of the request, only checkin admissions from patients whose age is equal to\n        or lesser than the given `maxAge` is returned.\n      parameters:\n        - name: maxAge\n          in: query\n          required: true\n          schema:\n            type: integer\n            example: 0\n      responses:\n        '200':\n          description: List of admissions\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  admissions:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        admissionId:\n                          type: integer\n                          example: 1\n                        patientName:\n                          type: string\n                          example: Bob\n                        patientAge:\n                          type: integer\n                          example: 23\n                        checkinTime:\n                          type: integer\n                          example: 1624455678\n                          description: Integer unix timestamp (in seconds)\n                        checkoutTime:\n                          type: integer\n                          nullable: true\n                          example: null\n                          description: |\n                            This field has the value of null by default for admissions that were initially created,\n                            and an integer UNIX timestamp (in seconds) when /admissions/:admissionid/checkout is called.\n        '400':\n          description: Invalid input (negative maxAge)\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: Max age must be 0 or greater\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> swagger.yaml: This chunk defines two API endpoints under the \"Admissions\" category: one for checking out a patient by marking their checkout timestamp and another for updating a patient's admission details, including their name and age. These endpoints are part of the overall Checkins Server API, which manages patient check-in admissions.",
                "content": "\n\n  /admissions/{admissionid}/checkout:\n    post:\n      tags:\n        - Admissions\n      summary: \"Check out a patient. Difficulty: \u2b50\"\n      description: Marks the checkout timestamp for an admission with a UNIX timestamp\n      parameters:\n        - name: admissionid\n          in: path\n          required: true\n          schema:\n            type: integer\n            example: 1\n      responses:\n        '200':\n          description: Check-out successful\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Invalid admission ID or already checked out\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"You have already checked out from the admission with id: 1\"\n\n  /admissions/{admissionid}:\n    put:\n      tags:\n        - Admissions\n      summary: \"Update a patient's admission. Difficulty: \u2b50\"\n      description: Update the name and age of a patient based on a particular admission.\n      parameters:\n        - name: admissionid\n          in: path\n          required: true\n          schema:\n            type: integer\n            example: 1\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - patientName\n                - patientAge\n              properties:\n                patientName:\n                  type: string\n                  example: Edited\n                patientAge:\n                  type: integer\n                  example: 999\n      responses:\n        '200':\n          description: Update successful\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Invalid input or admission ID\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"No such admission with id: 1\"\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> swagger.yaml: This chunk defines the DELETE operation for the `/admissions/{admissionid}` endpoint in the Checkins Server API, allowing users to remove a specific patient admission by its admission ID. It includes details on the request parameters, response codes, and error handling related to the deletion of admissions.",
                "content": "\n\n    delete:\n      tags:\n        - Admissions\n      summary: \"Delete a patient admission. Difficulty: \u2b50\"\n      description: Given an admissionId, remove the corresponding admission.\n      parameters:\n        - name: admissionid\n          in: path\n          required: true\n          schema:\n            type: integer\n            example: 1\n      responses:\n        '200':\n          description: Deletion successful\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          description: Invalid admission ID\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    example: \"No such admission with id: 1\""
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\src\\checkins.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> src -> checkins.test.ts: The chunk is an introductory comment at the beginning of a test suite designed to test a server's API endpoints using raw HTTP requests. It suggests improvements for code reusability and indicates that placeholder tests need to be removed and replaced with actual test cases.",
                "content": "/**\n * The test suite below uses raw requests to test your server\n *\n * One improvement could be to define helper/wrapper functions\n * to simplify and increase the reusability of your test code\n */\n\ntest.todo('Remove this placeholder test and uncomment the tests below!');\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> src -> checkins.test.ts: This chunk contains a comprehensive test suite for a server's admission management system, utilizing raw HTTP requests to validate various endpoints, including check-in, check-out, listing admissions, and editing or deleting admissions. It is designed to ensure the correct functionality and error handling of the server's API, with tests for both valid and invalid inputs.",
                "content": "\n\n/*\nimport request from 'sync-request-curl';\nimport { port, url } from './config.json';\n\nconst SERVER_URL = `${url}:${port}`;\nconst TIMEOUT_MS = 5 * 1000;\n\nbeforeEach(() => {\n  request('DELETE', SERVER_URL + '/clear', { timeout: TIMEOUT_MS });\n});\n\ndescribe('DELETE /clear', () => {\n  test('has the correct return type', () => {\n    const res = request('DELETE', SERVER_URL + '/clear', { timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({});\n  });\n});\n\ndescribe('POST /admissions/checkin', () => {\n  test.each([\n    { patientName: '', patientAge: 1 },\n    { patientName: 'valid', patientAge: -1 },\n  ])('error for patientName=\"$patientName\", patientAge=$patientAge', ({ patientName, patientAge }) => {\n    const res = request('POST', SERVER_URL + '/admissions/checkin', { json: { patientName, patientAge }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(400);\n  });\n\n  test('has the correct return type', () => {\n    const res = request('POST', SERVER_URL + '/admissions/checkin', { json: { patientName: 'John', patientAge: 23 }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ admissionId: expect.any(Number) });\n  });\n});\n\ndescribe('GET /admissions/list', () => {\n  test('error when maxAge is negative', () => {\n    const res = request('GET', SERVER_URL + '/admissions/list', { qs: { maxAge: -1 }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(400);\n  });\n\n  test.todo('returns { admissions: [] } when no checkins has occurred');\n\n  test('correctly list one admission', () => {\n    const checkinRes = request('POST', SERVER_URL + '/admissions/checkin', { json: { patientName: 'John', patientAge: 23 }, timeout: TIMEOUT_MS });\n    const admission = JSON.parse(checkinRes.body.toString());\n    const listRes = request('GET', SERVER_URL + '/admissions/list', { qs: { maxAge: 0 }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(listRes.body.toString())).toStrictEqual({\n      admissions: [\n        {\n          admissionId: admission.admissionId,\n          patientName: 'John',\n          patientAge: 23,\n          checkinTime: expect.any(Number),\n          checkoutTime: null\n        }\n      ],\n    });\n  });\n\n  test.todo('correctly list multiple admissions');\n\n  test.todo('correctly filter multiple admissions by maxAge');\n});\n\ndescribe('POST /admissions/:admissionid/checkout', () => {\n  test('failed to checkout when no checkins has occurred', () => {\n    const res = request('POST', SERVER_URL + '/admissions/0/checkout', { timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(400);\n  });\n\n  describe('when a valid checkin exists', () => {\n    let admission: { admissionId: number };\n    beforeEach(() => {\n      const res = request('POST', SERVER_URL + '/admissions/checkin', { json: { patientName: 'John', patientAge: 23 }, timeout: TIMEOUT_MS });\n      admission = JSON.parse(res.body.toString());\n    });\n\n    test('error when checkout with an invalid id', () => {\n      const res = request('POST', SERVER_URL + `/admissions/${admission.admissionId + 1}/checkout`, { timeout: TIMEOUT_MS });\n      expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(res.statusCode).toStrictEqual(400);\n    });\n\n    test.todo('checkout has correct return type');\n\n    test('checkout updates timestamp', () => {\n      const listRes1 = request('GET', SERVER_URL + '/admissions/list', { qs: { maxAge: 23 }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listRes1.body.toString())).toStrictEqual({\n        admissions: [\n          {\n            admissionId: admission.admissionId,\n            patientName: 'John',\n            patientAge: 23,\n            checkinTime: expect.any(Number),\n            checkoutTime: null\n          },\n        ]\n      });\n      request('POST', SERVER_URL + `/admissions/${admission.admissionId}/checkout`, { timeout: TIMEOUT_MS });\n      const listRes2 = request('GET', SERVER_URL + '/admissions/list', { qs: { maxAge: 23 }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listRes2.body.toString())).toStrictEqual({\n        admissions: [\n          {\n            admissionId: admission.admissionId,\n            patientName: 'John',\n            patientAge: 23,\n            checkinTime: expect.any(Number),\n            checkoutTime: expect.any(Number),\n          },\n        ]\n      });\n    });\n\n    test.todo('checkout twice results to 400 error');\n  });\n});\n\ndescribe('PUT /admissions/:admissionid', () => {\n  test.todo('failed to edit when no checkins has occurred');\n\n  describe('when a valid checkin exists', () => {\n    let admission: { admissionId: number };\n    beforeEach(() => {\n      const res = request('POST', SERVER_URL + '/admissions/checkin', { json: { patientName: 'John', patientAge: 23 }, timeout: TIMEOUT_MS });\n      admission = JSON.parse(res.body.toString());\n    });\n\n    test.each([\n      { patientName: '', patientAge: 1 },\n      { patientName: 'valid', patientAge: -1 },\n    ])('error updating patientName=\"$patientName\", patientAge=$patientAge', ({ patientName, patientAge }) => {\n      const res = request('PUT', SERVER_URL + `/admissions/${admission.admissionId}`, { json: { patientName, patientAge }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(res.statusCode).toStrictEqual(400);\n    });\n\n    test('error when editing with an invalid id', () => {\n      const res = request('PUT', SERVER_URL + `/admissions/${admission.admissionId + 1}`, { json: { patientName: 'Edited', patientAge: 999 }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(res.statusCode).toStrictEqual(400);\n    });\n\n    test.todo('editing has correct return type');\n\n    test('editing correctly changes values (side effects)', () => {\n      const listRes1 = request('GET', SERVER_URL + '/admissions/list', { qs: { maxAge: 23 }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listRes1.body.toString())).toStrictEqual({\n        admissions: [\n          {\n            admissionId: admission.admissionId,\n            patientName: 'John',\n            patientAge: 23,\n            checkinTime: expect.any(Number),\n            checkoutTime: null\n          },\n        ]\n      });\n      request('PUT', SERVER_URL + `/admissions/${admission.admissionId}`, { json: { patientName: 'Edited', patientAge: 999 }, timeout: TIMEOUT_MS });\n      const listRes2 = request('GET', SERVER_URL + '/admissions/list', { qs: { maxAge: 23 }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listRes2.body.toString())).toStrictEqual({\n        admissions: [\n          {\n            admissionId: admission.admissionId,\n            patientName: 'Edited',\n            patientAge: 999,\n            checkinTime: expect.any(Number),\n            checkoutTime: null,\n          },\n        ]\n      });\n    });\n  });\n});\n\ndescribe('DELETE /admissions/:admissionid', () => {\n  test.todo('failed to delete when no checkins has occurred');\n\n  describe('when a valid checkin exists', () => {\n    let admission: { admissionId: number };\n    beforeEach(() => {\n      const res = request('POST', SERVER_URL + '/admissions/checkin', { json: { patientName: 'John', patientAge: 23 }, timeout: TIMEOUT_MS });\n      admission = JSON.parse(res.body.toString());\n    });\n\n    test.todo('error when deleting with an invalid id');\n\n    test.todo('deleting has correct return type');\n\n    test.todo('deleted admissions will not appear in GET /admissions/list');\n\n    test('deleted admissions will not have their IDs re-used', () => {\n      request('DELETE', SERVER_URL + `/admissions/${admission.admissionId}`, { timeout: TIMEOUT_MS });\n      const res = request('POST', SERVER_URL + '/admissions/checkin', { json: { patientName: 'John', patientAge: 23 }, timeout: TIMEOUT_MS });\n      const newAdmission = JSON.parse(res.body.toString());\n      expect(newAdmission).toStrictEqual({ admissionId: expect.any(Number) });\n      expect(newAdmission.admissionId).not.toStrictEqual(admission.admissionId);\n    });\n  });\n});\n\n*/"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\src\\checkins.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> src -> checkins.ts: This chunk represents the initial part of a backend implementation for managing patient admissions, including the necessary imports and the `clear` function, which resets the admissions data. It is part of a larger codebase that handles patient check-ins, listings, checkouts, updates, and deletions.",
                "content": "/**\n * The backend implementation below has already been completed for you.\n * You DO NOT need to make any modifications to the code below.\n */\n\nimport { EmptyObject, ErrorObject, PatientAdmission, getData } from './dataStore';\n\nconst generateTimestamp = () => Math.floor(Date.now() / 1000);\n\nexport const clear = (): EmptyObject => {\n  const data = getData();\n  data.admissions = [];\n  data.numAdmissionsCreated = 0;\n  return {};\n};\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> src -> checkins.ts: The chunk contains the implementation of the `checkinPatientAdmission` function, which is responsible for registering a new patient admission by validating the patient's name and age, creating a new admission record, and updating the admissions data store. This function is part of a larger module that manages patient admissions, including functionalities for checking in, checking out, updating, listing, and deleting admissions.",
                "content": "\n\nexport const checkinPatientAdmission = (patientName: string, patientAge: number): { admissionId: number } | ErrorObject => {\n  const data = getData();\n  if (!patientName) {\n    return { error: 'Patient name not given' };\n  }\n  if (!(patientAge >= 0)) {\n    return { error: 'Age must be 0 or greater.' };\n  }\n\n  const admissionId = ++data.numAdmissionsCreated;\n  const admission: PatientAdmission = {\n    admissionId,\n    patientName,\n    patientAge,\n    checkinTime: generateTimestamp(),\n    checkoutTime: null,\n  };\n  data.admissions.push(admission);\n  return { admissionId };\n};\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> src -> checkins.ts: This chunk defines the `listPatientAdmissions` function, which retrieves and filters patient admissions based on a specified maximum age, ensuring that the age input is valid before returning the relevant admissions. It is part of a larger module that manages patient admissions, including functionalities for checking in, checking out, updating, and deleting admissions.",
                "content": "\n\nexport const listPatientAdmissions = (maxAge: number): { admissions: PatientAdmission[] } | ErrorObject => {\n  if (!(maxAge >= 0)) {\n    return { error: 'Max age must be 0 or greater' };\n  }\n  const admissions = getData().admissions.filter((e) => e.patientAge <= maxAge);\n  return { admissions };\n};\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> src -> checkins.ts: This chunk defines the `checkoutPatientAdmission` function, which allows for the checkout process of a patient by updating their admission record with a checkout timestamp, while also handling potential errors such as non-existent admissions and duplicate checkouts. It is part of a larger implementation for managing patient admissions in a healthcare system.",
                "content": "\n\nexport const checkoutPatientAdmission = (admissionId: number): EmptyObject | ErrorObject => {\n  const data = getData();\n  const admission = data.admissions.find((e) => e.admissionId === admissionId);\n  if (!admission) {\n    return { error: `No such admission with id: ${admissionId}` };\n  }\n  if (admission.checkoutTime) {\n    return { error: `You have already checked out from the admission with id: ${admissionId}` };\n  }\n  admission.checkoutTime = generateTimestamp();\n  return {};\n};\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> src -> checkins.ts: The chunk contains the implementation of the `updatePatientAdmission` function, which allows for updating the patient name and age of an existing admission in the patient admissions data. It includes validation checks for the provided inputs and handles cases where the admission ID does not exist. This function is part of a larger backend system for managing patient admissions, including functionalities for checking in, checking out, listing, and deleting admissions.",
                "content": "\n\nexport const updatePatientAdmission = (admissionId: number, patientName: string, patientAge: number): EmptyObject | ErrorObject => {\n  if (!patientName) {\n    return { error: 'New patient name must be given' };\n  }\n  if (!(patientAge >= 0)) {\n    return { error: 'New age must be 0 or greater.' };\n  }\n\n  const data = getData();\n  const admission = data.admissions.find((e) => e.admissionId === admissionId);\n  if (!admission) {\n    return { error: `No such patient with id: ${admissionId}` };\n  }\n  admission.patientName = patientName;\n  admission.patientAge = patientAge;\n  return {};\n};\n\n"
            },
            {
                "summary": "From assessments -> lab05_checkins -> src -> checkins.ts: This chunk defines the `deletePatientAdmission` function, which is responsible for removing a patient admission from the system based on a given admission ID. It checks if the admission exists and updates the admissions list accordingly, returning an error if the admission ID is not found. This function is part of a larger module that manages patient admissions, including check-in, check-out, listing, and updating admissions.",
                "content": "\n\nexport const deletePatientAdmission = (admissionId: number): EmptyObject | ErrorObject => {\n  const data = getData();\n  let hasAdmissionToDelete = false;\n  data.admissions = data.admissions.filter((e) => {\n    if (e.admissionId === admissionId) {\n      hasAdmissionToDelete = true;\n      return false;\n    }\n    return true;\n  });\n\n  if (!hasAdmissionToDelete) {\n    return { error: `No such admission with id: ${admissionId}` };\n  }\n  return {};\n};"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\src\\config.json",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> src -> config.json: The chunk contains configuration details for a local server, specifically the URL and port number used for accessing the server.",
                "content": "{\n  \"url\": \"http://127.0.0.1\",\n  \"port\": \"49152\"\n}"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\src\\dataStore.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> src -> dataStore.ts: This chunk defines the data structure and types for managing patient admissions in a healthcare application, including interfaces for patient admission records, error handling, and a datastore that holds the admissions and tracks the number of admissions created. It is part of a larger codebase that handles patient management functionalities.",
                "content": "/**\n * Datastore holding patient admissions.\n * This has already been implemented for you.\n * You DO NOT need to modify this file.\n */\n\nexport interface PatientAdmission {\n  admissionId: number;\n  patientName: string;\n  patientAge: number;\n  checkinTime: number;\n  checkoutTime: number | null;\n}\n\nexport interface ErrorObject {\n  error: string;\n}\n\nexport type EmptyObject = Record<never, never>;\n\ninterface DataStore {\n  admissions: PatientAdmission[];\n  // This number will increase when an admission is created,\n  // and is not affected by admission deletions\n  numAdmissionsCreated: number;\n}\n\nconst dataStore: DataStore = {\n  admissions: [],\n  numAdmissionsCreated: 0,\n};\n\nexport const getData = (): DataStore => dataStore;\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\src\\echo.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> src -> echo.test.ts: This chunk contains a set of Jest test cases for an HTTP echo server, demonstrating both direct request handling and the use of a wrapper function for sending requests. It includes tests for successful responses and error handling, and is currently commented out with a note to uncomment and use in the `src/echo.test.ts` file.",
                "content": "test.todo('Remove this test and uncomment the tests below in src/echo.test.ts');\n\n/*\n\nimport request from 'sync-request-curl';\nimport { port, url } from './config.json';\n\nconst SERVER_URL = `${url}:${port}`;\nconst TIMEOUT_MS = 5 * 1000;\n\n// We're only importing the SERVER_URL from config.\n// No functions that you've written should be imported,\n// as all tests should be done through HTTP requests.\n\n// We can write a test that sends a request directly\ntest('success direct', () => {\n  const res = request(\n    'GET',\n    SERVER_URL + '/echo/echo',\n    {\n      // Note that for PUT/POST requests, you should\n      // use the key 'json' instead of the query string 'qs'\n      qs: {\n        message: 'direct',\n      },\n\n      // In case our server doesn't return a response, abort the request\n      // after TIMEOUT_MS milliseconds\n      timeout: TIMEOUT_MS,\n    }\n  );\n  const data = JSON.parse(res.body.toString());\n  expect(data).toStrictEqual({ message: 'direct' });\n});\n\n// Alternatively, we can define wrapper functions to help us\n// send requests to the echo route:\nfunction requestEcho(message: string) {\n  const res = request(\n    'GET',\n    SERVER_URL + '/echo/echo',\n    {\n      // Note that for PUT/POST requests, you should\n      // use the key 'json' instead of the query string 'qs'\n      qs: {\n        message\n      },\n      timeout: TIMEOUT_MS,\n    }\n  );\n  // NOTE: information about status code can also be checked/returned\n  // if necessary, through res.statusCode\n  return JSON.parse(res.body.toString());\n}\n\n// Then use our wrapper as follow:\ntest('success wrapper', () => {\n  expect(requestEcho('wrapper')).toStrictEqual({ message: 'wrapper' });\n});\n\ntest('failure, echo echo', () => {\n  expect(requestEcho('echo')).toStrictEqual({ error: expect.any(String) });\n});\n\n// It may also be possible to extend these helper/wrapper functions to work\n// for different methods, routes, etc.\n\n*/\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\src\\echo.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> src -> echo.ts: This chunk defines the `echo` function for the `/echo/echo` route, which processes input messages and handles a specific case where the input is the string 'echo', returning an error message in that scenario.",
                "content": "/**\n * This file contains the logic of the route `/echo/echo`\n * @module echo\n */\n\nexport function echo(message: string) {\n  if (message === 'echo') {\n    return { error: \"cannot echo 'echo'!\" };\n  }\n  return {\n    message,\n  };\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\src\\root.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> src -> root.test.ts: This chunk contains a placeholder test suite for a root route in a web application, using the `sync-request-curl` library to perform HTTP requests. It includes a test for a successful GET request and a test for handling a 404 error on a POST request to the root route. The tests are currently commented out and marked for removal, indicating they should be uncommented and executed in the specified test file.",
                "content": "test.todo('Remove this test and uncomment the tests below in src/root.test.ts');\n\n/*\n\nimport request from 'sync-request-curl';\nimport { port, url } from './config.json';\n\nconst SERVER_URL = `${url}:${port}`;\nconst TIMEOUT_MS = 5 * 1000;\n\ntest(\"success root: '/'\", () => {\n  const res = request(\n    'GET',\n    SERVER_URL + '/',\n\n    {\n      // Not necessary, since it's empty, though reminder that\n      // GET/DELETE is `qs`, PUT/POST is `json`\n      qs: {},\n\n      // In case our server doesn't return a response, abort the request\n      // after TIMEOUT_MS milliseconds\n      timeout: TIMEOUT_MS,\n    }\n  );\n  const data = JSON.parse(res.body.toString());\n  expect(data).toStrictEqual({ message: expect.any(String) });\n  expect(res.statusCode).toStrictEqual(200);\n});\n\ntest(\"404 error if wrong method for root route, '/'\", () => {\n  const res = request(\n    'POST',\n    SERVER_URL + '/',\n    { json: {}, timeout: TIMEOUT_MS }\n  );\n  expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n  expect(res.statusCode).toStrictEqual(404);\n});\n\n*/\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab05_checkins\\src\\server.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab05_checkins -> src -> server.ts: This chunk contains the complete implementation of an Express.js server that handles patient admissions, including routes for checking in and checking out patients, listing admissions, and clearing data. It also includes middleware for CORS, JSON parsing, and logging, as well as error handling for undefined routes.",
                "content": "import express, { json, Request, Response } from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport { echo } from './echo';\nimport { port, url } from './config.json';\nimport { checkinPatientAdmission, checkoutPatientAdmission, clear, deletePatientAdmission, listPatientAdmissions, updatePatientAdmission } from './checkins';\n\nconst PORT: number = parseInt(process.env.PORT || port);\nconst HOST: string = process.env.IP || '127.0.0.1';\n\nconst app = express();\n\n// Use middleware that allows for access from other domains (needed for frontend to connect)\napp.use(cors());\n// Use middleware that allows us to access the JSON body of requests\napp.use(json());\n// Use middleware to log (print to terminal) incoming HTTP requests (OPTIONAL)\napp.use(morgan('dev'));\n\n// Root URL\napp.get('/', (req: Request, res: Response) => {\n  console.log('Print to terminal: someone accessed our root url!');\n  res.json({ message: \"Welcome to Lab05 Checkins Server's root URL!\" });\n});\n\n/**\n * READ THIS ROUTE AS WELL AS\n * - echo.ts\n * - echo.test.ts\n * BEFORE STARTING!!!\n */\napp.get('/echo/echo', (req: Request, res: Response) => {\n  // For GET/DELETE requests, data are passed in a query string.\n  // You will need to typecast for GET/DELETE requests.\n  const message = req.query.message as string;\n\n  // Logic of the echo function is abstracted away in a different\n  // file called echo.ts.\n  const result = echo(message);\n\n  // If { error: 'some relevant error' } is returned, we parse the status to 400.\n  // Later in the course we will explore throwing/raising exceptions which will simplify this process\n  if ('error' in result) {\n    // Note also that the 'return' statement is necessary here since res.json() alone does not terminate\n    // this route, and we don't want to risk sending a response twice.\n    res.status(400).json(result);\n    return\n  }\n  res.json(result);\n});\n\n// ========================================================================= //\n// YOUR ROUTES SHOULD BE DEFINED BELOW THIS DIVIDER\n// ========================================================================= //\n\napp.delete('/clear', (req: Request, res: Response) => {\n  // TODO: use the imported clear() function in the response, i.e.. res.json(clear());\n  res.status(501).json({ error: 'Not implemented. Please replace this line of code in src/server.ts' });\n});\n\napp.post('/admissions/checkin', (req: Request, res: Response) => {\n  // For PUT/POST requests, data is transfered through the JSON body and will always be of the correct type.\n  const { patientName, patientAge } = req.body;\n\n  // TODO: similar to /echo/echo, call the checkinPatientAdmission function and handle error checking\n  console.log('Received patientName:', patientName);\n  console.log('Received patientAge:', patientAge);\n  res.status(501).json({ error: 'Not implemented. Please replace this line of code in src/server.ts' });\n});\n\napp.get('/admissions/list', (req: Request, res: Response) => {\n  // To get the maxAge query string, we use req.query.\n  // This will always be of type string, so we will need to typecast it to a\n  // number (integer) ourselves with parseInt\n  const maxAge = parseInt(req.query.maxAge as string);\n  console.log('Received maxAge:', maxAge);\n\n  // TODO: similar to /echo/echo, call the listPatientAdmissions function and handle error checking\n  res.status(501).json({ error: 'Not implemented. Please replace this line of code in src/server.ts' });\n});\n\napp.post('/admissions/:admissionid/checkout', (req: Request, res: Response) => {\n  // To get the `:admissionid` parameter from the URL above, we use req.params\n  // This will always be of type string, so we will need to typecast it to a\n  // number (integer) ourselves with parseInt\n  const admissionId = parseInt(req.params.admissionid as string);\n  console.log('Received admissionId:', admissionId);\n\n  // TODO: similar to /echo/echo, call the checkoutPatientAdmission function and handle error checking\n  res.status(501).json({ error: 'Not implemented. Please replace this line of code in src/server.ts' });\n});\n\n// TODO: implement PUT /admissions/:admissionid\n\n// TODO: implement DELETE /admissions/:admissionid\n\n// ========================================================================= //\n// YOUR ROUTES SHOULD BE DEFINED ABOVE THIS DIVIDER\n// ========================================================================= //\n\n/*\n * 404 Not Found Middleware\n *\n * This should be put at the very end (after all your routes are defined),\n * although still above errorHandlers (if any) and app.listen().\n */\napp.use((req: Request, res: Response) => {\n  const error = `\n    404 Not found - This could be because:\n      0. You have defined routes below (not above) this middleware in server.ts\n      1. You have not implemented the route ${req.method} ${req.path}\n      2. There is a typo in either your test or server, e.g. /admissions/list in one\n         and, incorrectly, /admission/list in the other\n      3. You are using ts-node (instead of ts-node-dev) to start your server and\n         have forgotten to manually restart to load the new changes\n      4. You've forgotten a leading slash (/), e.g. you have admissions/list instead\n         of /admissions/list in your server.ts or test file\n  `;\n  res.status(404).json({ error });\n});\n\n/**\n * Start server\n */\nconst server = app.listen(PORT, HOST, () => {\n  console.log(`Express Server started and awaiting requests at the URL: '${url}:${PORT}'`);\n});\n\n/**\n * Handle Ctrl+C gracefully\n */\nprocess.on('SIGINT', () => {\n  server.close(() => {\n    console.log('Shutting down server gracefully.');\n    process.exit();\n  });\n});"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_memory\\.eslintrc.json",
        "chunks": [
            {
                "summary": "From assessments -> lab08_memory -> .eslintrc.json: The chunk represents the configuration settings for ESLint, specifically tailored for a TypeScript project, including parser options, environment settings, global variables, and a comprehensive set of linting rules to enforce code quality and consistency.",
                "content": "{\n  \"ignorePatterns\": [\"build\"],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\n    \"@typescript-eslint\",\n    \"jest\"\n  ],\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2022,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n  \"env\": {\n    \"es2021\": true,\n    \"node\": true,\n    \"jest\": true\n  },\n  \"globals\": {\n    \"document\": \"readonly\",\n    \"navigator\": \"readonly\",\n    \"window\": \"readonly\"\n  },\n  \"rules\": {\n    \"no-unused-vars\": [\"error\", {\n      \"args\": \"none\",\n      \"caughtErrors\": \"none\",\n      \"ignoreRestSiblings\": true,\n      \"vars\": \"all\"\n    }],\n    \n    // Everything below here is standard 1531\n\n    \"@typescript-eslint/no-var-requires\": 0,\n    \"@typescript-eslint/no-unused-vars\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n \n    \"no-var\": \"warn\",\n    \"object-shorthand\": 0, // [\"warn\", \"properties\"],\n\n    \"accessor-pairs\": [\"error\", { \"setWithoutGet\": true, \"enforceForClassMembers\": true }],\n    \"array-bracket-spacing\": [\"error\", \"never\"],\n    \"array-callback-return\": [\"error\", {\n      \"allowImplicit\": false,\n      \"checkForEach\": false\n    }],\n    \"arrow-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"block-spacing\": [\"error\", \"always\"],\n    \"brace-style\": [\"error\", \"1tbs\", { \"allowSingleLine\": true }],\n    \"camelcase\": [\"error\", {\n      \"allow\": [\"^UNSAFE_\"],\n      \"properties\": \"never\",\n      \"ignoreGlobals\": true,\n      \"ignoreDestructuring\": true\n    }],\n    \"comma-dangle\": [\"error\", {\n      \"arrays\": \"only-multiline\",\n      \"objects\": \"only-multiline\",\n      \"imports\": \"only-multiline\",\n      \"exports\": \"only-multiline\",\n      \"functions\": \"never\"\n    }],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"comma-style\": [\"error\", \"last\"],\n    \"computed-property-spacing\": [\"error\", \"never\", { \"enforceForClassMembers\": true }],\n    \"constructor-super\": \"error\",\n    \"curly\": [\"error\", \"multi-line\"],\n    \"default-case-last\": \"error\",\n    \"dot-location\": [\"error\", \"property\"],\n    \"dot-notation\": [\"error\", { \"allowKeywords\": true }],\n    \"eol-last\": \"error\",\n    \"eqeqeq\": [\"error\", \"always\", { \"null\": \"ignore\" }],\n    \"func-call-spacing\": [\"error\", \"never\"],\n    \"generator-star-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"indent\": [\"error\", 2, {\n      \"SwitchCase\": 1,\n      \"VariableDeclarator\": 1,\n      \"outerIIFEBody\": 1,\n      \"MemberExpression\": 1,\n      \"FunctionDeclaration\": { \"parameters\": 1, \"body\": 1 },\n      \"FunctionExpression\": { \"parameters\": 1, \"body\": 1 },\n      \"CallExpression\": { \"arguments\": 1 },\n      \"ArrayExpression\": 1,\n      \"ObjectExpression\": 1,\n      \"ImportDeclaration\": 1,\n      \"flatTernaryExpressions\": false,\n      \"ignoreComments\": false,\n      \"ignoredNodes\": [\"TemplateLiteral *\", \"JSXElement\", \"JSXElement > *\", \"JSXAttribute\", \"JSXIdentifier\", \"JSXNamespacedName\", \"JSXMemberExpression\", \"JSXSpreadAttribute\", \"JSXExpressionContainer\", \"JSXOpeningElement\", \"JSXClosingElement\", \"JSXFragment\", \"JSXOpeningFragment\", \"JSXClosingFragment\", \"JSXText\", \"JSXEmptyExpression\", \"JSXSpreadChild\"],\n      \"offsetTernaryExpressions\": true\n    }],\n    \"key-spacing\": [\"error\", { \"beforeColon\": false, \"afterColon\": true }],\n    \"keyword-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"lines-between-class-members\": [\"error\", \"always\", { \"exceptAfterSingleLine\": true }],\n    \"multiline-ternary\": [\"error\", \"always-multiline\"],\n    \"new-cap\": [\"error\", { \"newIsCap\": true, \"capIsNew\": false, \"properties\": true }],\n    \"new-parens\": \"error\",\n    \"no-array-constructor\": \"error\",\n    \"no-async-promise-executor\": \"error\",\n    \"no-caller\": \"error\",\n    \"no-case-declarations\": \"error\",\n    \"no-class-assign\": \"error\",\n    \"no-compare-neg-zero\": \"error\",\n    \"no-cond-assign\": \"error\",\n    \"no-const-assign\": \"error\",\n    \"no-constant-condition\": [\"error\", { \"checkLoops\": false }],\n    \"no-control-regex\": \"error\",\n    \"no-debugger\": \"error\",\n    \"no-delete-var\": \"error\",\n    \"no-dupe-args\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-duplicate-case\": \"error\",\n    \"no-useless-backreference\": \"error\",\n    \"no-empty\": [\"error\", { \"allowEmptyCatch\": true }],\n    \"no-empty-character-class\": \"error\",\n    \"no-empty-pattern\": \"error\",\n    \"no-eval\": \"error\",\n    \"no-ex-assign\": \"error\",\n    \"no-extend-native\": \"error\",\n    \"no-extra-bind\": \"error\",\n    \"no-extra-boolean-cast\": \"error\",\n    \"no-extra-parens\": [\"error\", \"functions\"],\n    \"no-fallthrough\": \"error\",\n    \"no-floating-decimal\": \"error\",\n    \"no-func-assign\": \"error\",\n    \"no-global-assign\": \"error\",\n    \"no-implied-eval\": \"error\",\n    \"no-import-assign\": \"error\",\n    \"no-invalid-regexp\": \"error\",\n    \"no-irregular-whitespace\": \"error\",\n    \"no-iterator\": \"error\",\n    \"no-labels\": [\"error\", { \"allowLoop\": false, \"allowSwitch\": false }],\n    \"no-lone-blocks\": \"error\",\n    \"no-loss-of-precision\": \"error\",\n    \"no-misleading-character-class\": \"error\",\n    \"no-prototype-builtins\": \"error\",\n    \"no-useless-catch\": \"error\",\n    \"no-mixed-operators\": [\"error\", {\n      \"groups\": [\n        [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n        [\"&&\", \"||\"],\n        [\"in\", \"instanceof\"]\n      ],\n      \"allowSamePrecedence\": true\n    }],\n    \"no-mixed-spaces-and-tabs\": \"error\",\n    \"no-multi-spaces\": \"error\",\n    \"no-multi-str\": \"error\",\n    \"no-multiple-empty-lines\": [\"error\", { \"max\": 1, \"maxEOF\": 0 }],\n    \"no-new\": \"error\",\n    \"no-new-func\": \"error\",\n    \"no-new-object\": \"error\",\n    \"no-new-symbol\": \"error\",\n    \"no-new-wrappers\": \"error\",\n    \"no-obj-calls\": \"error\",\n    \"no-octal\": \"error\",\n    \"no-octal-escape\": \"error\",\n    \"no-proto\": \"error\",\n    \"no-redeclare\": [\"error\", { \"builtinGlobals\": false }],\n    \"no-regex-spaces\": \"error\",\n    \"no-return-assign\": [\"error\", \"except-parens\"],\n    \"no-self-assign\": [\"error\", { \"props\": true }],\n    \"no-self-compare\": \"error\",\n    \"no-sequences\": \"error\",\n    \"no-shadow-restricted-names\": \"error\",\n    \"no-sparse-arrays\": \"error\",\n    \"no-tabs\": \"error\",\n    \"no-template-curly-in-string\": \"error\",\n    \"no-this-before-super\": \"error\",\n    \"no-throw-literal\": \"error\",\n    \"no-trailing-spaces\": \"error\",\n    \"no-undef\": \"error\",\n    \"no-undef-init\": \"error\",\n    \"no-unexpected-multiline\": \"error\",\n    \"no-unmodified-loop-condition\": \"error\",\n    \"no-unneeded-ternary\": [\"error\", { \"defaultAssignment\": false }],\n    \"no-unreachable\": \"error\",\n    \"no-unreachable-loop\": \"error\",\n    \"no-unsafe-finally\": \"error\",\n    \"no-unsafe-negation\": \"error\",\n    \"no-unused-expressions\": [\"error\", {\n      \"allowShortCircuit\": true,\n      \"allowTernary\": true,\n      \"allowTaggedTemplates\": true\n    }],\n    \n    \"no-use-before-define\": [\"error\", { \"functions\": false, \"classes\": false, \"variables\": false }],\n    \"no-useless-call\": \"error\",\n    \"no-useless-computed-key\": \"error\",\n    \"no-useless-constructor\": \"error\",\n    \"no-useless-escape\": \"error\",\n    \"no-useless-rename\": \"error\",\n    \"no-useless-return\": \"error\",\n    \"no-void\": \"error\",\n    \"no-whitespace-before-property\": \"error\",\n    \"no-with\": \"error\",\n    \"object-curly-newline\": [\"error\", { \"multiline\": true, \"consistent\": true }],\n    \"object-curly-spacing\": [\"error\", \"always\"],\n    \"object-property-newline\": [\"error\", { \"allowMultiplePropertiesPerLine\": true }],\n    \"one-var\": [\"error\", { \"initialized\": \"never\" }],\n    \"operator-linebreak\": [\"error\", \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\", \"|>\": \"before\" } }],\n    \"padded-blocks\": [\"error\", { \"blocks\": \"never\", \"switches\": \"never\", \"classes\": \"never\" }],\n    \"prefer-const\": [\"error\", {\"destructuring\": \"all\"}],\n    \"prefer-promise-reject-errors\": \"error\",\n    \"prefer-regex-literals\": [\"error\", { \"disallowRedundantWrapping\": true }],\n    \"quote-props\": [\"error\", \"as-needed\"],\n    \"quotes\": [\"error\", \"single\", { \"avoidEscape\": true, \"allowTemplateLiterals\": false }],\n    \"rest-spread-spacing\": [\"error\", \"never\"],\n    \"semi\": [2, \"always\"],\n    \"semi-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"space-before-blocks\": [\"error\", \"always\"],\n    \"space-before-function-paren\": [\"off\"],\n    \"space-in-parens\": [\"error\", \"never\"],\n    \"space-infix-ops\": \"error\",\n    \"space-unary-ops\": [\"error\", { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [\"error\", \"always\", {\n      \"line\": { \"markers\": [\"*package\", \"!\", \"/\", \",\", \"=\"] },\n      \"block\": { \"balanced\": true, \"markers\": [\"*package\", \"!\", \",\", \":\", \"::\", \"flow-include\"], \"exceptions\": [\"*\"] }\n    }],\n    \"symbol-description\": \"error\",\n    \"template-curly-spacing\": [\"error\", \"never\"],\n    \"template-tag-spacing\": [\"error\", \"never\"],\n    \"unicode-bom\": [\"error\", \"never\"],\n    \"use-isnan\": [\"error\", {\n      \"enforceForSwitchCase\": true,\n      \"enforceForIndexOf\": true\n    }],\n    \"valid-typeof\": [\"error\", { \"requireStringLiterals\": true }],\n    \"wrap-iife\": [\"error\", \"any\", { \"functionPrototypeMethods\": true }],\n    \"yield-star-spacing\": [\"error\", \"both\"],\n    \"yoda\": [\"error\", \"never\"]\n  }\n}"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_memory\\.gitlab-ci.yml",
        "chunks": [
            {
                "summary": "From assessments -> lab08_memory -> .gitlab-ci.yml: This chunk represents a configuration file for a CI/CD pipeline, defining stages for checks, including testing and linting, using a specific Docker image and including a before script message.",
                "content": "image: comp1531/automarking:latest\n\nstages:\n  - checks\n\nbefore_script:\n  - echo \"This message is echoed at the very start!\"\n\ntesting:\n  stage: checks\n  script:\n    - echo 'Add testing here'\n    - echo 'echo!'\n  only:\n    - master\n\nlinting:\n  stage: checks\n  script:\n    - echo 'Add linting here'\n    - echo \"echo 'echo!'\"\n  only:\n    - master\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_memory\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab08_memory -> package.json: The chunk represents the complete package.json configuration file for a TypeScript project named \"lab08_memory,\" detailing its version, main entry point, scripts, dependencies, and development dependencies.",
                "content": "{\n  \"name\": \"lab08_memory\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"src/game.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.12\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.20.0\",\n    \"@typescript-eslint/parser\": \"^6.20.0\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-plugin-jest\": \"^27.6.3\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"dependencies\": {\n    \"slync\": \"^1.0.2\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_memory\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab08_memory -> README.md: This chunk serves as the introductory section of a lab document for a memory game project, outlining the lab's title, estimated completion time, overall difficulty, and initial setup instructions, including package installation and script configuration. It sets the stage for the subsequent sections detailing the game's functionality and requirements.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-3%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-yes-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-yes-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 9 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n\n# Background\n\n## Rationale\n\nIn a workplace environment, what should you do when you encounter a problem that\nyou don't want to deal with? That's right, you throw it up to the next person in\nthe chain and hope that they'll catch and deal with it for you!\n\n... Bad advice, but this is similar to how Exceptions are generally used to\ncommunicate a disruption to the normal flow of a program from one layer to the next.\n\nIn this lab, you will be building the underlying code for a memory game (in\n[src/memory.ts](src/memory.ts)) which will involve throwing errors under certain conditions.\nWe will try to catch these in our already-completed [src/game.ts](src/lgame.ts).\n\nMoreover, with how unreliable our memory can be, you will also explore how\nobjects can be saved to, or loaded from, a `JSON` file. This is an\napplication of data persistence.\n\n## Getting Started\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine. \n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab.\n\n## Package Installation\n\n1. Open [package.json](package.json) and look at existing packages in `\"dependencies\"` and `\"devDependencies\"`. Install them with:\n    ```shell\n    $ npm install # shortcut: npm i\n    ```\n\n1. Open [package.json](package.json) and add the following scripts:\n    ```json\n    \"scripts\": {\n        \"start\": \"ts-node src/game.ts\",\n        \"test\": \"jest\",\n        \"tsc\": \"tsc --noEmit\",\n        \"ts-node\": \"ts-node\",\n        \"lint\": \"eslint '**/*.ts'\"\n    }\n    ```\n\n1. Use `git` to `add`, `commit` and `push` your [package.json](package.json) and [package-lock.json](package-lock.json).\n\n1. (Optional) Update [.gitlab-ci.yml](.gitlab-ci.yml) with testing and linting.\n\n1. That's it, you're all set ^_^!\n"
            },
            {
                "summary": "From assessments -> lab08_memory -> README.md: This chunk describes the memory game that is the focus of the lab assignment, detailing its mechanics, rules, and the initial game structure, as well as outlining the functions that will be implemented to manage game actions and state.",
                "content": "## The Game\nThis is a memory game that continuously generates English words and prompts the user to choose either\n1. Add the word to the dictionary, assuming it doesn't exist\n1. Remove the word from the dictionary, assuming it does exist\n\nThe user is allowed 3 mistakes before the game is over. They also have 5 clues, which allow them to view the current words available in the dictionary.\n\nIn [src/memory.ts](src/memory.ts), we have provided the example game structure:\n```javascript\nconst currentGame = {\n  score: 0,\n  mistakesRemaining: 3,\n  cluesRemaining: 5,\n  dictionary: [],\n};\n```\nrepresenting the initial state of the game.\n\nWhile not necessary, you are allowed to modify the structure or define the variable with `let` if you wish, but\nthe default state (0 score, 3 mistakes, 5 clues, empty dictionary) should remain the same when the information is requested via [Interface: Functions](#interface-functions) after the game is reset.\n\nThe current game is considered active if `mistakesRemaining > 0`, and inactive (or \"over\")\nif there are no `mistakesRemaining`.\n\nFor inactive games, the values of the score, mistakesRemaining, cluesRemaining and the words inside the dictionary **will not be affected by any actions other than a *reset* or if a different game is loaded**.\n\n## Interface: Functions\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th>Parameters</th>\n    <th>Return Type</th>\n    <th>Errors</th>\n  </tr>\n  <tr>\n    <td>\n        <code>getGameInfo</code>\n        <br/><br/>\n        Returns an object containing some information about the current game.\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n        ()\n    </td>\n    <td>\n        <code>{score: number, mistakesRemaining: number, cluesRemaining: number}</code>\n    </td>\n    <td>\n        N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>addWord</code>\n        <br/><br/>\n        Attempts to add a word to the current game's dictionary and increase the score if successful. Otherwise, for active games, decrement mistakesRemaining.\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n        (word: string)\n    </td>\n    <td>\n        <code>undefined</code>\n    </td>\n    <td>\n        Throw <code>Error</code> if\n        <ul>\n            <li>The game is inactive</li>\n            <li>The given word already exists in the current game's dictionary</li>\n        </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>removeWord</code>\n        <br/><br/>\n        Attempts to remove a word from the current game's dictionary and increase the score if successful. Otherwise, for active games, decrement the mistakesRemaining.\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n        (word: string)\n    </td>\n    <td>\n        <code>undefined</code>\n    </td>\n    <td>\n        Throw <code>Error</code> if\n        <ul>\n            <li>The game is inactive</li>\n            <li>The given word does not exist in the current game's dictionary</li>\n        </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>viewDictionary</code>\n        <br/><br/>\n        Return the dictionary containing words for the current game, in chronological order. For example, if <code>'one'</code>, <code>'two'</code> and <code>'three'</code> are added, the returned string array should be:\n        <br/>\n        <code>['one', 'two', 'three']</code>.\n        <br/><br/>\n        For active games, a clue will be used.\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n        ()\n    </td>\n    <td>\n        <code>string[]</code>\n    </td>\n    <td>\n        Throw <code>Error</code> if there are no clues remaining <b>during</b>\n        an active game.\n        <br/><br/>\n        No error should be thrown if the game is inactive.\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>resetGame</code>\n        <br/><br/>\n        Reset the current game to the initial state.\n        <br/><br/><b>Difficulty</b>: \u2b50\n    </td>\n    <td>\n        ()\n    </td>\n    <td>\n        <code>undefined</code>\n    </td>\n    <td>\n        N/A\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>saveGame</code>\n        <br/><br/>\n        Given a <code>name</code>, save the current game to a file with the\n        added prefix <code>memory_</code> and extension <code>.json</code>.\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\u2b50\n    </td>\n    <td>\n        (name: string)\n    </td>\n    <td>\n        <code>undefined</code>\n    </td>\n    <td>\n        Throw <code>Error</code> if\n        <ul>\n            <li>The name given is an empty string, <code>''</code></li>\n            <li>The name given is not alphanumeric (only letters and numbers)</li>\n            <li>A game of this name is already saved</li>\n        </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>loadGame</code>\n        <br/><br/>\n        Given a <code>name</code>, load a saved game from a file with the\n        added prefix <code>memory_</code> and extension <code>.json</code>.\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\u2b50\n    </td>\n    <td>\n        (name: string)\n    </td>\n    <td>\n        <code>undefined</code>\n    </td>\n    <td>\n        Throw <code>Error</code> if\n        <ul>\n            <li>The name given is an empty string, <code>''</code></li>\n            <li>The name given is not alphanumeric (only letters and numbers)</li>\n            <li>No saved games correspond to the given name</li>\n        </ul>\n    </td>\n  </tr>\n</table>\n"
            },
            {
                "summary": "From assessments -> lab08_memory -> README.md: This chunk provides important notes and assumptions regarding the implementation of the memory game, specifically outlining function return types, file handling requirements, and testing considerations for the game's functionality as described in the preceding sections of the document.",
                "content": "### Notes and Assumptions:\n\n1. `undefined` means the function does not need to return anything.\n1. You can assume that `addWord` and `removeWord` will always be given a valid English\nword with at least 2 characters.\n1. Files should be saved in the current (root) directory of the lab, **not** in `src`. \n    - For example, you should do `fs.writeFileSync('memory_example.json')`, and **not** `./src/...` or `../...`, etc.\n1. When it comes to testing the saving/loading of games, you can assume that the\nonly `memory_[name].json` files in the current directory are the ones you have created.\n\n# Task\n\n## Testing\n\nSame with previous lab exercises, you are to write tests for the functions defined in the [Interface: Functions](#interface-functions).\n\nSee [src/memory.test.ts](src/memory.test.ts) for an example of how you can test for errors being raised in your functions.\n\nYou may find the Jest documentation for [expect.toThrow(Error)](https://jestjs.io/docs/expect#tothrowerror) useful.\n\n### Testing Tips\n\n- If your function call (e.g. `removeWord('nonexistent')`) throws an error, it will crash your NodeJS program, including your jest tests. This is\nwhy it is important to still wrap up these function calls inside an [expect.toThrow](https://jestjs.io/docs/expect#tothrowerror), e.g.\n    ```ts\n    expect(() => removeWord('nonexistent')).toThrow(Error);\n    ```\n- With loading/saving the game, on CSE machines, you may experience inconsistent testing behaviour (e.g. passes the test suite the first time, then fails the second). This could be because of slow read/write on CSE when there are a lot of students online. One workaround is to add delays between each test, e.g.\n    ```ts\n    const sleepSync = (ms: number) => {\n      const startTime = new Date().getTime();\n      while (new Date().getTime() - startTime < ms) { /* zzzZZ */ }\n    }\n\n    afterEach(() => {\n      clear();\n      // sleeps for 50 milliseconds before starting the next test\n      sleepSync(50);\n    })\n    ```\n    or, more efficiently, use a library such as [slync](https://www.npmjs.com/package/slync):\n    ```typescript\n    import sleepSync from 'slync';\n\n    afterEach(() => {\n      clear();\n      // sleeps for 50 milliseconds before starting the next test\n      sleepSync(50);\n    })\n    ```\n"
            },
            {
                "summary": "From assessments -> lab08_memory -> README.md: This chunk provides detailed instructions for implementing the functions required for a memory game, including hints for file handling and formatting JSON data. It also outlines the steps to play the game and includes example outputs from game sessions, illustrating how the game operates and the expected user interactions.",
                "content": "## Implementation\n\nImplement the functions in [Interface: Functions](#interface-functions) and ensure that they pass your tests.\n\nNote that you should **not** need to write any try/catch blocks in [src/memory.test.ts](src/memory.test.ts)\n\n### Implementation Hints\n\n1. For loading and saving files, consider `fs.readFileSync`, `fs.writeFileSync` and `fs.existsSync`.\n1. To pretty-print an object, specify a space or indent of `2` when converting it into a string. This will make the `JSON` easier to read (e.g. when saving to a file). For example, try running the code:\n    ```javascript\n    const myObject = {\n      key1: 0,\n      key2: \"string\",\n      key3: true,\n    }\n    console.log(\"Regular:\");\n    console.log(JSON.stringify(myObject));\n    console.log();\n    console.log(\"Pretty (with 2-space indentation):\");\n    console.log(JSON.stringify(myObject, null, 2));\n    ```\n\n## Playing The Game\n\nTo play the game, you first need to install the following two dependencies:\n```shell\n$ npm install prompt-sync random-words@1.3.0\n```\nand their types as development dependencies:\n```shell\n$ npm install --save-dev @types/prompt-sync @types/random-words@1.1.2\n```\n\nThe code for the game has already been written for you in [game.js](game.js). Once you have\nimplemented your [Interface: Functions](#interface-functions), you can play the game with\nthe command:\n```shell\n$ npm start\n```\n\n### Game Example Outputs\n\nBelow are example outputs of two game sessions demonstrating some of the features. Click\non the dropdown to view them.\n\nThe error messages in your program **do not need to match the examples below**. We\nwill only assess whether an error is thrown or not, so you can decide on your\nown error message.\n\n<details close>\n\n<summary><b>Example 1</b> - playing and saving to <code>memory_example.json</code>.</summary>\n\n```text\n$ npm start\n^_^ Welcome to Memory 101! ^_^\nType 'help' to see the list of available commands!\n\n[^_^] Add 'do' to dictionary?\n>>> command: i\n{ score: 0, mistakesRemaining: 3, cluesRemaining: 5 }\n\n[^_^] Add 'do' to dictionary?\n>>> command: y\n\n[^_^] Add 'can' to dictionary?\n>>> command: i\n{ score: 1, mistakesRemaining: 3, cluesRemaining: 5 }\n\n[^_^] Add 'can' to dictionary?\n>>> command: n\nFailed to remove 'can': Word 'can' is not in the dictionary!\n\n[^_^] Add 'tin' to dictionary?\n>>> command: i\n{ score: 1, mistakesRemaining: 2, cluesRemaining: 5 }\n\n[^_^] Add 'tin' to dictionary?\n>>> command: v\n[ 'do' ]\n\n[^_^] Add 'tin' to dictionary?\n>>> command: i\n{ score: 1, mistakesRemaining: 2, cluesRemaining: 4 }\n\n[^_^] Add 'tin' to dictionary?\n>>> command: s example\nSaving file memory_example.json\n\n[^_^] Add 'tin' to dictionary?\n>>> command: s example\nFailed to save game example: File 'memory_example.json' already exits!\n\n[^_^] Add 'tin' to dictionary?\n>>> command: q\n... Exiting. Thanks for playing!\n```\n\n</details>\n\n<details close>\n\n<summary><b>Example 2</b> - starting the program again and loading <code>memory_example.json</code>.</summary>\n\n```\n$ npm start\n^_^ Welcome to Memory 101! ^_^\nType 'help' to see the list of available commands!\n\n[^_^] Add 'gas' to dictionary?\n>>> command: i\n{ score: 0, mistakesRemaining: 3, cluesRemaining: 5 }\n\n[^_^] Add 'gas' to dictionary?\n>>> command: l example\nLoading file memory_example.json\n\n[^_^] Add 'gas' to dictionary?\n>>> command: i\n{ score: 1, mistakesRemaining: 2, cluesRemaining: 4 }\n\n[^_^] Add 'gas' to dictionary?\n>>> command: v\n[ 'do' ]\n\n[^_^] Add 'gas' to dictionary?\n>>> command: v\n[ 'do' ]\n\n[^_^] Add 'gas' to dictionary?\n>>> command: v\n[ 'do' ]\n\n[^_^] Add 'gas' to dictionary?\n>>> command: v\n[ 'do' ]\n\n[^_^] Add 'gas' to dictionary?\n>>> command: v\nFailed to view dictionary: No clues remaining in this active game.\n\n[^_^] Add 'gas' to dictionary?\n>>> command: i\n{ score: 1, mistakesRemaining: 2, cluesRemaining: 0 }\n\n[^_^] Add 'gas' to dictionary?\n>>> command: n\nFailed to remove 'gas': Word 'gas' is not in the dictionary!\n\n[^_^] Add 'was' to dictionary?\n>>> command: n\nFailed to remove 'was': Word 'was' is not in the dictionary!\n\n[T_T] Add 'box' to dictionary?\n>>> command: n\nFailed to remove 'box': Game is over.\n\n[T_T] Add 'saw' to dictionary?\n>>> command: i\n{ score: 1, mistakesRemaining: 0, cluesRemaining: 0 }\n\n[T_T] Add 'saw' to dictionary?\n>>> command: v\n[ 'do' ]\n\n[T_T] Add 'saw' to dictionary?\n>>> command: q\n... Exiting. Thanks for playing!\n```\n\n</details>\n"
            },
            {
                "summary": "From assessments -> lab08_memory -> README.md: The chunk provides instructions for submitting the completed lab work, including using Git for version control, checking the upload status on Gitlab, and recommendations for managing storage space on CSE machines. It also includes a sample `package.json` file to guide users in setting up their project dependencies and scripts.",
                "content": "# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n\n# Additional Information\n\n## Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary><br/>\n\n**Note**: \n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n1. For this lab, you will only need [prompt-sync](https://www.npmjs.com/package/prompt-sync), [random-words](https://www.npmjs.com/package/random-words), [@types/prompt-sync](https://www.npmjs.com/package/@types/prompt-sync) and [@types/random-words](https://www.npmjs.com/package/@types/random-words) if you've chosen to play the game :).\n\n```json\n{\n  \"name\": \"lab08_memory\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"src/game.ts\",\n  \"scripts\": {\n    \"start\": \"ts-node src/game.ts\",\n    \"test\": \"jest\",\n    \"tsc\": \"tsc --noEmit\",\n    \"ts-node\": \"ts-node\",\n    \"lint\": \"eslint src/**.ts\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"prompt-sync\": \"^4.2.0\",\n    \"random-words\": \"^2.0.1\",\n    \"slync\": \"^1.0.2\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/prompt-sync\": \"^4.2.3\",\n    \"@types/random-words\": \"^1.1.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.20.0\",\n    \"@typescript-eslint/parser\": \"^6.20.0\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-plugin-jest\": \"^27.6.3\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^5.3.3\"\n  }\n}\n```\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_memory\\src\\game.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_memory -> src -> game.ts: This chunk contains the initial setup and core functions for a word-based game called \"Memory 101,\" including command handling, word generation, and game state management, as part of a larger JavaScript program that facilitates user interaction and game mechanics.",
                "content": "/**\n * Playing the game!\n *\n * The code as already been written - you do not need to\n * modify this file unless you want to.\n *\n * Install the required libraries with\n *     $ npm i prompt-sync random-words@1.3.0\n *     $ npm i -D @types/prompt-sync @types/random-words@1.1.2\n */\n\nimport promptSync from 'prompt-sync';\nimport randomWords from 'random-words';\n\nimport {\n  getGameInfo,\n  addWord,\n  removeWord,\n  viewDictionary,\n  resetGame,\n  loadGame,\n  saveGame,\n} from './memory';\n\n// ========================================================================= //\n\n// Change this if you want longer/shorter words. Must be at least 2.\nconst MAX_WORD_LENGTH = 3;\n\n// ========================================================================= //\n\nfunction handleHelp() {\n  console.log(`\n=== DISPLAYING HELP ===\n|| It is sufficient to type only the first letter of\n|| the commands below, e.g. 'h' for 'help'.\n|| --------------------\n|| help\n||    display this help message\n|| info\n||    return the current game info\n|| yes\n||    yes, word is not in the dictionary, add it!\n|| no\n||    no, word is in the dictionary, remove it!\n|| view\n||    display the dictionary.\n|| reset\n||    reset the game to the initial state\n|| quit\n||    exits from the game\n|| save NAME\n||    saves the state of the game into a JSON file with\n||    the added prefix memory_ and extension .json, e.g.\n||    memory_NAME.json\n|| load NAME\n||    loads the state of the game from a file with\n||    the added extension .json, e.g. memory_NAME.json\n|| clear\n||    clears the output in the console, similar to Linux's clear command.\n=======================`\n  );\n}\n\nfunction getRandomWord() {\n  return randomWords({ exactly: 1, maxLength: MAX_WORD_LENGTH })[0];\n}\n\nfunction handleYes(word: string) {\n  try {\n    addWord(word);\n  } catch (e) {\n    console.log(`Failed to add '${word}':`, e.message);\n  }\n}\n\nfunction handleNo(word: string) {\n  try {\n    removeWord(word);\n  } catch (e) {\n    console.log(`Failed to remove '${word}':`, e.message);\n  }\n}\n\n"
            },
            {
                "summary": "From assessments -> lab08_memory -> src -> game.ts: This chunk contains the implementation of functions that handle viewing the dictionary, saving, and loading the game state, as well as the main game loop where user commands are processed and the game is played. It is part of a larger script for a word memory game that allows users to interact with a dictionary of words.",
                "content": "\n\nfunction handleViewDictionary() {\n  try {\n    console.log(viewDictionary());\n  } catch (e) {\n    console.log('Failed to view dictionary:', e.message);\n  }\n}\n\nfunction handleSave(name: string) {\n  try {\n    saveGame(name);\n    console.log(`Saving file memory_${name}.json`);\n  } catch (e) {\n    console.log(`Failed to save game ${name}:`, e.message);\n  }\n}\n\nfunction handleLoad(name: string) {\n  try {\n    loadGame(name);\n    console.log(`Loading file memory_${name}.json`);\n  } catch (e) {\n    console.log(`Failed to load game ${name}:`, e.message);\n  }\n}\n\nfunction playGame() {\n  const prompt = promptSync();\n  console.log('^_^ Welcome to Memory 101! ^_^');\n  console.log(\"Type 'help' to see the list of available commands!\");\n  console.log();\n\n  let word = getRandomWord();\n  while (true) {\n    let getNextWord = false;\n\n    const info = getGameInfo();\n    const face = info.mistakesRemaining > 0 ? '^_^' : 'T_T';\n\n    console.log(`[${face}] Add '${word}' to dictionary?`);\n    const input = prompt('>>> command: ');\n\n    const [command, ...args] = input ? input.split(' ') : [null];\n\n    if (['h', 'help'].includes(command)) {\n      handleHelp();\n    } else if (['i', 'info'].includes(command)) {\n      console.log(info);\n    } else if (['v', 'view'].includes(command)) {\n      handleViewDictionary();\n    } else if (['y', 'yes'].includes(command)) {\n      handleYes(word);\n      getNextWord = true;\n    } else if (['n', 'no'].includes(command)) {\n      handleNo(word);\n      getNextWord = true;\n    } else if (['r', 'reset'].includes(command)) {\n      console.log('Resetting game...');\n      resetGame();\n    } else if (['q', 'quit', null].includes(command)) {\n      break;\n    } else if (['s', 'save'].includes(command)) {\n      handleSave(args[0] ? args[0] : '');\n    } else if (['l', 'load'].includes(command)) {\n      handleLoad(args[0] ? args[0] : '');\n    } else if (['c', 'clear'].includes(command)) {\n      console.clear();\n    } else {\n      console.log(`Unknown command '${command}'. Try 'help' or 'quit'!`);\n    }\n\n    if (getNextWord) {\n      word = getRandomWord();\n    }\n    console.log();\n  }\n\n  console.log('... Exiting. Thanks for playing!');\n}\n\n/**\n * Launch the game! ^_^\n */\nplayGame();"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_memory\\src\\memory.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_memory -> src -> memory.test.ts: This chunk is a set of unit tests for a game-related module that manages a word dictionary, including functions to add and remove words, reset the game state, and handle saved game files. It includes test cases for the `addWord` and `removeWord` functions, as well as setup and teardown procedures to ensure a clean testing environment.",
                "content": "import fs from 'fs';\n\nimport {\n  getGameInfo,\n  addWord,\n  removeWord,\n  viewDictionary,\n  resetGame,\n  loadGame,\n  saveGame,\n} from './memory';\n\ntest('Remove this test and uncomment the tests below', () => {\n  expect(1 + 1).toStrictEqual(2);\n});\n\n/*\n\nconst PRINT_DELETED_FILENAME_FOR_DEBUGGING = true;\n\n// Helper function to remove all memory_[NAME].json files in\n// the current directory.\nfunction removeSavedGames() {\n  fs.readdirSync('./')\n    .filter(file => /^memory_[a-zA-Z0-9]+\\.json$/.test(file))\n    .forEach(file => {\n      if (PRINT_DELETED_FILENAME_FOR_DEBUGGING) {\n        console.log(`REMOVING FILE: ${file}`)\n      }\n      fs.unlinkSync('./' + file);\n    });\n}\n\nfunction clear() {\n  removeSavedGames();\n  resetGame();\n}\n\nbeforeAll(() => {\n  clear();\n});\n\nafterEach(() => {\n  clear();\n});\n\ndescribe('addWord', () => {\n  test('adding the same word twice', () => {\n    expect(() => addWord('hello')).not.toThrow(Error);\n    expect(() => addWord('hello')).toThrow(Error);\n  });\n\n  // TODO: more tests\n});\n\ndescribe('removeWord', () => {\n  test('No such word', () => {\n    expect(() => removeWord('hello')).toThrow(Error);\n  });\n\n  test('Double remove', () => {\n    addWord('hello');\n    expect(() => removeWord('hello')).not.toThrow(Error);\n    expect(() => removeWord('hello')).toThrow(Error);\n  });\n\n  // TODO: more tests\n});\n\n// TODO: your other tests here\n\n*/\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_memory\\src\\memory.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_memory -> src -> memory.ts: This chunk is a TypeScript module defining a game interface and several functions for managing game state, including adding and removing words, viewing the dictionary, and saving/loading game states. It includes placeholders for implementation and error handling, indicating that the functions are not yet fully developed.",
                "content": "/**\n/* Note:\n/* - You should *not* need use try/catch in this file - your tests should instead expect an error to be thrown.\n/* - The use of try/catch is demonstrated in the file src/game.ts\n/*\n */\nimport fs from 'fs';\n\ninterface Game {\n  score: number;\n  mistakesRemaining: number;\n  cluesRemaining: number;\n  dictionary: string[];\n}\n\nconst currentGame: Game = {\n  score: 0,\n  mistakesRemaining: 3,\n  cluesRemaining: 5,\n  dictionary: [],\n};\n\n// Note: key \"dictionary\" is NOT returned in this function.\nexport function getGameInfo() {\n  // FIXME\n  console.log('WARNING getGameInfo is not implemented!');\n  return {\n    score: -1,\n    mistakesRemaining: -1,\n    cluesRemaining: -1,\n  };\n}\n\nexport function addWord(word: string) {\n  // FIXME\n  throw new Error('addWord is not implemented!');\n}\n\nexport function removeWord(word: string) {\n  // FIXME\n  throw new Error('removeWord is not implemented!');\n}\n\nexport function viewDictionary() {\n  // FIXME\n  throw new Error('viewDictionary is not implemented!');\n}\n\nexport function resetGame() {\n  // FIXME\n  console.log('WARNING: resetGame is not implemented!');\n}\n\nexport function saveGame(name: string) {\n  // FIXME\n  throw new Error('saveGame is not implemented!');\n}\n\nexport function loadGame(name: string) {\n  // FIXME\n  throw new Error('loadGame is not implemented!');\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_objection\\.eslintrc.json",
        "chunks": [
            {
                "summary": "From assessments -> lab08_objection -> .eslintrc.json: The chunk represents the complete ESLint configuration for a TypeScript project, specifying parser options, environment settings, global variables, and a comprehensive set of linting rules to enforce code quality and consistency.",
                "content": "{\n  \"ignorePatterns\": [\"build\"],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\n    \"@typescript-eslint\",\n    \"jest\"\n  ],\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2022,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n  \"env\": {\n    \"es2021\": true,\n    \"node\": true,\n    \"jest\": true\n  },\n  \"globals\": {\n    \"document\": \"readonly\",\n    \"navigator\": \"readonly\",\n    \"window\": \"readonly\"\n  },\n  \"rules\": {\n    \"no-unused-vars\": \"off\",\n    \"@typescript-eslint/no-unused-vars\": [\"error\", {\n      \"args\": \"none\",\n      \"caughtErrors\": \"none\",\n      \"ignoreRestSiblings\": true,\n      \"vars\": \"all\"\n    }],\n    \n    // Everything below here is standard 1531\n\n    \"@typescript-eslint/no-var-requires\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n \n    \"no-var\": \"warn\",\n    \"object-shorthand\": 0, // [\"warn\", \"properties\"],\n\n    \"accessor-pairs\": [\"error\", { \"setWithoutGet\": true, \"enforceForClassMembers\": true }],\n    \"array-bracket-spacing\": [\"error\", \"never\"],\n    \"array-callback-return\": [\"error\", {\n      \"allowImplicit\": false,\n      \"checkForEach\": false\n    }],\n    \"arrow-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"block-spacing\": [\"error\", \"always\"],\n    \"brace-style\": [\"error\", \"1tbs\", { \"allowSingleLine\": true }],\n    \"camelcase\": [\"error\", {\n      \"allow\": [\"^UNSAFE_\"],\n      \"properties\": \"never\",\n      \"ignoreGlobals\": true,\n      \"ignoreDestructuring\": true\n    }],\n    \"comma-dangle\": [\"error\", {\n      \"arrays\": \"only-multiline\",\n      \"objects\": \"only-multiline\",\n      \"imports\": \"only-multiline\",\n      \"exports\": \"only-multiline\",\n      \"functions\": \"never\"\n    }],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"comma-style\": [\"error\", \"last\"],\n    \"computed-property-spacing\": [\"error\", \"never\", { \"enforceForClassMembers\": true }],\n    \"constructor-super\": \"error\",\n    \"curly\": [\"error\", \"multi-line\"],\n    \"default-case-last\": \"error\",\n    \"dot-location\": [\"error\", \"property\"],\n    \"dot-notation\": [\"error\", { \"allowKeywords\": true }],\n    \"eol-last\": \"error\",\n    \"eqeqeq\": [\"error\", \"always\", { \"null\": \"ignore\" }],\n    \"func-call-spacing\": [\"error\", \"never\"],\n    \"generator-star-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"indent\": [\"error\", 2, {\n      \"SwitchCase\": 1,\n      \"VariableDeclarator\": 1,\n      \"outerIIFEBody\": 1,\n      \"MemberExpression\": 1,\n      \"FunctionDeclaration\": { \"parameters\": 1, \"body\": 1 },\n      \"FunctionExpression\": { \"parameters\": 1, \"body\": 1 },\n      \"CallExpression\": { \"arguments\": 1 },\n      \"ArrayExpression\": 1,\n      \"ObjectExpression\": 1,\n      \"ImportDeclaration\": 1,\n      \"flatTernaryExpressions\": false,\n      \"ignoreComments\": false,\n      \"ignoredNodes\": [\"TemplateLiteral *\", \"JSXElement\", \"JSXElement > *\", \"JSXAttribute\", \"JSXIdentifier\", \"JSXNamespacedName\", \"JSXMemberExpression\", \"JSXSpreadAttribute\", \"JSXExpressionContainer\", \"JSXOpeningElement\", \"JSXClosingElement\", \"JSXFragment\", \"JSXOpeningFragment\", \"JSXClosingFragment\", \"JSXText\", \"JSXEmptyExpression\", \"JSXSpreadChild\"],\n      \"offsetTernaryExpressions\": true\n    }],\n    \"key-spacing\": [\"error\", { \"beforeColon\": false, \"afterColon\": true }],\n    \"keyword-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"lines-between-class-members\": [\"error\", \"always\", { \"exceptAfterSingleLine\": true }],\n    \"multiline-ternary\": [\"error\", \"always-multiline\"],\n    \"new-cap\": [\"error\", { \"newIsCap\": true, \"capIsNew\": false, \"properties\": true }],\n    \"new-parens\": \"error\",\n    \"no-array-constructor\": \"error\",\n    \"no-async-promise-executor\": \"error\",\n    \"no-caller\": \"error\",\n    \"no-case-declarations\": \"error\",\n    \"no-class-assign\": \"error\",\n    \"no-compare-neg-zero\": \"error\",\n    \"no-cond-assign\": \"error\",\n    \"no-const-assign\": \"error\",\n    \"no-constant-condition\": [\"error\", { \"checkLoops\": false }],\n    \"no-control-regex\": \"error\",\n    \"no-debugger\": \"error\",\n    \"no-delete-var\": \"error\",\n    \"no-dupe-args\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-duplicate-case\": \"error\",\n    \"no-useless-backreference\": \"error\",\n    \"no-empty\": [\"error\", { \"allowEmptyCatch\": true }],\n    \"no-empty-character-class\": \"error\",\n    \"no-empty-pattern\": \"error\",\n    \"no-eval\": \"error\",\n    \"no-ex-assign\": \"error\",\n    \"no-extend-native\": \"error\",\n    \"no-extra-bind\": \"error\",\n    \"no-extra-boolean-cast\": \"error\",\n    \"no-extra-parens\": [\"error\", \"functions\"],\n    \"no-fallthrough\": \"error\",\n    \"no-floating-decimal\": \"error\",\n    \"no-func-assign\": \"error\",\n    \"no-global-assign\": \"error\",\n    \"no-implied-eval\": \"error\",\n    \"no-import-assign\": \"error\",\n    \"no-invalid-regexp\": \"error\",\n    \"no-irregular-whitespace\": \"error\",\n    \"no-iterator\": \"error\",\n    \"no-labels\": [\"error\", { \"allowLoop\": false, \"allowSwitch\": false }],\n    \"no-lone-blocks\": \"error\",\n    \"no-loss-of-precision\": \"error\",\n    \"no-misleading-character-class\": \"error\",\n    \"no-prototype-builtins\": \"error\",\n    \"no-useless-catch\": \"error\",\n    \"no-mixed-operators\": [\"error\", {\n      \"groups\": [\n        [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n        [\"&&\", \"||\"],\n        [\"in\", \"instanceof\"]\n      ],\n      \"allowSamePrecedence\": true\n    }],\n    \"no-mixed-spaces-and-tabs\": \"error\",\n    \"no-multi-spaces\": \"error\",\n    \"no-multi-str\": \"error\",\n    \"no-multiple-empty-lines\": [\"error\", { \"max\": 1, \"maxEOF\": 0 }],\n    \"no-new\": \"error\",\n    \"no-new-func\": \"error\",\n    \"no-new-object\": \"error\",\n    \"no-new-symbol\": \"error\",\n    \"no-new-wrappers\": \"error\",\n    \"no-obj-calls\": \"error\",\n    \"no-octal\": \"error\",\n    \"no-octal-escape\": \"error\",\n    \"no-proto\": \"error\",\n    \"no-redeclare\": [\"error\", { \"builtinGlobals\": false }],\n    \"no-regex-spaces\": \"error\",\n    \"no-return-assign\": [\"error\", \"except-parens\"],\n    \"no-self-assign\": [\"error\", { \"props\": true }],\n    \"no-self-compare\": \"error\",\n    \"no-sequences\": \"error\",\n    \"no-shadow-restricted-names\": \"error\",\n    \"no-sparse-arrays\": \"error\",\n    \"no-tabs\": \"error\",\n    \"no-template-curly-in-string\": \"error\",\n    \"no-this-before-super\": \"error\",\n    \"no-throw-literal\": \"error\",\n    \"no-trailing-spaces\": \"error\",\n    \"no-undef\": \"error\",\n    \"no-undef-init\": \"error\",\n    \"no-unexpected-multiline\": \"error\",\n    \"no-unmodified-loop-condition\": \"error\",\n    \"no-unneeded-ternary\": [\"error\", { \"defaultAssignment\": false }],\n    \"no-unreachable\": \"error\",\n    \"no-unreachable-loop\": \"error\",\n    \"no-unsafe-finally\": \"error\",\n    \"no-unsafe-negation\": \"error\",\n    \"no-unused-expressions\": [\"error\", {\n      \"allowShortCircuit\": true,\n      \"allowTernary\": true,\n      \"allowTaggedTemplates\": true\n    }],\n    \n    \"no-use-before-define\": [\"error\", { \"functions\": false, \"classes\": false, \"variables\": false }],\n    \"no-useless-call\": \"error\",\n    \"no-useless-computed-key\": \"error\",\n    \"no-useless-constructor\": \"error\",\n    \"no-useless-escape\": \"error\",\n    \"no-useless-rename\": \"error\",\n    \"no-useless-return\": \"error\",\n    \"no-void\": \"error\",\n    \"no-whitespace-before-property\": \"error\",\n    \"no-with\": \"error\",\n    \"object-curly-newline\": [\"error\", { \"multiline\": true, \"consistent\": true }],\n    \"object-curly-spacing\": [\"error\", \"always\"],\n    \"object-property-newline\": [\"error\", { \"allowMultiplePropertiesPerLine\": true }],\n    \"one-var\": [\"error\", { \"initialized\": \"never\" }],\n    \"operator-linebreak\": [\"error\", \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\", \"|>\": \"before\" } }],\n    \"padded-blocks\": [\"error\", { \"blocks\": \"never\", \"switches\": \"never\", \"classes\": \"never\" }],\n    \"prefer-const\": [\"error\", {\"destructuring\": \"all\"}],\n    \"prefer-promise-reject-errors\": \"error\",\n    \"prefer-regex-literals\": [\"error\", { \"disallowRedundantWrapping\": true }],\n    \"quote-props\": [\"error\", \"as-needed\"],\n    \"quotes\": [\"error\", \"single\", { \"avoidEscape\": true, \"allowTemplateLiterals\": false }],\n    \"rest-spread-spacing\": [\"error\", \"never\"],\n    \"semi\": [2, \"always\"],\n    \"semi-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"space-before-blocks\": [\"error\", \"always\"],\n    \"space-before-function-paren\": [\"off\"],\n    \"space-in-parens\": [\"error\", \"never\"],\n    \"space-infix-ops\": \"error\",\n    \"space-unary-ops\": [\"error\", { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [\"error\", \"always\", {\n      \"line\": { \"markers\": [\"*package\", \"!\", \"/\", \",\", \"=\"] },\n      \"block\": { \"balanced\": true, \"markers\": [\"*package\", \"!\", \",\", \":\", \"::\", \"flow-include\"], \"exceptions\": [\"*\"] }\n    }],\n    \"symbol-description\": \"error\",\n    \"template-curly-spacing\": [\"error\", \"never\"],\n    \"template-tag-spacing\": [\"error\", \"never\"],\n    \"unicode-bom\": [\"error\", \"never\"],\n    \"use-isnan\": [\"error\", {\n      \"enforceForSwitchCase\": true,\n      \"enforceForIndexOf\": true\n    }],\n    \"valid-typeof\": [\"error\", { \"requireStringLiterals\": true }],\n    \"wrap-iife\": [\"error\", \"any\", { \"functionPrototypeMethods\": true }],\n    \"yield-star-spacing\": [\"error\", \"both\"],\n    \"yoda\": [\"error\", \"never\"]\n  }\n}"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_objection\\.gitlab-ci.yml",
        "chunks": [
            {
                "summary": "From assessments -> lab08_objection -> .gitlab-ci.yml: This chunk represents a GitLab CI/CD configuration file that defines stages for automated checks, including testing and linting, specifically for the master branch.",
                "content": "image: comp1531/automarking:latest\n\nstages:\n  - checks\n    \nbefore_script:\n  - echo \"This message is echoed at the very start!\"\n\ntesting:\n  stage: checks\n  script:\n    - echo 'Add testing here'\n    - echo 'echo!'\n  only:\n   - master\n\nlinting:\n  stage: checks\n  script:\n    - echo 'Add linting here'\n    - echo \"echo 'echo!'\"\n  only:\n   - master\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_objection\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab08_objection -> package.json: The chunk represents the package.json configuration for a TypeScript project named \"lab08_objection,\" detailing its version, main entry point, scripts, keywords, author, license, and development dependencies.",
                "content": "{\n  \"name\": \"lab08_objection\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/objection.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.12\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.20.0\",\n    \"@typescript-eslint/parser\": \"^6.20.0\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-plugin-jest\": \"^27.6.3\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^5.3.3\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_objection\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab08_objection -> README.md: This chunk serves as the introduction to a lab assignment focused on automating the objection process in legal examinations, outlining the due date, background information, and rationale for the task at hand. It also provides initial instructions for getting started with the lab.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-3%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-yes-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-yes-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 9 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n# Background\n\n## Disclaimer\n\nThe information below is greatly simplified for this lab and could be inaccurate. This lab is only on the theme of law, not about law.\n\nYou do not need to understand anything about law to complete this lab.\n\n## Rationale\n\nIn court, a witness can usually be subjected to two kinds of examinations:\n\n1. Direct-Examination - where the witness is questioned by the party to give evidence in support of the case being made.\n1. Cross-Examination - where the witness is questioned by the opposing party to challenge or extend the testimony already given.\n\nAs a lawyer, you can make objections. This is a way to protest to the judge against accepting\n\n- a testimony,\n- a piece of evidence, or\n- a question from the opposing lawyer to your witness\n\nwhich you consider in violation of court rules. \n\nWith a large set of [Objection Items](#objection-items) to cover, our goal is to automate the process while ensuring that all of our code is accounted for when testing.\n\nNow, you can do this by pretending to be a machine and manually stepping through each line of code, potentially adding a few `console.log()` statements under certain branch conditions - to which our reaction would be \"surely you jest!\", because why do that when you can use the almighty `--coverage`!\n\n## Getting Started\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine. \n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab.\n"
            },
            {
                "summary": "From assessments -> lab08_objection -> README.md: This chunk provides instructions for package installation and outlines the interface for functions related to analyzing objections in a legal context, including the parameters, return types, and potential errors for the `listObjections` function, as well as the data types used in the implementation.",
                "content": "## Package Installation\n\n1. Open [package.json](package.json) and look at existing packages in `\"dependencies\"` and `\"devDependencies\"`. Install them with:\n    ```shell\n    $ npm install # shortcut: npm i\n    ```\n\n1. Under `\"scripts\"`, add `jest` to your test with the special option `\"--coverage\"`:\n    ```json\n    \"scripts\": {\n      \"test\": \"jest --coverage\",\n      \"tsc\": \"tsc --noEmit\",\n      \"ts-node\": \"ts-node\",\n      \"lint\": \"eslint '**/*.ts'\"\n      // Any other scripts you want\n    }\n    ```\n\n1. (Optional) Update [.gitlab-ci.yml](.gitlab-ci.yml) with testing and linting.\n\n1. That's it. You're good to go :).\n\n## Interface: Functions\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th>Parameters</th>\n    <th>Return Type</th>\n    <th>Errors</th>\n  </tr>\n  <tr>\n    <td>\n        <code>listObjections</code>\n        <br/><br/>\n        Analyse the given question and testimony before returning a Set of Objection Items (see further below).\n        <br/><br/><b>Difficulty</b>: \u2b50\u2b50\n    </td>\n    <td>\n<pre>\n(\n  question: string,\n  testimony: string,\n  examinationType: ExaminationType\n)\n</pre>\n    </td>\n    <td>\n        <code>Set&lt;Objection&gt;</code>\n    </td>\n    <td>\n        Throw <code>Error</code> when\n        <ul>\n          <li>The question is an empty string, <code>''</code></li>\n          <li>The testimony is an empty string, <code>''</code></li>\n        </ul>\n    </td>\n  </tr>\n</table>\n\n## Interface: Data Types\n\n<table>\n  <tr>\n    <th>Enum</th>\n    <th>Members</th>\n  </tr>\n  <tr>\n    <td>\n        <code>Objection</code>\n    </td>\n    <td>\n<pre>\nARGUMENTATIVE\nCOMPOUND\nHEARSAY\nLEADING\nNON_RESPONSIVE\nRELEVANCE\nSPECULATION\n</pre>\n    </td>\n  </tr>\n  <tr>\n    <td>\n        <code>ExaminationType</code>\n    </td>\n    <td>\n<pre>\nCROSS\nDIRECT\n</pre>\n    </td>\n  </tr>\n</table>\n\nExamples of how JavaScript [Sets](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) and TypeScript [Enums](https://www.typescriptlang.org/docs/handbook/enums.html) can be used are in the starter code of [src/objection.ts](src/objection.ts), although you are recommended to do further reading.\n\nIn this lab, we don't specify the enum types, so you are free to change the default as long as all the members in the table above exist in [src/objection.ts](src/objection.ts).\n"
            },
            {
                "summary": "From assessments -> lab08_objection -> README.md: This chunk outlines the specific criteria for various types of objections that can be raised during court examinations, detailing how each objection is determined based on the characteristics of questions and testimonies. It serves as a foundational guideline for implementing the functionality in the lab's coding task.",
                "content": "## Objection Items\n\nThe link below contains a list of common objections in a court case:\n- https://www.womenslaw.org/laws/preparing-court-yourself/hearing/objecting-evidence\n\nFor this lab, we will use a subset of the above with *our* crude criteria for when a question or testimony should be objected to. \nYou can interpret them as literally as posibble when translating to code.\n\n1. ARGUMENTATIVE\n    - Only valid during `CROSS` Examination\n        - When a `question` does not end with a question mark (?)\n1. COMPOUND\n    - When a `question` contains more than one question mark (?)\n1. HEARSAY\n    - When a `testimony` contains any of the phrases (i.e. includes any of the substrings) below:\n        - \"heard from\"\n        - \"told me\"\n1. LEADING\n    - Only valid during `DIRECT` Examination, when any of:\n        - `question` starts with \"why did you\" or \"do you agree\"\n        - `question` ends with \"right?\" or \"correct?\"\n1. NON_RESPONSIVE\n    - When the `testimony` does not contain any word from the `question`.\n    - NOTE: \n        - you may want to first remove all characters that are not letters, numbers or spaces from the `testimony` and `question`\n        - For simplicity, you can assume that words are split by white spaces (/\\s/) and must have a length of at least 1 character\n        - For this critera, words are exact-match, i.e. \"hell\" and \"hello\" are not the same.\n1. RELEVANCE\n    - When the length of the `testimony` is strictly greater than thrice (3x) the length of the `question`.\n      - By length, we are referring to the length of the string, i.e. `testimony.length` and `3 * question.length`, rather than the number of words\n1. SPECULATION\n    - During `DIRECT` examination\n        - The `testimony` contains the word \"think\" (i.e. includes the substring \"think\")\n    - During `CROSS` examination\n        - The `question` contains the word \"think\" (i.e includes the substring \"think\")\n\n### Note\n1. The question and testimony are case-insensitive - in [src/objection.ts](src/objection.ts), we have added the two lines below for you so that both strings can be treated as lowercase:\n    ```javascript\n    question = question.toLowerCase();\n    testimony = testimony.toLowerCase();\n    ```\n1. Treat white spaces as regular characters. For example, the string \n    - `\"heard from\"` is hearsay, but\n    - `\"heard   from\"` is **not** hearsay.\n1. Testimonies and questions can have no objections or multiple objections - this is why the returned type is a Set.\n1. Our automarking will assess the general (basic) scenarios for each objection. If you were able to come up with an obscure/ambiguous case such as \"should words be matched in non-responsive after punctuations are removed\" (i.e. \"original\" vs \"ori$$$ginal\"), you can be assured that these won't be assessed.\n"
            },
            {
                "summary": "From assessments -> lab08_objection -> README.md: This chunk outlines the tasks and requirements for testing and implementing functions related to objection handling in a legal context, as part of a lab assignment. It includes instructions for writing tests, running them, achieving code coverage, and submitting the work, along with a sample `package.json` for project setup.",
                "content": "# Task\n\n## Testing\n\nSame with previous lab exercises, you are to write tests for the functions defined in the [Interface: Functions](#interface-functions). Try to cover as many different cases as you can.\n\nSee [objection.test.js](objection.test.js) for an example of how you can test for errors being raised in your functions.\n\n## Implementation\n\nImplement the functions in [Interface: Functions](#interface-functions) and ensure that they pass your tests.\n\nAfter the command:\n```shell\n$ npm t\n```\na directory named [coverage](coverage) should be generated. \n\nThere should be a file called `index.html` (in the path `coverage/lcov-report/index.html`) which you can open in your preferred browser (e.g. Firefox / Google Chrome). This will display further details about which line or branch of code in your implementation is not currently covered by your tests.\n\nRemove redundant code or improve your test suite as necessary to achieve 100% coverage.\n\n# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n\n# Additional Information\n\n## Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary><br/>\n\n**Note**: \n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n\n```json\n{\n  \"name\": \"lab08_objection\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/objection.ts\",\n  \"scripts\": {\n    \"test\": \"jest --coverage\",\n    \"tsc\": \"tsc --noEmit\",\n    \"ts-node\": \"ts-node\",\n    \"lint\": \"eslint src/**.ts\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^27.5.1\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.23.0\",\n    \"@typescript-eslint/parser\": \"^5.23.0\",\n    \"eslint\": \"^8.15.0\",\n    \"eslint-plugin-jest\": \"^26.2.1\",\n    \"jest\": \"^28.1.0\",\n    \"ts-jest\": \"^28.0.2\",\n    \"ts-node\": \"^10.7.0\",\n    \"typescript\": \"^4.6.4\"\n  }\n}\n```\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_objection\\src\\objection.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_objection -> src -> objection.test.ts: The chunk is part of a test suite for evaluating the functionality of the `listObjections` function, which determines the types of objections based on given questions, testimonies, and examination types in a legal context. It includes a placeholder test and a commented-out section that outlines specific argumentative cases to be tested.",
                "content": "import { listObjections, Objection, ExaminationType } from './objection';\n\ntest('Remove this test and uncomment the tests below', () => {\n  expect(1 + 1).toBe(2);\n});\n\n/*\n\ndescribe('argumentative cases', () => {\n  test.each([\n    {\n      question: 'You are totally lying!',\n      testimony: 'No you!',\n      type: ExaminationType.CROSS,\n      objections: new Set([Objection.ARGUMENTATIVE]),\n    },\n    {\n      question: 'This is direct, yes!',\n      testimony: 'Yes, so not argumentative!',\n      type: ExaminationType.DIRECT,\n      objections: new Set([]),\n    },\n  ])('$objections', ({ question, testimony, type, objections }) => {\n    expect(listObjections(question, testimony, type)).toEqual(objections);\n  });\n});\n\n*/\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_objection\\src\\objection.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_objection -> src -> objection.ts: This chunk defines two enums, `Objection` and `ExaminationType`, and includes a helper function `isArgumentative` along with the main function `getObjections`, which analyzes a question and testimony to determine applicable objections based on the type of examination (cross or direct). It serves as part of a legal or courtroom simulation tool for evaluating the validity of questions during testimony.",
                "content": "export enum Objection {\n  /**\n  * By default, enum are integers 0, 1, 2, ...\n  * However, we can also give them string values\n  */\n  ARGUMENTATIVE = 'argumentative',\n  COMPOUND = 'compound',\n  HEARSAY = 'hearsay',\n  LEADING = 'leading',\n  NON_RESPONSIVE = 'non-responsive',\n  RELEVANCE = 'relevance',\n  SPECULATION = 'speculation',\n}\n\nexport enum ExaminationType {\n  /**\n    * It is also possible to specify a \"start\" number.\n    *\n    * Below would assign CROSS = 1, DIRECT = 2, the next\n    * would be 3, etc.\n    */\n  CROSS = 1,\n  DIRECT,\n}\n\n// Helper function - feel free to remove / modify.\nfunction isArgumentative(question: string) {\n  return !question.endsWith('?');\n}\n\n/**\n * Feel free to modify the function below as you see fit,\n * so long as you satisfy the specification.\n */\nexport function getObjections(\n  question: string,\n  testimony: string,\n  examinationType: ExaminationType\n): Set<Objection> {\n  // TODO: error handling\n\n  // Convert given question and testimony to lowercase\n  question = question.toLowerCase();\n  testimony = testimony.toLowerCase();\n\n  const objections = new Set<Objection>();\n\n  if (examinationType === ExaminationType.CROSS) {\n    if (isArgumentative(question)) {\n      objections.add(Objection.ARGUMENTATIVE);\n    }\n\n    // TODO\n  } else {\n    // Type is ExaminationType.DIRECT\n\n    // TODO\n  }\n\n  // TODO\n\n  return objections;\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\.eslintrc.json",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> .eslintrc.json: The chunk represents the configuration settings for ESLint, specifically tailored for a TypeScript project, including parser options, environment settings, global variables, and a comprehensive set of linting rules to enforce code quality and consistency.",
                "content": "{\n  \"ignorePatterns\": [\"build\"],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\n    \"@typescript-eslint\",\n    \"jest\"\n  ],\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2022,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n  \"env\": {\n    \"es2021\": true,\n    \"node\": true,\n    \"jest\": true\n  },\n  \"globals\": {\n    \"document\": \"readonly\",\n    \"navigator\": \"readonly\",\n    \"window\": \"readonly\"\n  },\n  \"rules\": {\n    \"no-unused-vars\": [\"error\", {\n      \"args\": \"none\",\n      \"caughtErrors\": \"none\",\n      \"ignoreRestSiblings\": true,\n      \"vars\": \"all\"\n    }],\n    // Everything below here is standard 1531\n    \"@typescript-eslint/no-var-requires\": 0,\n    \"@typescript-eslint/no-unused-vars\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n    \"no-var\": \"warn\",\n    \"object-shorthand\": 0, // [\"warn\", \"properties\"],\n    \"accessor-pairs\": [\"error\", { \"setWithoutGet\": true, \"enforceForClassMembers\": true }],\n    \"array-bracket-spacing\": [\"error\", \"never\"],\n    \"array-callback-return\": [\"error\", {\n      \"allowImplicit\": false,\n      \"checkForEach\": false\n    }],\n    \"arrow-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"block-spacing\": [\"error\", \"always\"],\n    \"brace-style\": [\"error\", \"1tbs\", { \"allowSingleLine\": true }],\n    \"camelcase\": [\"error\", {\n      \"allow\": [\"^UNSAFE_\"],\n      \"properties\": \"never\",\n      \"ignoreGlobals\": true,\n      \"ignoreDestructuring\": true\n    }],\n    \"comma-dangle\": [\"error\", {\n      \"arrays\": \"only-multiline\",\n      \"objects\": \"only-multiline\",\n      \"imports\": \"only-multiline\",\n      \"exports\": \"only-multiline\",\n      \"functions\": \"never\"\n    }],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"comma-style\": [\"error\", \"last\"],\n    \"computed-property-spacing\": [\"error\", \"never\", { \"enforceForClassMembers\": true }],\n    \"constructor-super\": \"error\",\n    \"curly\": [\"error\", \"multi-line\"],\n    \"default-case-last\": \"error\",\n    \"dot-location\": [\"error\", \"property\"],\n    \"dot-notation\": [\"error\", { \"allowKeywords\": true }],\n    \"eol-last\": \"error\",\n    \"eqeqeq\": [\"error\", \"always\", { \"null\": \"ignore\" }],\n    \"func-call-spacing\": [\"error\", \"never\"],\n    \"generator-star-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"indent\": [\"error\", 2, {\n      \"SwitchCase\": 1,\n      \"VariableDeclarator\": 1,\n      \"outerIIFEBody\": 1,\n      \"MemberExpression\": 1,\n      \"FunctionDeclaration\": { \"parameters\": 1, \"body\": 1 },\n      \"FunctionExpression\": { \"parameters\": 1, \"body\": 1 },\n      \"CallExpression\": { \"arguments\": 1 },\n      \"ArrayExpression\": 1,\n      \"ObjectExpression\": 1,\n      \"ImportDeclaration\": 1,\n      \"flatTernaryExpressions\": false,\n      \"ignoreComments\": false,\n      \"ignoredNodes\": [\"TemplateLiteral *\", \"JSXElement\", \"JSXElement > *\", \"JSXAttribute\", \"JSXIdentifier\", \"JSXNamespacedName\", \"JSXMemberExpression\", \"JSXSpreadAttribute\", \"JSXExpressionContainer\", \"JSXOpeningElement\", \"JSXClosingElement\", \"JSXFragment\", \"JSXOpeningFragment\", \"JSXClosingFragment\", \"JSXText\", \"JSXEmptyExpression\", \"JSXSpreadChild\"],\n      \"offsetTernaryExpressions\": true\n    }],\n    \"key-spacing\": [\"error\", { \"beforeColon\": false, \"afterColon\": true }],\n    \"keyword-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"lines-between-class-members\": [\"error\", \"always\", { \"exceptAfterSingleLine\": true }],\n    \"multiline-ternary\": [\"error\", \"always-multiline\"],\n    \"new-cap\": [\"error\", { \"newIsCap\": true, \"capIsNew\": false, \"properties\": true }],\n    \"new-parens\": \"error\",\n    \"no-array-constructor\": \"error\",\n    \"no-async-promise-executor\": \"error\",\n    \"no-caller\": \"error\",\n    \"no-case-declarations\": \"error\",\n    \"no-class-assign\": \"error\",\n    \"no-compare-neg-zero\": \"error\",\n    \"no-cond-assign\": \"error\",\n    \"no-const-assign\": \"error\",\n    \"no-constant-condition\": [\"error\", { \"checkLoops\": false }],\n    \"no-control-regex\": \"error\",\n    \"no-debugger\": \"error\",\n    \"no-delete-var\": \"error\",\n    \"no-dupe-args\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-duplicate-case\": \"error\",\n    \"no-useless-backreference\": \"error\",\n    \"no-empty\": [\"error\", { \"allowEmptyCatch\": true }],\n    \"no-empty-character-class\": \"error\",\n    \"no-empty-pattern\": \"error\",\n    \"no-eval\": \"error\",\n    \"no-ex-assign\": \"error\",\n    \"no-extend-native\": \"error\",\n    \"no-extra-bind\": \"error\",\n    \"no-extra-boolean-cast\": \"error\",\n    \"no-extra-parens\": [\"error\", \"functions\"],\n    \"no-fallthrough\": \"error\",\n    \"no-floating-decimal\": \"error\",\n    \"no-func-assign\": \"error\",\n    \"no-global-assign\": \"error\",\n    \"no-implied-eval\": \"error\",\n    \"no-import-assign\": \"error\",\n    \"no-invalid-regexp\": \"error\",\n    \"no-irregular-whitespace\": \"error\",\n    \"no-iterator\": \"error\",\n    \"no-labels\": [\"error\", { \"allowLoop\": false, \"allowSwitch\": false }],\n    \"no-lone-blocks\": \"error\",\n    \"no-loss-of-precision\": \"error\",\n    \"no-misleading-character-class\": \"error\",\n    \"no-prototype-builtins\": \"error\",\n    \"no-useless-catch\": \"error\",\n    \"no-mixed-operators\": [\"error\", {\n      \"groups\": [\n        [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n        [\"&&\", \"||\"],\n        [\"in\", \"instanceof\"]\n      ],\n      \"allowSamePrecedence\": true\n    }],\n    \"no-mixed-spaces-and-tabs\": \"error\",\n    \"no-multi-spaces\": \"error\",\n    \"no-multi-str\": \"error\",\n    \"no-multiple-empty-lines\": [\"error\", { \"max\": 1, \"maxEOF\": 0 }],\n    \"no-new\": \"error\",\n    \"no-new-func\": \"error\",\n    \"no-new-object\": \"error\",\n    \"no-new-symbol\": \"error\",\n    \"no-new-wrappers\": \"error\",\n    \"no-obj-calls\": \"error\",\n    \"no-octal\": \"error\",\n    \"no-octal-escape\": \"error\",\n    \"no-proto\": \"error\",\n    \"no-redeclare\": [\"error\", { \"builtinGlobals\": false }],\n    \"no-regex-spaces\": \"error\",\n    \"no-return-assign\": [\"error\", \"except-parens\"],\n    \"no-self-assign\": [\"error\", { \"props\": true }],\n    \"no-self-compare\": \"error\",\n    \"no-sequences\": \"error\",\n    \"no-shadow-restricted-names\": \"error\",\n    \"no-sparse-arrays\": \"error\",\n    \"no-tabs\": \"error\",\n    \"no-template-curly-in-string\": \"error\",\n    \"no-this-before-super\": \"error\",\n    \"no-throw-literal\": \"error\",\n    \"no-trailing-spaces\": \"error\",\n    \"no-undef\": \"error\",\n    \"no-undef-init\": \"error\",\n    \"no-unexpected-multiline\": \"error\",\n    \"no-unmodified-loop-condition\": \"error\",\n    \"no-unneeded-ternary\": [\"error\", { \"defaultAssignment\": false }],\n    \"no-unreachable\": \"error\",\n    \"no-unreachable-loop\": \"error\",\n    \"no-unsafe-finally\": \"error\",\n    \"no-unsafe-negation\": \"error\",\n    \"no-unused-expressions\": [\"error\", {\n      \"allowShortCircuit\": true,\n      \"allowTernary\": true,\n      \"allowTaggedTemplates\": true\n    }],\n    \"no-use-before-define\": [\"error\", { \"functions\": false, \"classes\": false, \"variables\": false }],\n    \"no-useless-call\": \"error\",\n    \"no-useless-computed-key\": \"error\",\n    \"no-useless-constructor\": \"error\",\n    \"no-useless-escape\": \"error\",\n    \"no-useless-rename\": \"error\",\n    \"no-useless-return\": \"error\",\n    \"no-void\": \"error\",\n    \"no-whitespace-before-property\": \"error\",\n    \"no-with\": \"error\",\n    \"object-curly-newline\": [\"error\", { \"multiline\": true, \"consistent\": true }],\n    \"object-curly-spacing\": [\"error\", \"always\"],\n    \"object-property-newline\": [\"error\", { \"allowMultiplePropertiesPerLine\": true }],\n    \"one-var\": [\"error\", { \"initialized\": \"never\" }],\n    \"operator-linebreak\": [\"error\", \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\", \"|>\": \"before\" } }],\n    \"padded-blocks\": [\"error\", { \"blocks\": \"never\", \"switches\": \"never\", \"classes\": \"never\" }],\n    \"prefer-const\": [\"error\", {\"destructuring\": \"all\"}],\n    \"prefer-promise-reject-errors\": \"error\",\n    \"prefer-regex-literals\": [\"error\", { \"disallowRedundantWrapping\": true }],\n    \"quote-props\": [\"error\", \"as-needed\"],\n    \"quotes\": [\"error\", \"single\", { \"avoidEscape\": true, \"allowTemplateLiterals\": false }],\n    \"rest-spread-spacing\": [\"error\", \"never\"],\n    \"semi\": [2, \"always\"],\n    \"semi-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"space-before-blocks\": [\"error\", \"always\"],\n    \"space-before-function-paren\": [\"off\"],\n    \"space-in-parens\": [\"error\", \"never\"],\n    \"space-infix-ops\": \"error\",\n    \"space-unary-ops\": [\"error\", { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [\"error\", \"always\", {\n      \"line\": { \"markers\": [\"*package\", \"!\", \"/\", \",\", \"=\"] },\n      \"block\": { \"balanced\": true, \"markers\": [\"*package\", \"!\", \",\", \":\", \"::\", \"flow-include\"], \"exceptions\": [\"*\"] }\n    }],\n    \"symbol-description\": \"error\",\n    \"template-curly-spacing\": [\"error\", \"never\"],\n    \"template-tag-spacing\": [\"error\", \"never\"],\n    \"unicode-bom\": [\"error\", \"never\"],\n    \"use-isnan\": [\"error\", {\n      \"enforceForSwitchCase\": true,\n      \"enforceForIndexOf\": true\n    }],\n    \"valid-typeof\": [\"error\", { \"requireStringLiterals\": true }],\n    \"wrap-iife\": [\"error\", \"any\", { \"functionPrototypeMethods\": true }],\n    \"yield-star-spacing\": [\"error\", \"both\"],\n    \"yoda\": [\"error\", \"never\"]\n  }\n}"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\.gitlab-ci.yml",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> .gitlab-ci.yml: This chunk is a configuration snippet for a CI/CD pipeline using Docker and GitLab CI, specifically defining the stages, before_script, and testing steps for automated checks in a project repository.",
                "content": "# https://hub.docker.com/repository/docker/comp1531/automarking/general\nimage: comp1531/automarking:latest\n\nstages:\n  - checks\n    \nbefore_script:\n  - echo \"FIXME\"\n  # - npm install\n\ntesting:\n  stage: checks\n  script:\n    - echo \"Uncomment script below once you have updated your package.json\" \n    # - SERVER_LOG=$(mktemp)\n\n    # # Start server in background and capture output in temp file\n    # - npm start &> $SERVER_LOG & pid=$!\n    # - sleep 2\n    # - ps -o pid | egrep -q \"^\\s*${pid}$\" || (cat $SERVER_LOG && exit 1)\n\n    # # Run test then kill server\n    # - npm test || (cat $SERVER_LOG && exit 1)\n    # - sleep 1\n    # - kill -SIGINT %1\n\n    # - cat $SERVER_LOG\n  only:\n    - master\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> package.json: The chunk represents the complete content of a `package.json` file for a Node.js project named \"lab08_snapnews,\" detailing its metadata, dependencies, development dependencies, scripts, and engine requirements.",
                "content": "{\n  \"name\": \"lab08_snapnews\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/server.ts\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/cors\": \"^2.8.17\",\n    \"@types/express\": \"^4.17.21\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/morgan\": \"^1.9.9\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.10.0\",\n    \"@typescript-eslint/parser\": \"^7.10.0\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-plugin-jest\": \"^28.5.0\",\n    \"jest\": \"^29.7.0\",\n    \"slync\": \"^1.0.2\",\n    \"sync-request-curl\": \"^3.0.0\",\n    \"ts-jest\": \"^29.1.3\",\n    \"ts-node\": \"^10.9.2\",\n    \"ts-node-dev\": \"^2.0.0\",\n    \"typescript\": \"^5.4.5\"\n  },\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.19.2\",\n    \"morgan\": \"^1.10.0\"\n  },\n  \"engines\": {\n    \"node\": \"<=20\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> README.md: This chunk provides an introduction and setup instructions for a lab focused on migrating a legacy backend service for Snap News Inc, detailing the requirements for version 2 of their API, including secure token transmission, code testing, and package installation steps.",
                "content": "<div align=\"center\">\n\n![Lab Title](assets/logo.svg)\n\n![Estimated completion time](https://img.shields.io/badge/Estimated%20Time-2.5%20hours-7FFF7F)\n&nbsp;\n![Overall Difficulty](https://img.shields.io/badge/Overall%20Difficulty-\u2b50%20\u2b50-3498DB)\n&nbsp;\n![Code Assessed](https://img.shields.io/badge/Code%20Assessed-yes-darkgreen)\n&nbsp;\n![Eslint Assessed](https://img.shields.io/badge/Style%20Assessed-yes-FFC0CB)\n&nbsp;\n![Test Quality Assessed](https://img.shields.io/badge/Test%20Quality%20Assessed-yes-FEDC56)\n&nbsp;\n\n---\n\n</div>\n\n[TOC]\n\n# Due Date\n\nWeek 9 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney)\n\n# Background\n\n## Rationale\n\nSnap News Inc has a legacy backend service that they use to send announcements (currently on version 1).\n\nThey have reached out to you, a software engineer freelancer, with the following requirements for version 2:\n1. Migrate the existing system to transmit API token (secrets) securely, instead of in query strings\n1. Ensure that all lines of codes in the server infrastructure are fully tested\n1. Automate/schedule the deletion of old announcements\n1. Maintain backwards compatibility with the previous version 1 API as other legacy system still relies on them\n\nIn this lab, we will touch on API versioning, measure server coverage with [nyc](https://github.com/istanbuljs/nyc) instead of the regular `jest --coverage`,\nschedule background tasks with [JavaScript timers](https://nodejs.org/en/learn/asynchronous-work/discover-javascript-timers) and transmit sensitive\ninformation securely in headers.\n\n## Getting Started\n- Please ensure that you have completed lab08_objection prior.\n- Copy the SSH clone link from Gitlab and clone this repository on either VLAB or your local machine.\n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab.\n\n## Package Installation\n\n1. Open [package.json](package.json) and look at existing packages in `\"dependencies\"` and `\"devDependencies\"`. Install them with:\n    ```shell\n    $ npm install\n    ```\n\n1. Install [nyc](https://www.npmjs.com/package/nyc) to measure server coverage:\n    ```shell\n    $ npm install --save-dev nyc\n    ```\n\n1. Open your [package.json](package.json) and add the following scripts:\n    ```json\n    \"scripts\": {\n        \"ts-node\": \"ts-node\",\n        \"ts-node-coverage\": \"nyc --reporter=text --reporter=lcov ts-node\",\n        \"test\": \"jest\",\n        \"tsc\": \"tsc --noEmit\",\n        \"lint\": \"eslint '**/*.ts'\"\n        // Any other scripts you want here\n    }\n    ```\n\n1. Notice in the `ts-node-coverage` script we have added `nyc --reporter=text --reporter=lcov` before running `ts-node`:\n    - `nyc` - to measure our server code coverage.\n    - `--reporter=text` - display coverage results to the terminal when the server closes.\n    - `--reporter=lcov` - also generates a `coverage/lcov-report/index.html` file for us to open in our browser.\n    - Further instructions on server coverage can be found in the [Testing](#testing) section.\n\n1. To check that you have completed the steps correctly, compare your [package.json](package.json) with our sample package.json in the [Additional Information](#additional-information) section.\n\n1. Use `git` to `add`, `commit` and `push` your [package.json](package.json) and [package-lock.json](package-lock.json).\n\n1. (Optional) Update [.gitlab-ci.yml](.gitlab-ci.yml) with testing and linting.\n\n1. (Optional) Bonus Tips: you may find the following scripts helpful:\n    ```json\n    \"start\": \"ts-node src/server.ts\",\n    \"start-dev\": \"ts-node-dev src/server.ts\",\n    \"start-coverage\": \"nyc --reporter=text --reporter=lcov ts-node src/server.ts\",\n    ```\n"
            },
            {
                "summary": "From assessments -> lab08_snapnews -> README.md: This chunk provides detailed instructions on testing and implementing new API endpoints for the Snap News Inc backend service as part of the lab requirements. It outlines the testing process using `nyc` for code coverage, describes the implementation of versioned API endpoints, and emphasizes the importance of maintaining backward compatibility with the existing API.",
                "content": "## Interface\n\nSee [swagger.yaml](swagger.yaml).\n\n# Task\n\n## Testing\n\nA test suite for this lab has been provided to you in [src/snapnews.test.ts](src/snapnews.test.ts).\nWriting additional tests for this lab is not a direct requirement - however, **you must ensure that you have 100% coverage**.\n\nTo test your code and *view the coverage results*, we will need to **measure the coverage on the server side** and not the test side.\nThis is because your tests runs on a separate instance of NodeJS, and has no knowledge of your server implementation.\n\nThe steps for measuring tests on the server side using `nyc` is summarised below:\n\n<table>\n    <tr>\n        <th><b>Terminal 1 - Server</b></th>\n        <th><b>Terminal 2 - Test</b></th>\n    </tr>\n    <tr>\n        <td>\n            Step 1: <code>npm run ts-node-coverage src/server.ts</code>\n            <br/><br/>\n        </td>\n        <td>\n        </td>\n    </tr>\n    <tr>\n        <td>\n        </td>\n        <td>\n            Step 2: <code>npm test</code>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            Step 3: <code>Ctrl+C</code> to close the server. Brief coverage details should be displayed.\n        </td>\n        <td>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            Step 4: Open <code>coverage/lcov-report/index.html</code> in a browser (e.g. Firefox/Google Chrome)\n        </td>\n        <td>\n        </td>\n    </tr>\n</table>\n\n### TIP\n- Step 4 only needs to be done once, you can refresh the `index.html` page after repeating steps 1-3 to get updated results.\n\n## Implementation\n\nLook through the following files:\n- [src/dataStore.ts](src/dataStore.ts) (completed)\n- [src/auth.ts](src/auth.ts) (completed)\n- [src/snapnews.ts](src/snapnews.ts) (partially completed)\n- [src/server.ts](src/server.ts) (partially completed)\n\n### Tasks\n\n### Task 1: Adding v2 API endpoints\n\nWhen the input or output of an existing route changes, it is good practice to release them under a new version prefix, e.g.\n- from: `/v1/announcements/create`\n- to: `/v2/announcements/create`\nThis will allow other services/application that relies on the `/v1` route to behave as expected, and other developers can slowly migrate to using your new version.\n\nWith Snap News, the change we want to make is to fix a vulnerability with the `lab08snapnewstoken` being sent in the `query` string\nfor `GET` and `DELETE` requests. This is bad practice since query strings are visible when requests are logged. It is more secure\nto place the token inside the request **`headers`** when sending them to the server.\n\nFor consistency, we will also move the `lab08snapnewstoken` from `body` to **`headers`** in any `PUT` or `POST` routes.\n\nIn [src/server.ts](src/server.ts), implement all /v2/ routes from [swagger.yaml](swagger.yaml). Similar to `query` and `body`, you\ncan extract values from the request headers as follows\n```ts\napp.post('/v2/announcements/create', (req: Request, res: Response) => {\n  const lab08snapnewstoken = req.headers.lab08snapnewstoken as string;\n  // ...\n});\n```\n\nNote that your application must still support all old `/v1` routes (i.e. all old tests should still pass).\n"
            },
            {
                "summary": "From assessments -> lab08_snapnews -> README.md: This chunk is part of the implementation tasks for the Snap News Inc project, specifically focusing on adding new API routes for scheduling announcements in the legacy backend service. It outlines the requirements for handling `DELETE` and `POST` requests related to announcement scheduling, as well as the necessary considerations for using timers in the Node.js environment to ensure server stability.",
                "content": "### Task 2:\n\nIn [src/server.ts](src/server.ts) and [src/snapnews.ts](src/snapnews.ts), implement the logic for the following new routes:\n- `DELETE` `/v1/announcements/{announcementid}/schedule`\n- `POST` `/v1/announcements/{announcementid}/schedule/abort`\n\nIf you are using `setTimeout` in the implementation, please note that you will also need to update `/v1/clear` to call\n`clearTimeout` on all existing timers. See the `clear()` function in [src/snapnews.ts](src/snapnews.ts) further notes\non Task 2. The version should remain as `/v1` for `/v1/clear` because there is no changes to the input or output of\nthe API (only the underlying logic changes).\n\n#### Schedule and Timer (setTimeout, clearTimeout)\n\nOne way to tackle this problem is to use the [setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout)\nand [clearTimeout](https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout) global functions.\n\nThe guides and documentation for setTimeout in NodeJS is available below:\n- https://nodejs.org/en/learn/asynchronous-work/discover-javascript-timers#settimeout\n- https://nodejs.org/api/timers.html#settimeoutcallback-delay-args\n\nIf you need to specify a type for the returned value of `setTimeout`, we recommend using `ReturnType<typeof setTimeout>` instead of `NodeJS.Timeout`. For example,\n\n```typescript\nconst myTimeout: ReturnType<typeof setTimeout> = setTimeout(() => {\n  console.log('Printing message after 3 seconds!');\n}, 3000);\nconsole.log('This prints first, and then...');\n```\n\nThis is because the return type differs depending on whether we are using JavaScript in a browser or NodeJS.\n\nMoreover, it is very important that we handle all errors in the setTimeout callback. This is because we have\nset up our server to be Synchronous in COMP1531, so any exceptions thrown in a callback of setTimeout will\ncrash (stop) the server completely. An example of how we can handle errors inside our callback function is\nshown below:\n\n```typescript\nconst timer = setTimeout(() => {\n  try {\n    performActionThatMayThrowException();\n  } catch {\n    // Catch and handle error/exception silently and gracefully.\n    console.log(`Handle error gracefully to avoid crashing server`);\n  }\n}, 2 * 1000);\n```\n"
            },
            {
                "summary": "From assessments -> lab08_snapnews -> README.md: This chunk provides important guidelines on error handling within callback functions used in `setTimeout`, emphasizing the need to prevent server crashes due to unhandled exceptions. It is situated within the implementation section of the document, specifically addressing best practices for managing asynchronous operations in the context of the Snap News API development.",
                "content": "#### Curl code 7 (Server Crash)\n\n**Important**: ensure that any code you write inside a function being passed into `setTimeout` as the argument does not throw any error, or has the potential to cause any error (e.g. TypeError, illegal index, accessing propertites of `undefined`), etc.\n\nThis is because, in simple terms, `setTimeout` runs the callback function in the background, so errors in your callback function will not be caught by the [Express's default error handler](https://expressjs.com/en/guide/error-handling.html). This will cause the server to crash.\nSubsequent HTTP tests, which sends HTTP requests, will have nowhere to go or connect to. As a result, these tests will fail with Curl Code 7 - CURLE_COULDNT_CONNECT as per its description [here](https://curl.se/libcurl/c/libcurl-errors.html).\n\nTo avoid having your callback functions throwing errors and crashing the server, we recommend that you use a combination of:\n- handling any error-checking before setTimeout\n- wraping the callback function logic inside a `try`/`catch` block\n- abstracting core logic to error-free helper functions and use those in the \"main functions\" after handling errors\n\n\n## Swagger API\n\nA [swagger.yaml](swagger.yaml) file is also available in this repository. This is simply for your convenience and may contain mistakes.\n\nPlease also revisit lab05_forum regarding this section!\n\n</details>\n\n## API Clients\n\nPlease revisit lab05_checkins or lab05_forum regarding this section!\n\n# Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch.\n- Check that your code has been uploaded to your Gitlab repository on this website (you may need to refresh the page).\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\n# Additional Information\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n```shell\n$ rm -rf node_modules\n```\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n"
            },
            {
                "summary": "From assessments -> lab08_snapnews -> README.md: The chunk provides a sample `package.json` file for the Snap News Inc project, highlighting key sections such as scripts, dependencies, and devDependencies, which are essential for setting up the project's environment and ensuring proper functionality. This information is located in the \"Additional Information\" section of the document, which guides users on package management and configuration.",
                "content": "## Sample package.json\n\n<details>\n\n<summary>Click to view our sample package.json</summary><br/>\n\n**Note**:\n1. The main keys to pay attention to are `\"scripts\"`, `\"dependencies\"` and `\"devDependencies\"`.\n1. It is fine if the versions of your packages are newer.\n\n```json\n{\n  \"name\": \"lab08_snapnews\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/server.ts\",\n  \"scripts\": {\n    \"ts-node\": \"ts-node\",\n    \"ts-node-coverage\": \"nyc --reporter=text --reporter=lcov ts-node\",\n    \"test\": \"jest\",\n    \"tsc\": \"tsc --noEmit\",\n    \"lint\": \"eslint src/**.ts\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/cors\": \"^2.8.17\",\n    \"@types/express\": \"^4.17.21\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/morgan\": \"^1.9.9\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.20.0\",\n    \"@typescript-eslint/parser\": \"^6.20.0\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-plugin-jest\": \"^27.6.3\",\n    \"jest\": \"^29.7.0\",\n    \"nyc\": \"^15.1.0\",\n    \"sync-request-curl\": \"^3.0.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"ts-node\": \"^10.9.2\",\n    \"ts-node-dev\": \"^2.0.0\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"express\": \"^4.18.2\",\n    \"morgan\": \"^1.10.0\",\n    \"slync\": \"^1.0.2\"\n  }\n}\n```\n\n</details>\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\swagger.yaml",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> swagger.yaml: This chunk represents the OpenAPI specification for the Announcement Service API, detailing version 1 endpoints for managing announcements, including creating, listing, and deleting announcements, as well as clearing all announcements and timers. It specifies the request and response formats, authentication requirements, and error handling for each endpoint.",
                "content": "openapi: 3.0.3\ninfo:\n  title: Announcement Service API\n  description: API for managing announcements\n  version: 1.0.0\nservers:\n  - url: \"{protocol}://{host}:{port}\"\n    variables:\n      protocol:\n        default: http\n      host:\n        default: '127.0.0.1'\n      port:\n        default: '49152'\n\ntags:\n  - name: v1 existing\n    description: API version 1, where tokens are sent through query (GET/DELETE, insecure) or body (PUT/POST)\n  - name: v2\n    description: API version 2, where all tokens are consistently and securely sent through the request headers\n  - name: v1 new\n    description: Task 2 scheduling - new v1 routes to implement\n\npaths:\n  /v1/clear:\n    delete:\n      tags:\n        - v1 existing\n      summary: Clear all announcements and timers\n      description: |\n        Reset the data store to the initial state, removing all announcements.\n        If you have any scheduled timers (from setTimeout), they must also be removed.\n      responses:\n        '200':\n          description: Announcements and timers cleared successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                example: {}\n  /v1/announcements/create:\n    post:\n      tags:\n        - v1 existing\n      summary: Create a new announcement\n      description: Given a title and description, create an announcement and return a corresponding announcement ID.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                lab08snapnewstoken:\n                  type: string\n                  description: Token for authentication\n                  example: LAB08_SNAPNEWS_TOKEN_SECRET\n                title:\n                  type: string\n                  description: Title of the announcement\n                  example: \"Oleksandr Usyk is the new undisputed champion of the world!\"\n                description:\n                  type: string\n                  description: Description of the announcement\n                  example: \"Oleksandr Usyk has defeated Tyson Fury to become the first undisputed heavyweight champion in the modern era.\"\n      responses:\n        '200':\n          description: Announcement created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  announcementId:\n                    type: integer\n                    example: 1\n        '400':\n          description: |\n            When any of\n            - title is an empty string, \"\"\n            - description is an empty string, \"\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: \"Invalid title or description\"\n        '401':\n          description: When the given token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: Invalid token provided\n  /v1/announcements/list:\n    get:\n      tags:\n        - v1 existing\n      summary: List all announcements\n      description: Return a list of announcements created, including information on their id, title, content and createdAt (UNIX Timestamp)\n      parameters:\n        - name: lab08snapnewstoken\n          in: query\n          required: true\n          schema:\n            type: string\n            description: Token for authentication\n            example: LAB08_SNAPNEWS_TOKEN_SECRET\n      responses:\n        '200':\n          description: Lists all announcements successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  announcements:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Announcement'\n        '401':\n          description: When the given token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: Invalid token provided\n  /v1/announcements/{announcementid}:\n    delete:\n      tags:\n        - v1 existing\n      summary: Delete an announcement\n      description: Given an announcement ID, delete the corresponding announcement.\n      parameters:\n        - name: announcementid\n          in: path\n          required: true\n          schema:\n            type: integer\n            description: ID of the announcement to delete\n            example: 0\n        - name: lab08snapnewstoken\n          in: query\n          required: true\n          schema:\n            type: string\n            description: Token for authentication\n            example: LAB08_SNAPNEWS_TOKEN_SECRET\n      responses:\n        '200':\n          description: Deleted announcement successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                example: {}\n        '400':\n          description: |\n            When any of\n            - announcementId does not refer to an existing announcement\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: announcement ID does not refer to an existing announcement\n        '401':\n          description: When the given token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: Invalid token provided\n\n"
            },
            {
                "summary": "From assessments -> lab08_snapnews -> swagger.yaml: This chunk contains the API endpoints for version 2 (v2) of the Announcement Service, specifically for creating, listing, and deleting announcements. It outlines the request parameters, request body requirements, and response formats for each operation, emphasizing the use of a secret token for authentication in the request headers.",
                "content": "\n\n  /v2/announcements/create:\n    post:\n      tags:\n        - v2\n      summary: Create a new announcement (v2)\n      description: Given a title and description, create an announcement and return a corresponding announcement ID.\n      parameters:\n        - name: lab08snapnewstoken\n          in: header\n          description: secret token used to authenticate APIs\n          schema:\n            type: string\n            example: LAB08_SNAPNEWS_TOKEN_SECRET\n            description: Secret token for lab08_snapnews\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  description: Title of the announcement\n                description:\n                  type: string\n                  description: Description of the announcement\n      responses:\n        '200':\n          description: Announcement created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  announcementId:\n                    type: integer\n                    example: 1\n        '400':\n          description: |\n            When any of\n            - title is an empty string, \"\"\n            - description is an empty string, \"\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: \"Invalid title or description\"\n        '401':\n          description: When the given token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: Invalid token provided\n  /v2/announcements/list:\n    get:\n      tags:\n        - v2\n      summary: List of all announcements (v2)\n      description: Return a list of announcements created, including information on their id, title, content and createdAt (UNIX Timestamp)\n      parameters:\n        - name: lab08snapnewstoken\n          in: header\n          description: secret token used to authenticate APIs\n          schema:\n            type: string\n            example: LAB08_SNAPNEWS_TOKEN_SECRET\n            description: Secret token for lab08_snapnews\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  announcements:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Announcement'\n        '401':\n          description: When the given token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: Invalid token provided\n  /v2/announcements/{announcementid}:\n    delete:\n      tags:\n        - v2\n      summary: Delete an announcement (v2)\n      description: Given an announcement ID, delete the corresponding announcement.\n      parameters:\n        - name: lab08snapnewstoken\n          in: header\n          description: secret token used to authenticate APIs\n          schema:\n            type: string\n            example: LAB08_SNAPNEWS_TOKEN_SECRET\n            description: Secret token for lab08_snapnews\n        - name: announcementid\n          in: path\n          required: true\n          schema:\n            type: integer\n            description: ID of the announcement to delete\n            example: 0\n      responses:\n        '200':\n          description: Deleted announcement successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                example: {}\n        '400':\n          description: |\n            When any of\n            - announcementId does not refer to an existing announcement\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: announcement ID does not refer to an existing announcement\n        '401':\n          description: When the given token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: Invalid token provided\n\n"
            },
            {
                "summary": "From assessments -> lab08_snapnews -> swagger.yaml: The chunk defines two new API endpoints under version 1 of the Announcement Service API for scheduling and aborting the deletion of announcements. It includes details on the request parameters, responses, and error handling for each endpoint, contributing to the functionality of managing announcements more effectively.",
                "content": "\n\n  /v1/announcements/{announcementid}/schedule:\n    delete:\n      tags:\n        - v1 new\n      summary: Schedule announcement deletion (v2)\n      description: Given an announcement ID, schedule the corresponding announcement for deletion\n      parameters:\n        - name: lab08snapnewstoken\n          in: header\n          description: secret token used to authenticate APIs\n          schema:\n            type: string\n            example: LAB08_SNAPNEWS_TOKEN_SECRET\n            description: Secret token for lab08_snapnews\n        - name: announcementid\n          in: path\n          required: true\n          schema:\n            type: integer\n            description: ID of the announcement to schedule deletion for\n            example: 0\n        - name: secondsFromNow\n          in: query\n          required: true\n          schema:\n            type: integer\n            description: Seconds from now to schedule deletion\n            example: 2\n      responses:\n        '200':\n          description: Scheduled an announcement for deletion successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                example: {}\n        '400':\n          description: |\n            When any of\n            - announcementId does not refer to an existing announcement\n            - secondsFromNow is not strictly positive\n            - announcement is already scheduled for deletion\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error Message\n                    example: secondsFromNow must be a strictly positive integer\n        '401':\n          description: When the given token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: Invalid token provided\n  /v1/announcements/{announcementid}/schedule/abort:\n    post:\n      tags:\n        - v1 new\n      summary: Abort scheduled deletion (v2)\n      description: Given an announcement ID, abort the scheduled deletion of the corresponding announcement\n      parameters:\n        - name: lab08snapnewstoken\n          in: header\n          description: secret token used to authenticate APIs\n          schema:\n            type: string\n            example: LAB08_SNAPNEWS_TOKEN_SECRET\n            description: Secret token for lab08_snapnews\n        - name: announcementid\n          in: path\n          required: true\n          schema:\n            type: integer\n            description: ID of the announcement to abort deletion for\n            example: 0\n      responses:\n        '200':\n          description: Aborted a scheduled deletion successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                example: {}\n        '400':\n          description: |\n            When any of:\n            - announcementId does not refer to a valid announcement\n            - the announcement does not have any scheduled removals\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: The announcement does not have any scheduled removals\n        '401':\n          description: When the given token is invalid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  error:\n                    type: string\n                    description: Error message\n                    example: Invalid token provided\ncomponents:\n  schemas:\n    Announcement:\n      type: object\n      properties:\n        announcementId:\n          type: integer\n          description: ID of the announcement\n          example: 1234\n        title:\n          type: string\n          description: Title of the announcement\n          example: \"The Nuggets blew a 20-point third-quarter\"\n        description:\n          type: string\n          description: Description of the announcement\n          example: \"n the span of 22 minutes, the Denver Nuggets' quest to repeat as champions disintegrated in stunning fashion. The Nuggets blew a 20-point third-quarter lead on their home floor to lose 98-90 in Game 7 of the Western Conference semifinals\"\n        createdAt:\n          type: integer\n          description: Creation timestamp of the announcement (UNIX timestamp in seconds)\n          example: 1716293686"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\src\\auth.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> src -> auth.ts: This chunk defines a constant for an authentication token and a function that validates a provided token against this constant, throwing an error if they do not match.",
                "content": "const LAB08_SNAPNEWS_TOKEN = 'LAB08_SNAPNEWS_TOKEN_SECRET';\n\n/**\n * Checks if the given token matches a predefined constant.\n * An Error is thrown if they do not match.\n *\n * @param {string} token\n */\nexport const checkAuthToken = (token: string) => {\n  if (token !== LAB08_SNAPNEWS_TOKEN) {\n    throw new Error('Invalid announcement token provided');\n  }\n};\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\src\\config.json",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> src -> config.json: The chunk contains configuration details, specifically the URL and port number, for a local server setup, which is part of a larger document likely focused on network or application settings.",
                "content": "{\n  \"url\": \"http://127.0.0.1\",\n  \"port\": \"49152\"\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\src\\dataStore.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> src -> dataStore.ts: This chunk defines a data store for managing announcements in a TypeScript application, including an interface for announcements, a data structure to hold them, and a function to retrieve the data store. It also provides guidance on handling timer objects in relation to JSON serialization.",
                "content": "/**\n * Placeholder file for defining your data store\n * Feel free to add, edit, ignore or remove this file and create your own files if you wish.\n *\n * However, for Task 2, we recommend storing timer objects (from setTimeout) outside of your\n * dataStore. This is because timer objects are not JSON-serialisable, meaning they cannot\n * be returned from your server, and if you implement persistence in the form of JSON, they\n * cannot be written to a file. See src/snapnews.ts for further tips.\n */\n\nexport interface Announcement {\n  announcementId: number;\n  title: string;\n  description: string;\n  createdAt: number;\n}\n\ninterface DataStore {\n  announcements: Announcement[];\n}\n\nconst dataStore: DataStore = {\n  announcements: [],\n};\n\nexport const getData = () => dataStore;\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\src\\server.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> src -> server.ts: This chunk contains the complete implementation of an Express.js server for a Snap News application, including middleware setup, route definitions for managing announcements, and error handling. It specifically highlights the structure and logic for version 1 of the API, with placeholders for future enhancements in version 2 and additional routes.",
                "content": "```\n/**\n * If you are looking for a way to reduce repetition instead of adding\n * try/catch to each of your routes, take a look at lab05_forum's solution\n * branch, inside src.alternate. One way was shown is to define custom errors\n * and an errorHandler that maps the custom errors to HTTP status codes, which\n * allows us to write our routes in 1 line of code (i.e. just res.json).\n *\n * Alternatively, you could also define handler wrapper functions and re-use the\n * same logic (e.g. checking for auth token) across different routes.\n *\n * However, keeping things simple with try/catch as shown below is fine and acceptable\n * in COMP1531.\n */\n\nimport express, { json, Request, Response } from 'express';\n// Middleware to allow connections with the frontend\nimport cors from 'cors';\n// Middleware to log (print to terminal) incoming HTTP requests\nimport morgan from 'morgan';\n\n// Importing the example implementation for echo in echo.js\nimport { port, url } from './config.json';\nimport { clear, createAnnouncement, deleteAnnouncement, listAnnouncements } from './snapnews';\nimport { checkAuthToken } from './auth';\n\nconst PORT: number = parseInt(process.env.PORT || port);\nconst HOST: string = process.env.IP || '127.0.0.1';\n\nconst app = express();\n\n// Use middleware that allows for access from other domains (needed for frontend to connect)\napp.use(cors());\n// Use middleware that allows us to access the JSON body of requests\napp.use(json());\n// Use middleware to log (print to terminal) incoming HTTP requests\napp.use(morgan('dev'));\n\n// Root URL\napp.get('/', (req: Request, res: Response) => {\n  console.log('Print to terminal: someone accessed our root url!');\n  res.json({ message: \"Welcome to Lab08 Snap News Server's root URL!\" });\n});\n\n// ========================================================================= //\n// YOUR ROUTES SHOULD BE DEFINED BELOW THIS DIVIDER\n// ========================================================================= //\n\napp.delete('/v1/clear', (req: Request, res: Response) => {\n  res.json(clear());\n});\n\napp.post('/v1/announcements/create', (req: Request, res: Response) => {\n  const lab08snapnewstoken = req.body.lab08snapnewstoken as string;\n  try {\n    checkAuthToken(lab08snapnewstoken);\n  } catch (error) {\n    return res.status(401).json({ error: error.message });\n  }\n\n  try {\n    res.json(createAnnouncement(req.body.title, req.body.description));\n  } catch (error) {\n    return res.status(400).json({ error: error.message });\n  }\n});\n\napp.get('/v1/announcements/list', (req: Request, res: Response) => {\n  const lab08snapnewstoken = req.query.lab08snapnewstoken as string;\n  try {\n    checkAuthToken(lab08snapnewstoken);\n  } catch (error) {\n    return res.status(401).json({ error: error.message });\n  }\n  res.json(listAnnouncements());\n});\n\napp.delete('/v1/announcements/:announcementid', (req: Request, res: Response) => {\n  const lab08snapnewstoken = req.query.lab08snapnewstoken as string;\n  try {\n    checkAuthToken(lab08snapnewstoken);\n  } catch (error) {\n    return res.status(401).json({ error: error.message });\n  }\n\n  try {\n    res.json(deleteAnnouncement(parseInt(req.params.announcementid as string)));\n  } catch (error) {\n    return res.status(400).json({ error: error.message });\n  }\n});\n\n// ========================================================================= //\n// Task 1: implement V2 Routes\n\napp.post('/v2/announcements/create', (req: Request, res: Response) => {\n  // TODO: same as /v1/ route, but the token is extracted from the headers\n  // instead of the query or body. See the README.md file for how to do this.\n  //\n  // You can refactor remaining /v1/ logic to reduce repetition, or simply copy it\n  // down here after extracting the token from the headers.\n});\n\n// TODO: add other /v2/ routes here.\n// ...\n// ...\n// ...\n\n// ========================================================================= //\n// Task 2: implement v1 (new) Routes (schedule and schedule abort)\n\n// TODO: add new /v1/ routes here\n// ...\n// ...\n// ...\n\n// ========================================================================= //\n// YOUR ROUTES SHOULD BE DEFINED ABOVE THIS DIVIDER\n// ========================================================================= //\n\n/*\n * 404 Not Found Middleware\n *\n * This should be put at the very end (after all your routes are defined),\n * although still above errorHandlers (if any) and app.listen().\n */\napp.use((req: Request, res: Response) => {\n  const error = `\n    404 Not found - This could be because:\n      0. You have defined routes below (not above) this middleware in server.ts\n      1. You have not implemented the route ${req.method} ${req.path}\n      2. There is a typo in either your test or server, e.g. /announcements/list in one\n         and, incorrectly, /announcement/list in the other\n      3. You are using ts-node (instead of ts-node-dev) to start your server and\n         have forgotten to manually restart to load the new changes\n      4. You've forgotten a leading slash (/), e.g. you have announcements/list instead\n         of /announcements/list in your server.ts or test file\n  `;\n  res.status(404).json({ error });\n});\n\n/**\n * Start server\n */\nconst server = app.listen(PORT, HOST, () => {\n  console.log(`Express Server started and awaiting requests at the URL: '${url}:${PORT}'`);\n});\n\n/**\n * For coverage, handle Ctrl+C gracefully\n */\nprocess.on('SIGINT', () => {\n  server.close(() => {\n    console.log('Shutting down server gracefully.');\n    process.exit();\n  });\n});\n```"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\src\\snapnews.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> src -> snapnews.test.ts: The chunk is a placeholder comment at the beginning of a test file, indicating that the current test should be removed and replaced with an uncommented test suite below it. It also provides a tip for selectively running specific tests during development.",
                "content": "test.todo('Remove this test and uncomment the test suite below.');\n\n// TIP: since some routes are not implemented in the starter code, you should use\n// describe.only or test.only to only run specific tests instead of everything at\n// the same time.\n\n"
            },
            {
                "summary": "From assessments -> lab08_snapnews -> src -> snapnews.test.ts: This chunk contains a series of automated tests for a RESTful API, specifically focusing on the announcement management functionality, including creating, listing, and deleting announcements, as well as handling scheduling and aborting scheduled deletions. It is part of a larger test suite that verifies the behavior of both version 1 and version 2 of the API endpoints.",
                "content": "\n\n/*\nimport sleepSync from 'slync';\nimport request from 'sync-request-curl';\nimport { port, url } from './config.json';\n\nconst SERVER_URL = `${url}:${port}`;\n\nconst lab08snapnewstoken = 'LAB08_SNAPNEWS_TOKEN_SECRET';\nconst TIMEOUT_MS = 5 * 1000;\n\nbeforeEach(() => {\n  request('DELETE', SERVER_URL + '/v1/clear', {});\n});\n\ndescribe('GET /', () => {\n  test('has the correct return type', () => {\n    const res = request('GET', SERVER_URL + '/', { timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ message: expect.any(String) });\n  });\n\n  test('404 when wrong method', () => {\n    const res = request('POST', SERVER_URL + '/', { timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n  });\n});\n\ndescribe('DELETE /v1/clear', () => {\n  test('has the correct return type', () => {\n    const res = request('DELETE', SERVER_URL + '/v1/clear', { timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({});\n  });\n});\n\n// ========================================================================= //\n// Tests for /v1/\n// ========================================================================= //\n\ndescribe('POST /v1/announcements/create', () => {\n  test.each([\n    { title: 'valid', description: '' },\n    { title: '', description: 'valid' },\n    { title: '', description: '' },\n  ])('400 for invalid announcement inputs where title=\"$title\" and description=\"$description\"', ({ title, description }) => {\n    const res = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title, description, lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(400);\n  });\n\n  test('401 for invalid token', () => {\n    const res = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 'valid', description: 'valid', lab08snapnewstoken: 'invalid' }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(401);\n  });\n\n  test('has the correct return type', () => {\n    const res = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 'hello', description: 'world', lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ announcementId: expect.any(Number) });\n    expect(res.statusCode).toStrictEqual(200);\n  });\n\n  test('two announcements with the same details have different IDs', () => {\n    const res1 = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 'hello', description: 'world', lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const res2 = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 'hello', description: 'world', lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const a1 = JSON.parse(res1.body.toString());\n    const a2 = JSON.parse(res2.body.toString());\n    expect(a1).toStrictEqual({ announcementId: expect.any(Number) });\n    expect(a2).toStrictEqual({ announcementId: expect.any(Number) });\n    expect(a1.announcementId).not.toStrictEqual(a2.announcementId);\n  });\n});\n\ndescribe('GET /v1/announcements/list', () => {\n  test('401 for invalid token', () => {\n    const res = request('GET', SERVER_URL + '/v1/announcements/list', { qs: { lab08snapnewstoken: 'invalid' }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(401);\n  });\n\n  test('Listing is empty', () => {\n    const res = request('GET', SERVER_URL + '/v1/announcements/list', { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ announcements: [] });\n    expect(res.statusCode).toStrictEqual(200);\n  });\n\n  test('Correctly list one item', () => {\n    const expectedTimestamp = Math.floor(Date.now() / 1000);\n    const createRes = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 'hello', description: 'world', lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const announcement = JSON.parse(createRes.body.toString());\n    const listRes = request('GET', SERVER_URL + '/v1/announcements/list', { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const announcementList = JSON.parse(listRes.body.toString());\n    expect(announcementList).toStrictEqual({\n      announcements: [\n        {\n          announcementId: announcement.announcementId,\n          title: 'hello',\n          description: 'world',\n          createdAt: expect.any(Number),\n        }\n      ]\n    });\n    // checking timestamp, accounting for potential network delays\n    const createdAt = announcementList.announcements[0].createdAt;\n    expect(createdAt).toBeGreaterThanOrEqual(expectedTimestamp);\n    expect(createdAt).toBeLessThanOrEqual(expectedTimestamp + 2);\n  });\n\n  test('Correctly list multiple items', () => {\n    const createRes1 = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 't1', description: 'd1', lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const createRes2 = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 't2', description: 'd2', lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const createRes3 = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 't3', description: 'd3', lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const a1 = JSON.parse(createRes1.body.toString());\n    const a2 = JSON.parse(createRes2.body.toString());\n    const a3 = JSON.parse(createRes3.body.toString());\n    const listRes = request('GET', SERVER_URL + '/v1/announcements/list', { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(listRes.body.toString())).toStrictEqual({\n      announcements: [\n        {\n          announcementId: a1.announcementId,\n          title: 't1',\n          description: 'd1',\n          createdAt: expect.any(Number),\n        },\n        {\n          announcementId: a2.announcementId,\n          title: 't2',\n          description: 'd2',\n          createdAt: expect.any(Number),\n        },\n        {\n          announcementId: a3.announcementId,\n          title: 't3',\n          description: 'd3',\n          createdAt: expect.any(Number),\n        },\n      ],\n    });\n  });\n});\n\ndescribe('DELETE /v1/announcements/:announcementid', () => {\n  test('400 attempting to delete when no announcement has been created', () => {\n    const deleteRes = request('DELETE', SERVER_URL + '/v1/announcements/0', { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(deleteRes.statusCode).toStrictEqual(400);\n  });\n\n  describe('when one announcement exists', () => {\n    let announcement: { announcementId: number };\n    beforeEach(() => {\n      const res = request('POST', SERVER_URL + '/v1/announcements/create', { json: { title: 'hello', description: 'world', lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(res.statusCode).toStrictEqual(200);\n      announcement = JSON.parse(res.body.toString());\n      expect(announcement).toStrictEqual({ announcementId: expect.any(Number) });\n    });\n\n    test('401 attempting to delete an announcement using an invalid token', () => {\n      const deleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}`, { qs: { lab08snapnewstoken: 'invalid' }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(deleteRes.statusCode).toStrictEqual(401);\n    });\n\n    test('400 attempting to delete an invalid announcement', () => {\n      const deleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId + 1}`, { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(deleteRes.statusCode).toStrictEqual(400);\n    });\n\n    test('correct return type', () => {\n      const deleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}`, { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({});\n      expect(deleteRes.statusCode).toStrictEqual(200);\n    });\n\n    test('correct side-effect when listing', () => {\n      const listBeforeDeleteRes = request('GET', SERVER_URL + '/v1/announcements/list', { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listBeforeDeleteRes.body.toString())).toStrictEqual({\n        announcements: [\n          {\n            announcementId: announcement.announcementId,\n            title: 'hello',\n            description: 'world',\n            createdAt: expect.any(Number),\n          }\n        ]\n      });\n      const deleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}`, { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({});\n      expect(deleteRes.statusCode).toStrictEqual(200);\n      const listAfterDeleteRes = request('GET', SERVER_URL + '/v1/announcements/list', { qs: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listAfterDeleteRes.body.toString())).toStrictEqual({ announcements: [] });\n    });\n  });\n});\n\n// ========================================================================= //\n// Tests for /v2/\n// ========================================================================= //\n\ndescribe('POST /v2/announcements/create', () => {\n  test.each([\n    { title: 'valid', description: '' },\n    { title: '', description: 'valid' },\n    { title: '', description: '' },\n  ])('400 for invalid announcement inputs where title=\"$title\" and description=\"$description\"', ({ title, description }) => {\n    const res = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title, description }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(400);\n  });\n\n  test('401 for invalid token', () => {\n    const res = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 'valid', description: 'valid' }, headers: { lab08snapnewstoken: 'invalid' }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(401);\n  });\n\n  test('has the correct return type', () => {\n    const res = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 'hello', description: 'world' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ announcementId: expect.any(Number) });\n    expect(res.statusCode).toStrictEqual(200);\n  });\n\n  test('two announcements with the same details have different IDs', () => {\n    const res1 = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 'hello', description: 'world' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const res2 = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 'hello', description: 'world' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const a1 = JSON.parse(res1.body.toString());\n    const a2 = JSON.parse(res2.body.toString());\n    expect(a1).toStrictEqual({ announcementId: expect.any(Number) });\n    expect(a2).toStrictEqual({ announcementId: expect.any(Number) });\n    expect(a1.announcementId).not.toStrictEqual(a2.announcementId);\n  });\n});\n\ndescribe('GET /v2/announcements/list', () => {\n  test('401 for invalid token', () => {\n    const res = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken: 'invalid' }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(res.statusCode).toStrictEqual(401);\n  });\n\n  test('Listing is empty', () => {\n    const res = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(res.body.toString())).toStrictEqual({ announcements: [] });\n    expect(res.statusCode).toStrictEqual(200);\n  });\n\n  test('Correctly list one item', () => {\n    const expectedTimestamp = Math.floor(Date.now() / 1000);\n    const createRes = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 'hello', description: 'world' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const announcement = JSON.parse(createRes.body.toString());\n    const listRes = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const announcementList = JSON.parse(listRes.body.toString());\n    expect(announcementList).toStrictEqual({\n      announcements: [\n        {\n          announcementId: announcement.announcementId,\n          title: 'hello',\n          description: 'world',\n          createdAt: expect.any(Number),\n        }\n      ]\n    });\n    // checking timestamp, accounting for potential network delays\n    const createdAt = announcementList.announcements[0].createdAt;\n    expect(createdAt).toBeGreaterThanOrEqual(expectedTimestamp);\n    expect(createdAt).toBeLessThanOrEqual(expectedTimestamp + 2);\n  });\n\n  test('Correctly list multiple items', () => {\n    const createRes1 = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 't1', description: 'd1' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const createRes2 = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 't2', description: 'd2' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const createRes3 = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 't3', description: 'd3' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    const a1 = JSON.parse(createRes1.body.toString());\n    const a2 = JSON.parse(createRes2.body.toString());\n    const a3 = JSON.parse(createRes3.body.toString());\n    const listRes = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(listRes.body.toString())).toStrictEqual({\n      announcements: [\n        {\n          announcementId: a1.announcementId,\n          title: 't1',\n          description: 'd1',\n          createdAt: expect.any(Number),\n        },\n        {\n          announcementId: a2.announcementId,\n          title: 't2',\n          description: 'd2',\n          createdAt: expect.any(Number),\n        },\n        {\n          announcementId: a3.announcementId,\n          title: 't3',\n          description: 'd3',\n          createdAt: expect.any(Number),\n        },\n      ],\n    });\n  });\n});\n\ndescribe('DELETE /v2/announcements/:announcementid', () => {\n  test('400 attempting to delete when no announcement has been created', () => {\n    const deleteRes = request('DELETE', SERVER_URL + '/v2/announcements/0', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(deleteRes.statusCode).toStrictEqual(400);\n  });\n\n  describe('when one announcement exists', () => {\n    let announcement: { announcementId: number };\n    beforeEach(() => {\n      const res = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 'hello', description: 'world' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(res.statusCode).toStrictEqual(200);\n      announcement = JSON.parse(res.body.toString());\n      expect(announcement).toStrictEqual({ announcementId: expect.any(Number) });\n    });\n\n    test('401 attempting to delete an announcement using an invalid token', () => {\n      const deleteRes = request('DELETE', SERVER_URL + `/v2/announcements/${announcement.announcementId}`, { headers: { lab08snapnewstoken: 'invalid' }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(deleteRes.statusCode).toStrictEqual(401);\n    });\n\n    test('400 attempting to delete an invalid announcement', () => {\n      const deleteRes = request('DELETE', SERVER_URL + `/v2/announcements/${announcement.announcementId + 1}`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(deleteRes.statusCode).toStrictEqual(400);\n    });\n\n    test('correct return type', () => {\n      const deleteRes = request('DELETE', SERVER_URL + `/v2/announcements/${announcement.announcementId}`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({});\n      expect(deleteRes.statusCode).toStrictEqual(200);\n    });\n\n    test('correct side-effect when listing', () => {\n      const listBeforeDeleteRes = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listBeforeDeleteRes.body.toString())).toStrictEqual({\n        announcements: [\n          {\n            announcementId: announcement.announcementId,\n            title: 'hello',\n            description: 'world',\n            createdAt: expect.any(Number),\n          }\n        ]\n      });\n      const deleteRes = request('DELETE', SERVER_URL + `/v2/announcements/${announcement.announcementId}`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(deleteRes.body.toString())).toStrictEqual({});\n      expect(deleteRes.statusCode).toStrictEqual(200);\n      const listAfterDeleteRes = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listAfterDeleteRes.body.toString())).toStrictEqual({ announcements: [] });\n    });\n  });\n});\n\n// ========================================================================= //\n// Tests for /v1/ new routes\n// ========================================================================= //\n\ndescribe('DELETE /v1/announcements/:announcementId/schedule', () => {\n  test('400 attempting to schedule delete when no announcement has been created', () => {\n    const scheduledDeleteRes = request('DELETE', SERVER_URL + '/v1/announcements/0/schedule', { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(scheduledDeleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(scheduledDeleteRes.statusCode).toStrictEqual(400);\n  });\n\n  describe('when one announcement exists', () => {\n    let announcement: { announcementId: number };\n    beforeEach(() => {\n      const res = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 'hello', description: 'world' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(res.statusCode).toStrictEqual(200);\n      announcement = JSON.parse(res.body.toString());\n      expect(announcement).toStrictEqual({ announcementId: expect.any(Number) });\n    });\n\n    test('401 attempting to schedule delete an announcement using an invalid token', () => {\n      const scheduledDeleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken: 'invalid' }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(scheduledDeleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(scheduledDeleteRes.statusCode).toStrictEqual(401);\n    });\n\n    test('400 attempting to schedule delete an invalid announcement', () => {\n      const scheduledDeleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId + 1}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(scheduledDeleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(scheduledDeleteRes.statusCode).toStrictEqual(400);\n    });\n\n    test('400 attempting to schedule delete with a negative secondsFromNow', () => {\n      const scheduledDeleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: -1 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(scheduledDeleteRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(scheduledDeleteRes.statusCode).toStrictEqual(400);\n    });\n\n    test('correct return type', () => {\n      const scheduledDeleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(scheduledDeleteRes.body.toString())).toStrictEqual({});\n      expect(scheduledDeleteRes.statusCode).toStrictEqual(200);\n    });\n\n    test('400 when scheduling twice', () => {\n      request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      const secondRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(secondRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(secondRes.statusCode).toStrictEqual(400);\n    });\n\n    test('correct side-effect when listing', () => {\n      const listBeforeDeleteRes = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      const expectedInitialList = [\n        {\n          announcementId: announcement.announcementId,\n          title: 'hello',\n          description: 'world',\n          createdAt: expect.any(Number),\n        }\n      ];\n      expect(JSON.parse(listBeforeDeleteRes.body.toString())).toStrictEqual({ announcements: expectedInitialList });\n\n      const scheduledDeleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(scheduledDeleteRes.body.toString())).toStrictEqual({});\n      expect(scheduledDeleteRes.statusCode).toStrictEqual(200);\n\n      // Should not be deleted yet since it is scheduled for 2 seconds\n      const listImmediatelyAfterSchedule = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listImmediatelyAfterSchedule.body.toString())).toStrictEqual({ announcements: expectedInitialList });\n\n      // Wait for 2000 milliseconds (2 seconds)\n      sleepSync(2 * 1000);\n\n      const listAfter2Seconds = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listAfter2Seconds.body.toString())).toStrictEqual({ announcements: [] });\n    });\n\n    test('scheduled deletion with announcement deleted immediately afterwards (this test should not crash your server if exceptions are handled in all callbacks)', () => {\n      const scheduledDeleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(scheduledDeleteRes.body.toString())).toStrictEqual({});\n      expect(scheduledDeleteRes.statusCode).toStrictEqual(200);\n\n      const immediateDeleteRes = request('DELETE', SERVER_URL + `/v2/announcements/${announcement.announcementId}`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(immediateDeleteRes.body.toString())).toStrictEqual({});\n      expect(immediateDeleteRes.statusCode).toStrictEqual(200);\n\n      sleepSync(2 * 1000);\n\n      const listRes = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listRes.body.toString())).toStrictEqual({ announcements: [] });\n      expect(listRes.statusCode).toStrictEqual(200);\n    })\n  });\n});\n\ndescribe('POST /v1/announcements/:announcementId/schedule/abort', () => {\n  test('400 attempting to abort schedule delete when no announcement has been created', () => {\n    const abortRes = request('POST', SERVER_URL + '/v1/announcements/0/schedule/abort', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n    expect(JSON.parse(abortRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n    expect(abortRes.statusCode).toStrictEqual(400);\n  });\n\n  describe('when one announcement exists', () => {\n    let announcement: { announcementId: number };\n    beforeEach(() => {\n      const res = request('POST', SERVER_URL + '/v2/announcements/create', { json: { title: 'hello', description: 'world' }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(res.statusCode).toStrictEqual(200);\n      announcement = JSON.parse(res.body.toString());\n      expect(announcement).toStrictEqual({ announcementId: expect.any(Number) });\n    });\n\n    test('401 attempting to abort schedule delete an announcement using an invalid token', () => {\n      request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      const abortRes = request('POST', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule/abort`, { headers: { lab08snapnewstoken: 'invalid' }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(abortRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(abortRes.statusCode).toStrictEqual(401);\n    });\n\n    test('400 attempting to abort schedule delete an invalid announcement', () => {\n      request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      const abortRes = request('POST', SERVER_URL + `/v1/announcements/${announcement.announcementId + 1}/schedule/abort`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(abortRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(abortRes.statusCode).toStrictEqual(400);\n    });\n\n    test('400 attempting to abort when not scheduled', () => {\n      const abortRes = request('POST', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule/abort`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(abortRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(abortRes.statusCode).toStrictEqual(400);\n    });\n\n    test('400 attempting to abort twice', () => {\n      request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      request('POST', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule/abort`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      const secondRes = request('POST', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule/abort`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(secondRes.body.toString())).toStrictEqual({ error: expect.any(String) });\n      expect(secondRes.statusCode).toStrictEqual(400);\n    });\n\n    test('correct return type', () => {\n      request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      const abortRes = request('POST', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule/abort`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(abortRes.body.toString())).toStrictEqual({});\n      expect(abortRes.statusCode).toStrictEqual(200);\n    });\n\n    test('correct side-effect when aborting', () => {\n      const listBeforeDeleteRes = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      const expectedInitialList = [\n        {\n          announcementId: announcement.announcementId,\n          title: 'hello',\n          description: 'world',\n          createdAt: expect.any(Number),\n        }\n      ];\n      expect(JSON.parse(listBeforeDeleteRes.body.toString())).toStrictEqual({ announcements: expectedInitialList });\n\n      const scheduledDeleteRes = request('DELETE', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule`, { qs: { secondsFromNow: 2 }, headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(scheduledDeleteRes.body.toString())).toStrictEqual({});\n      expect(scheduledDeleteRes.statusCode).toStrictEqual(200);\n\n      // Should not be deleted yet since it is scheduled for 2 seconds\n      const listImmediatelyAfterSchedule = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      expect(JSON.parse(listImmediatelyAfterSchedule.body.toString())).toStrictEqual({ announcements: expectedInitialList });\n\n      // Aborting deletion\n      request('POST', SERVER_URL + `/v1/announcements/${announcement.announcementId}/schedule/abort`, { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      // Wait for 2000 milliseconds (2 seconds)\n      sleepSync(2 * 1000);\n\n      const listAfter2Seconds = request('GET', SERVER_URL + '/v2/announcements/list', { headers: { lab08snapnewstoken }, timeout: TIMEOUT_MS });\n      // Should be the same since we aborted the deltion\n      expect(JSON.parse(listAfter2Seconds.body.toString())).toStrictEqual({ announcements: expectedInitialList });\n    });\n  });\n});\n\n*/"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab08_snapnews\\src\\snapnews.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab08_snapnews -> src -> snapnews.ts: This chunk is part of a JavaScript module that defines functions for managing announcements, including creating, deleting, and listing them. It includes a placeholder for implementing scheduled deletions using timers, as well as functions to reset the application state and handle scheduled removal of announcements. The document outlines the structure and requirements for managing announcements in a system, emphasizing the importance of clearing timers to prevent interference between tests.",
                "content": "/**\n * Placeholder file for defining your feature functions\n * Feel free to add, edit, ignore or remove this file and create your own files if you wish.\n */\nimport { Announcement, getData } from './dataStore';\n\n// ========================================================================= //\n\n/*\nTASK 2: Suggestion\n\nWe recommend keeping track of the scheduled deletion for each timer as a global\nobject in memory, or as a map, below this multiline comment.\n\nExample object:\n- properties are announcementIds\n- values are timers returned from setTimeout\n```\nconst announcementIdToTimerObject: Record<number, ReturnType<typeof setTimeout>> = {};\n```\n\nPlease see the specification (README.md) for further advise on using setTimeout\nand clearTimeout.\n*/\n\n// TODO: add your object/map to link an announcementId to a timer from setTimeout:\n// ...\n\n// ========================================================================= //\n\n/**\n * Reset the application to the initial state\n *\n * @returns {Record<never, never>}\n */\nexport const clear = (): Record<never, never> => {\n  getData().announcements = [];\n\n  // Task 2 TODO:\n  // [IMPORTANT]: If you are using setTimeout, you must clear all existing timers.\n  // One side effect of not clearing timeouts is that the result of a previous test\n  // could affect the next test (due to any timer/delays from setTimeout)\n  return {};\n};\n\n/**\n * Create a new, active announcement\n *\n * @param {string} title\n * @param {string} description\n * @returns\n */\nexport const createAnnouncement = (title: string, description: string) => {\n  if (!title) {\n    throw new Error('Error: invalid title');\n  }\n  if (!description) {\n    throw new Error('Error: invalid description');\n  }\n\n  const data = getData();\n  const announcementId = data.announcements.length;\n\n  data.announcements.push({\n    announcementId,\n    title,\n    description,\n    createdAt: Math.floor(Date.now() / 1000),\n  });\n\n  return { announcementId };\n};\n\n/**\n * Delete the announcement corresponding to the given ID.\n *\n * @param {number} announcementId\n * @returns {Record<never, never>}\n */\nexport const deleteAnnouncement = (announcementId: number): Record<never, never> => {\n  let foundAnnouncementToDelete = false;\n  getData().announcements = getData().announcements.filter((a) => {\n    if (a.announcementId === announcementId) {\n      foundAnnouncementToDelete = true;\n      return false;\n    }\n    return true;\n  });\n  if (!foundAnnouncementToDelete) {\n    throw new Error(`No such announcement with id: ${announcementId}`);\n  }\n  return {};\n};\n\n/**\n * List all available announcements\n *\n * @returns {{ announcements: Announcement[] }}\n */\nexport const listAnnouncements = (): { announcements: Announcement[] } => {\n  return { announcements: getData().announcements };\n};\n\n// ========================================================================= //\n/**\n * Schedule Routes\n * ---\n * You may use the functions below, remove them and write new ones, etc.\n * Functions are considered black-boxed in the tests - we only care about\n * whether your routes (in server.ts) has the output.\n */\n\n/**\n * Schedule an announcement for removal\n *\n * @param {number} announcementId\n * @param {number} secondsFromNow\n * @returns {Record<never, never>}\n */\nexport const scheduleDeleteAnnouncement = (announcementId: number, secondsFromNow: number): Record<never, never> => {\n  return { error: 'Not implemented', hint: 'You may need to implement this in Task 2' };\n};\n\n/**\n * Abort any scheduled announcements for removal\n *\n * @param {number} announcementId\n * @returns {Record<never, never>}\n */\nexport const abortScheduleDeleteAnnouncement = (announcementId: number) => {\n  return { error: 'Not implemented', hint: 'You may need to implement this in Task 2' };\n};"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\.eslintrc.json",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> .eslintrc.json: The chunk represents the configuration settings for ESLint, specifically tailored for a TypeScript project, including parser options, environment settings, global variables, and a comprehensive set of coding rules to enforce best practices and maintain code quality.",
                "content": "{\n  \"ignorePatterns\": [\"build\"],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\", \"jest\"],\n  \"extends\": [\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\"],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2022,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n  \"env\": {\n    \"es2021\": true,\n    \"node\": true,\n    \"jest\": true\n  },\n  \"globals\": {\n    \"document\": \"readonly\",\n    \"navigator\": \"readonly\",\n    \"window\": \"readonly\"\n  },\n  \"rules\": {\n    \"no-unused-vars\": \"off\",\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      {\n        \"args\": \"none\",\n        \"caughtErrors\": \"none\",\n        \"ignoreRestSiblings\": true,\n        \"vars\": \"all\"\n      }\n    ],\n    // Everything below here is standard 1531\n    \"@typescript-eslint/no-var-requires\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n    \"no-var\": \"warn\",\n    \"object-shorthand\": 0, // [\"warn\", \"properties\"],\n    \"accessor-pairs\": [\n      \"error\",\n      { \"setWithoutGet\": true, \"enforceForClassMembers\": true }\n    ],\n    \"array-bracket-spacing\": [\"error\", \"never\"],\n    \"array-callback-return\": [\n      \"error\",\n      {\n        \"allowImplicit\": false,\n        \"checkForEach\": false\n      }\n    ],\n    \"arrow-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"block-spacing\": [\"error\", \"always\"],\n    \"brace-style\": [\"error\", \"1tbs\", { \"allowSingleLine\": true }],\n    \"camelcase\": [\n      \"error\",\n      {\n        \"allow\": [\"^UNSAFE_\"],\n        \"properties\": \"never\",\n        \"ignoreGlobals\": true,\n        \"ignoreDestructuring\": true\n      }\n    ],\n    \"comma-dangle\": [\n      \"error\",\n      {\n        \"arrays\": \"only-multiline\",\n        \"objects\": \"only-multiline\",\n        \"imports\": \"only-multiline\",\n        \"exports\": \"only-multiline\",\n        \"functions\": \"never\"\n      }\n    ],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"comma-style\": [\"error\", \"last\"],\n    \"computed-property-spacing\": [\n      \"error\",\n      \"never\",\n      { \"enforceForClassMembers\": true }\n    ],\n    \"constructor-super\": \"error\",\n    \"curly\": [\"error\", \"multi-line\"],\n    \"default-case-last\": \"error\",\n    \"dot-location\": [\"error\", \"property\"],\n    \"dot-notation\": [\"error\", { \"allowKeywords\": true }],\n    \"eol-last\": \"error\",\n    \"eqeqeq\": [\"error\", \"always\", { \"null\": \"ignore\" }],\n    \"func-call-spacing\": [\"error\", \"never\"],\n    \"generator-star-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"indent\": [\n      \"error\",\n      2,\n      {\n        \"SwitchCase\": 1,\n        \"VariableDeclarator\": 1,\n        \"outerIIFEBody\": 1,\n        \"MemberExpression\": 1,\n        \"FunctionDeclaration\": { \"parameters\": 1, \"body\": 1 },\n        \"FunctionExpression\": { \"parameters\": 1, \"body\": 1 },\n        \"CallExpression\": { \"arguments\": 1 },\n        \"ArrayExpression\": 1,\n        \"ObjectExpression\": 1,\n        \"ImportDeclaration\": 1,\n        \"flatTernaryExpressions\": false,\n        \"ignoreComments\": false,\n        \"ignoredNodes\": [\n          \"TemplateLiteral *\",\n          \"JSXElement\",\n          \"JSXElement > *\",\n          \"JSXAttribute\",\n          \"JSXIdentifier\",\n          \"JSXNamespacedName\",\n          \"JSXMemberExpression\",\n          \"JSXSpreadAttribute\",\n          \"JSXExpressionContainer\",\n          \"JSXOpeningElement\",\n          \"JSXClosingElement\",\n          \"JSXFragment\",\n          \"JSXOpeningFragment\",\n          \"JSXClosingFragment\",\n          \"JSXText\",\n          \"JSXEmptyExpression\",\n          \"JSXSpreadChild\"\n        ],\n        \"offsetTernaryExpressions\": true\n      }\n    ],\n    \"key-spacing\": [\"error\", { \"beforeColon\": false, \"afterColon\": true }],\n    \"keyword-spacing\": [\"error\", { \"before\": true, \"after\": true }],\n    \"lines-between-class-members\": [\n      \"error\",\n      \"always\",\n      { \"exceptAfterSingleLine\": true }\n    ],\n    \"multiline-ternary\": [\"error\", \"always-multiline\"],\n    \"new-cap\": [\n      \"error\",\n      { \"newIsCap\": true, \"capIsNew\": false, \"properties\": true }\n    ],\n    \"new-parens\": \"error\",\n    \"no-array-constructor\": \"error\",\n    \"no-async-promise-executor\": \"error\",\n    \"no-caller\": \"error\",\n    \"no-case-declarations\": \"error\",\n    \"no-class-assign\": \"error\",\n    \"no-compare-neg-zero\": \"error\",\n    \"no-cond-assign\": \"error\",\n    \"no-const-assign\": \"error\",\n    \"no-constant-condition\": [\"error\", { \"checkLoops\": false }],\n    \"no-control-regex\": \"error\",\n    \"no-debugger\": \"error\",\n    \"no-delete-var\": \"error\",\n    \"no-dupe-args\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-duplicate-case\": \"error\",\n    \"no-useless-backreference\": \"error\",\n    \"no-empty\": [\"error\", { \"allowEmptyCatch\": true }],\n    \"no-empty-character-class\": \"error\",\n    \"no-empty-pattern\": \"error\",\n    \"no-eval\": \"error\",\n    \"no-ex-assign\": \"error\",\n    \"no-extend-native\": \"error\",\n    \"no-extra-bind\": \"error\",\n    \"no-extra-boolean-cast\": \"error\",\n    \"no-extra-parens\": [\"error\", \"functions\"],\n    \"no-fallthrough\": \"error\",\n    \"no-floating-decimal\": \"error\",\n    \"no-func-assign\": \"error\",\n    \"no-global-assign\": \"error\",\n    \"no-implied-eval\": \"error\",\n    \"no-import-assign\": \"error\",\n    \"no-invalid-regexp\": \"error\",\n    \"no-irregular-whitespace\": \"error\",\n    \"no-iterator\": \"error\",\n    \"no-labels\": [\"error\", { \"allowLoop\": false, \"allowSwitch\": false }],\n    \"no-lone-blocks\": \"error\",\n    \"no-loss-of-precision\": \"error\",\n    \"no-misleading-character-class\": \"error\",\n    \"no-prototype-builtins\": \"error\",\n    \"no-useless-catch\": \"error\",\n    \"no-mixed-operators\": [\n      \"error\",\n      {\n        \"groups\": [\n          [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n          [\"&&\", \"||\"],\n          [\"in\", \"instanceof\"]\n        ],\n        \"allowSamePrecedence\": true\n      }\n    ],\n    \"no-mixed-spaces-and-tabs\": \"error\",\n    \"no-multi-spaces\": \"error\",\n    \"no-multi-str\": \"error\",\n    \"no-multiple-empty-lines\": [\"error\", { \"max\": 1, \"maxEOF\": 0 }],\n    \"no-new\": \"error\",\n    \"no-new-func\": \"error\",\n    \"no-new-object\": \"error\",\n    \"no-new-symbol\": \"error\",\n    \"no-new-wrappers\": \"error\",\n    \"no-obj-calls\": \"error\",\n    \"no-octal\": \"error\",\n    \"no-octal-escape\": \"error\",\n    \"no-proto\": \"error\",\n    \"no-redeclare\": [\"error\", { \"builtinGlobals\": false }],\n    \"no-regex-spaces\": \"error\",\n    \"no-return-assign\": [\"error\", \"except-parens\"],\n    \"no-self-assign\": [\"error\", { \"props\": true }],\n    \"no-self-compare\": \"error\",\n    \"no-sequences\": \"error\",\n    \"no-shadow-restricted-names\": \"error\",\n    \"no-sparse-arrays\": \"error\",\n    \"no-tabs\": \"error\",\n    \"no-template-curly-in-string\": \"error\",\n    \"no-this-before-super\": \"error\",\n    \"no-throw-literal\": \"error\",\n    \"no-trailing-spaces\": \"error\",\n    \"no-undef\": \"error\",\n    \"no-undef-init\": \"error\",\n    \"no-unexpected-multiline\": \"error\",\n    \"no-unmodified-loop-condition\": \"error\",\n    \"no-unneeded-ternary\": [\"error\", { \"defaultAssignment\": false }],\n    \"no-unreachable\": \"error\",\n    \"no-unreachable-loop\": \"error\",\n    \"no-unsafe-finally\": \"error\",\n    \"no-unsafe-negation\": \"error\",\n    \"no-unused-expressions\": [\n      \"error\",\n      {\n        \"allowShortCircuit\": true,\n        \"allowTernary\": true,\n        \"allowTaggedTemplates\": true\n      }\n    ],\n    \"no-use-before-define\": [\n      \"error\",\n      { \"functions\": false, \"classes\": false, \"variables\": false }\n    ],\n    \"no-useless-call\": \"error\",\n    \"no-useless-computed-key\": \"error\",\n    \"no-useless-constructor\": \"error\",\n    \"no-useless-escape\": \"error\",\n    \"no-useless-rename\": \"error\",\n    \"no-useless-return\": \"error\",\n    \"no-void\": \"error\",\n    \"no-whitespace-before-property\": \"error\",\n    \"no-with\": \"error\",\n    \"object-curly-newline\": [\n      \"error\",\n      { \"multiline\": true, \"consistent\": true }\n    ],\n    \"object-curly-spacing\": [\"error\", \"always\"],\n    \"object-property-newline\": [\n      \"error\",\n      { \"allowMultiplePropertiesPerLine\": true }\n    ],\n    \"one-var\": [\"error\", { \"initialized\": \"never\" }],\n    \"operator-linebreak\": [\n      \"error\",\n      \"after\",\n      { \"overrides\": { \"?\": \"before\", \":\": \"before\", \"|>\": \"before\" } }\n    ],\n    \"padded-blocks\": [\n      \"error\",\n      { \"blocks\": \"never\", \"switches\": \"never\", \"classes\": \"never\" }\n    ],\n    \"prefer-const\": [\"error\", { \"destructuring\": \"all\" }],\n    \"prefer-promise-reject-errors\": \"error\",\n    \"prefer-regex-literals\": [\"error\", { \"disallowRedundantWrapping\": true }],\n    \"quote-props\": [\"error\", \"as-needed\"],\n    \"quotes\": [\n      \"error\",\n      \"single\",\n      { \"avoidEscape\": true, \"allowTemplateLiterals\": false }\n    ],\n    \"rest-spread-spacing\": [\"error\", \"never\"],\n    \"semi\": [2, \"always\"],\n    \"semi-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"space-before-blocks\": [\"error\", \"always\"],\n    \"space-before-function-paren\": [\"off\"],\n    \"space-in-parens\": [\"error\", \"never\"],\n    \"space-infix-ops\": \"error\",\n    \"space-unary-ops\": [\"error\", { \"words\": true, \"nonwords\": false }],\n    \"spaced-comment\": [\n      \"error\",\n      \"always\",\n      {\n        \"line\": { \"markers\": [\"*package\", \"!\", \"/\", \",\", \"=\"] },\n        \"block\": {\n          \"balanced\": true,\n          \"markers\": [\"*package\", \"!\", \",\", \":\", \"::\", \"flow-include\"],\n          \"exceptions\": [\"*\"]\n        }\n      }\n    ],\n    \"symbol-description\": \"error\",\n    \"template-curly-spacing\": [\"error\", \"never\"],\n    \"template-tag-spacing\": [\"error\", \"never\"],\n    \"unicode-bom\": [\"error\", \"never\"],\n    \"use-isnan\": [\n      \"error\",\n      {\n        \"enforceForSwitchCase\": true,\n        \"enforceForIndexOf\": true\n      }\n    ],\n    \"valid-typeof\": [\"error\", { \"requireStringLiterals\": true }],\n    \"wrap-iife\": [\"error\", \"any\", { \"functionPrototypeMethods\": true }],\n    \"yield-star-spacing\": [\"error\", \"both\"],\n    \"yoda\": [\"error\", \"never\"]\n  }\n}"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\.gitlab-ci.yml",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> .gitlab-ci.yml: This document outlines a CI/CD pipeline configuration for a project using GitLab CI, specifying stages for pipeline execution and deployment, with a focus on installing dependencies and running tests, as well as commented-out deployment instructions for Vercel.",
                "content": "image: comp1531/automarking:latest\n\nstages:\n  - pipeline\n  - deployment\n\npipeline:\n  stage: pipeline\n  script:\n    - npm install\n    - npm test\n  only:\n    - master\n    - merge_requests\n# deployment:\n#   stage: deployment\n#   needs: [pipeline]\n#   resource_group: vercel-deploy\n#   variables:\n#     VERCEL_TOKEN: \"CHANGE_THIS_HERE\" # change this to your vercel token\n#   script:\n#     - npm install --global vercel@canary\n#     - vercel pull --yes --environment=production --token=${VERCEL_TOKEN}\n#     - vercel deploy --prod --token=${VERCEL_TOKEN}\n#   only: # change this if you want to deploy from other branches\n#     - master\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> package.json: The chunk represents the complete content of a `package.json` file for a Node.js project named \"lab09_deploy,\" detailing its version, description, main entry point, scripts, dependencies, and development dependencies necessary for building and testing the application.",
                "content": "{\n  \"name\": \"lab09_deploy\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[TOC]\",\n  \"main\": \"src/server.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"ts-node\": \"ts-node\",\n    \"start\": \"ts-node src/server.ts\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.4.5\",\n    \"express\": \"^4.19.2\",\n    \"morgan\": \"^1.10.0\",\n    \"sync-request\": \"^6.1.0\",\n    \"ts-node\": \"^10.9.2\"\n  },\n  \"devDependencies\": {\n    \"@types/cors\": \"^2.8.17\",\n    \"@types/express\": \"^4.17.21\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/morgan\": \"^1.9.9\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.7.1\",\n    \"@typescript-eslint/parser\": \"^7.7.1\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-jest\": \"^28.3.0\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"ts-node-dev\": \"^2.0.0\",\n    \"typescript\": \"^5.4.5\"\n  }\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> README.md: This chunk serves as the introduction and initial setup instructions for Lab09 Deploy, outlining the rationale, objectives, and steps for deploying a backend server application using Vercel, along with package installation guidance.",
                "content": "# Lab09 Deploy <!-- omit in toc -->\n\n[TOC]\n\n# Due Date <!-- omit in toc -->\n\nWeek 10 Monday 8:00 pm [Sydney Local Time](https://www.timeanddate.com/worldclock/australia/sydney).\n\n# 1. Background\n\n## 1.1. Rationale\n\nDeploy deploy deploy \ud83d\ude80! While having our forum application working locally is fun and all, there's no point if you can't show it off to everyone else \ud83d\ude0e!\n\nIn this lab, you will expose your backend server application to the outside world via serverless functions and using databases. You can use it to chat with your friends, host secret parties or plot a coup d'etat against COMP1531 staff - the possibilities are endless!\n\n## 1.2. What we'll be doing!\n\n1. We'll be using a very basic express server to demonstrate deployment! It has a basic implementation of the following routes:\n\n- root (`/`),\n- echo (`/echo/echo`),\n- add name (`/add/name`),\n- view names (`/view/names`), and\n- clear (`/clear`)\n\n2. Although it is not a requirement that you deploy to Vercel in this lab, we recommend doing so as you will receive the most support from our staff this way.\n\n3. There are several steps, please patiently go through each of them. **Please read the lab instructions regarding the [submission process](#26-testing-and-submitting-your-deployed_url) carefully** when you've finished.\n\nA quick visual guide on how deployment will change things for us.\n\n![4.1](assets/4.1.background-info-diagram.png)\n\nNormally, we run our server (`server.ts`) locally on one terminal. This allows us to use another terminal to run tests to send requests to that server. Vercel however will host the server for us! All we need to do after that is to configure our tests, such that it sends HTTP requests to Vercel.\n\n## 1.3. Getting Started\n\n- Copy the SSH clone link from GitLab and clone this repository on either VLAB or your local machine.\n- In your terminal, change your directory (using the `cd` command) into the newly cloned lab.\n\n## 1.4. Package Installation\n\n1. Open [package.json](package.json) and look at existing packages in `\"dependencies\"` and `\"devDependencies\"`. Install them with:\n\n```bash\nnpm install\n```\n\n2. That's it!. You'll notice we have a very basic express server, similar to what you would have for your project.\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> README.md: This chunk outlines the tasks involved in setting up a Vercel account and deploying a server using Vercel, including account creation, login procedures, and configuration of the deployment settings. It is part of the broader lab instructions for deploying a backend server application in the context of a forum project.",
                "content": "# 2. Task\n\nReminder: if you encounter any bugs, please read the [debugging section](#27-common-issues). Make sure to carefully read the instructions as you progress through the lab. **The vast majority of issues occur when steps are accidentally skipped.**\n\n## 2.1. Setup your Vercel account\n\nYou may choose to follow the video guide or the written steps. The steps may also include some pictures. To view them click on the toggle icon.\n\n### 2.1.1. Video guide\n\nClick [here](https://youtu.be/4qZ_yRh6KOY) for a demo of this part of the lab!\n\n### 2.1.2. Steps\n\n1. Create an account! We recommend signing up with email or an existing GitHub account.\n\n   - To signup with email go to [https://vercel.com/signup](https://vercel.com/signup).\n   - Follow the prompts and click 'Continue with Email' or continue with another provider if you wish.\n\n<img src=\"assets/1.signup-email.png\" width=\"700px\" />\n\n2. Login by typing the command below. Follow the prompts to login.\n\n```bash\nnpx -y vercel login\n```\n\n<img src=\"assets/npxvercel.png\" height=\"200px\" />\n\n3. Once you're logged in, run the command below. You'll then be asked a series of questions which will help deploy your current directory to Vercel.\n\n```bash\nnpx -y vercel\n```\n\nPotential output you may see:\n\n```\nSet up and deploy \u201c~/current_directory/lab-09-deploy? (Y/n) \u2192 Y\nWhich scope do you want to deploy to? \u2192 Press enter\nLink to existing project? (y/N) \u2192 N\nWhat\u2019s your project\u2019s name? (lab-09-deploy) \u2192 Press enter\nIn which directory is your code located? ./ \u2192 Press enter\nWant to modify these settings? (y/N) \u2192 N\n```\n\nExample of how this may look for you!\n\n<img src=\"assets/npxvercelcreate.png\" height=\"150px\" />\n\n4. Afterwards we should receive two links!\n\n- One link allows you to inspect the deployment on Vercel.\n- The other navigates to the deployed URL. **If it's showing 404 that's completely normal for now.**\n\nExample of what you may see:\n\n<img src=\"assets/npxvercellinks.png\" height=\"150px\" />\n\n## 2.2. Deploy Server using Vercel\n\n### 2.2.1. Telling Vercel where to find our Server\n\n**In the root directory**, create a file called `vercel.json` and copy the following content into the file. This essentially configures our Vercel deployment to redirect all routes to the `server.ts` file.\n\n```json\n{\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"src/server.ts\",\n      \"use\": \"@vercel/node\"\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"src/server.ts\"\n    }\n  ]\n}\n```\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> README.md: This chunk is part of the deployment section of the lab document, specifically detailing the methods for deploying the server application to Vercel, including the CI/CD approach for automatic deployment when changes are pushed to the GitLab repository.",
                "content": "### 2.2.2. Deployment Methods\n\nThere are two ways you can deploy your code from your directory to Vercel!\n\n### 2.2.3. Method 1: Using CI/CD to automatic deploy when you `git push`.\n\n1. Log onto your vercel account and click your profile in the top right, then `Account Settings`.\n\n<img src=\"assets/vercelAccountSettings.png\" height=\"450px\" />\n\n2. Click on `Settings`, then `Tokens`, then fill in the `Create Token` form.\n\n<img src=\"assets/vercelCreateToken.png\" height=\"450px\" />\n\n> NOTE: It is generally a good idea to set an expiration date for your token. This is a security measure to ensure that your token is not used maliciously if it is ever leaked. 90 days is a good starting point and should invalidate itself after the end of this course.\n\n3. Copy the token. Make sure you have copied it before closing the window. If you did not copy it and have lost it, you will need to delete it and repeat **Step 2**.\n4. Uncomment the comments in [`.gitlab-ci.yml`](./.gitlab-ci.yml) and replace `CHANGE_THIS_HERE` with the token you copied.\n\n> FYI: It is not recommended or good security practice to store your token in your repository as a committed file.\n>\n> You should treat an API/Token key as a password and keep it as secure as possible.\n>\n> Generally, best practice would involve injecting the token as an runtime environment variable in your CI/CD pipeline. If you were to do this for a personal project, you can see how to do it [here](https://docs.gitlab.com/ee/ci/variables/#for-a-project).\n>\n> However, due to limitations of permissioning student repositories within GitLab, we cannot give you access to modify the repository settings directly.\n\n```yml\n# TODO: Open .gitlab-ci.yml and uncomment the deployment stage\ndeployment:\n  stage: deployment\n  needs: [pipeline]\n  resource_group: vercel-deploy\n  variables:\n    VERCEL_TOKEN: 'CHANGE_THIS_HERE' # change this to your vercel token\n  script:\n    - npm install --global vercel@canary\n    - vercel pull --yes --environment=production --token=${VERCEL_TOKEN}\n    - vercel deploy --prod --token=${VERCEL_TOKEN}\n  only:\n    - master # change this if you want to deploy from other branches\n```\n\n> NOTE: For iteration 3, if you're deploying from another branch, remember to modify `.gitlab-ci.yml`. Replace `master` with the branch you're deploying from instead.\n\n5. Commit the changes and push to `master`. This will trigger the pipeline to deploy your server to Vercel after the `pipeline` job gets completed.\n\n> FYI: `resource_group: vercel-deploy` in the .gitlab-ci.yml file ensures that only one deployment job runs at a time. This is to prevent multiple deployments from running concurrently and potentially causing issues.\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> README.md: This chunk is part of the deployment process for a forum application using Vercel, specifically detailing the second method for manual deployment via the command line interface (CLI) and subsequent steps to update the deployed URL. It follows the initial setup and configuration of the Vercel account and precedes the instructions for setting up a deployed database to handle data persistence.",
                "content": "### 2.2.4. Method 2: Using the CLI to manually deploy\n\nYou can do either:\n\n1. Create a preview by running the following commands in your terminal\n\n```bash\nnpx -yes vercel pull\nnpx -yes vercel\n```\n\n2. Promote the most recent preview to production\n\n- Click on lab09-deploy at the top. Then click on Deployments to see a list.\n- Find your latest deployment. At the very right click on the three horizontal dots and click Promote To Production.\n\n<img src=\"assets/vercelPromoteToProd.png\" height=\"450px\" />\n\n2. Or alternatively, deploy directly to production.\n\n```bash\nnpx -yes vercel pull --yes --environment=production\nnpx -yes vercel --prod\n```\n\n## 2.3. Update your URL in your code!\n\n1. Make your deployed url contain your zID. Go to `Project Settings` > `Domains` > `Edit`, and modify your domain name to include your zID, e.g. `z9999999-forum-deploy.vercel.app`.\n\nNavigate to: `Project Settings > Domain > Edit`:\n\n<img src=\"assets/2.8.edit-domain-name.png\" height=\"450px\" />\n\n2. Congratulations! You've now deployed your server onto the web...somewhat. If you (or a friend) visits the root (`/`) or echo (`/echo/echo?message=hello`) routes on your deployed url, your deployed server should respond with the resulting response from your backend - awesome!\n\nHowever, as soon as you try to access other routes that manipulate your data store, you'll start running into server errors.\n\nFor example: Failed DELETE '/clear' request using API Client:\n\n![image](assets/2.9.persistance-deployment-error.png)\n\nWhy is this the case? Well, Vercel is a [serverless](https://vercel.com/docs/functions/serverless-functions) deployment option that will only respond when a request is made. Any state variables, including local files e.g. `database.json`, will not be preserved. This means that if we'd implemented persistence - we'd lose it! What's a more robust solution? Instead of reading and writing to a file in our folder, let's read and write our data from an online database.\n\n## 2.4. Setup Deployed Database\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> README.md: This chunk is part of the section detailing the setup of a deployed database for the forum application in Lab 09, specifically addressing the transition from local file storage to using Vercel's online database for data persistence. It outlines the context and steps necessary to create and configure the database, including installation of required packages and code snippets for connecting to the database.",
                "content": "### 2.4.1. Context\n\nFor the project we've been persisting data by writing to a json file, e.g. `database.json`. This however will not work anymore as we can't write to files on Vercel! What we will do instead is **store everything as a key-value pair** in Vercel's online database. So in the case of lab09, our database might look like this.\n\n```typescript\n{ \"names\": [\"Tam\", \"Yuchao\"] }\n```\n\n### 2.4.2. Steps\n\n1. On your deployment page, navigate to the `Storage` tab by: `Top Bar > Storage`\n\n<img src=\"assets/3.1.storage-tab.png\" height=\"450px\" />\n\n2. Select `Create Database` and sel;select `Upstash` as the 'Storage Provider' and `Upstash KV` as the database type. Then click \"Continue\".\n\n<img src=\"assets/vercelDatabaseBrowse.png\" height=\"450px\" />\n\n3. For `Primary Region` select `N. California, USA (us-west-1)` and select the `Free` plan.\n   Avoid selecting `Sydney, Australia (ap-southeast-2)` as this will lead to longer round trip times for network requests between your deployment and your database.\n\n<img src=\"assets/3.3.database-form.png\" height=\"450px\" />\n\n4. Hit 'Continue' then provide a Database Name of `BackendDatabase` and click 'Create'. Once you get to the `Environments` prompt, ensure all environments (Development, Preview, Production) are all selected, then click 'Connect'. This should redirect you to a screen that looks like:\n\n<img src=\"assets/vercelUpstashScreen.png\" height=\"450px\" />\n\n5. Click on `Copy Snippet` and paste the contents into a file called [`.env`](./.env). The contents of the file should look like:\n\n```.env\nKV_URL=\"...\"\nKV_REST_API_READ_ONLY_TOKEN=\"...\"\nKV_REST_API_TOKEN=\"...\"\nKV_REST_API_URL=\"...\"\n```\n\nThese are runtime environment variables that will be used to as credentials to connect to your database. **These are considered passwords, do not share these with anyone or post it publicly!**\n\n6. Now, go back to your terminal and install [`@upstash/redis`](https://www.npmjs.com/package/@upstash/redis) by running:\n\n```bash\nnpm install @upstash/redis\n```\n\n7. Copy the following code snippet into [src/server.ts](src/server.ts) to open a connection to our database so we can read and write to it.\n\n```typescript\nimport { Redis } from '@upstash/redis';\nimport { config } from 'dotenv';\n\n// Read in environment variables from `.env` if it exists\nconfig({ path: '.env' });\n\n// Initialize Redis\nexport const redis = Redis.fromEnv();\n```\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> README.md: This chunk is situated within the \"Task\" section of the document, specifically under \"2.5. Use Deployed Database,\" which outlines how to replace local data persistence methods with HTTP requests to a serverless online database in the context of deploying a forum application on Vercel. It provides instructions for adding new routes to the server and modifying existing data handling functions to ensure data persistence in a serverless environment.",
                "content": "## 2.5. Use Deployed Database\n\n### 2.5.1. Context\n\nVercel is serverless! Among other benefits, this allows us to quickly deploy our projects without too much headache. The downside of this is that it only has a local scope. In other words, **it has no persistence and its scope is lost at the end of its execution**. In the case of Vercel for example, this means variables inside your local scope will only persist for around 10 seconds.\n\nHow will we persist our data then? What we can do is replace every `setData` and `getData` call with a HTTP request to Vercel's online database. This will require us to:\n\n1. Add two new routes in [src/server.ts](src/server.ts)\n2. Modify `setData` and `getData` in [src/names.ts](src/names.ts)\n\n### 2.5.2. Steps\n\n> To read and write to redis, we have to use asynchronous JavaScript functions. This is because the database is hosted online and we have to wait for the response to come back. This is why we use `async` and `await` in the following steps. You are not expected to understand the intricacies of asynchronous JavaScript in COMP1531, hence the code is given to you.\n>\n> If you would like to learn more, you can read about [async/await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) and [promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n1. Copy the two routes below and put them inside [src/server.ts](src/server.ts). These routes will serve as a way to get and put data into our database.\n\n```typescript\napp.get('/data', async (req: Request, res: Response) => {\n  const data = (await redis.get('data')) ?? {};\n  return res.status(200).json(data);\n});\n\napp.put('/data', async (req: Request, res: Response) => {\n  const { data } = req.body;\n  await redis.set('data', JSON.stringify(data));\n  return res.status(200).json({});\n});\n```\n\n- `await redis.get('data')` will return the value for the key `data` in our database. Here the method will automatically convert it to an object if it exists. By default, it will return `null` if the key does not exist.\n- `(await redis.get('data')) ?? {}` is a nullish coalescing operator. It will return the LHS if it exists, otherwise it will return the RHS `{}` empty object.\n- `await redis.set('data', JSON.stringify(data));` will set the key `data` in our database to the stringified version of the object `data`.\n\nTry testing this route by sending a PUT request via an API client. For example:\n\n![image](assets/3.5.successful-data-change.png)\n\nLikewise, if you send a GET request you should be able to retrieve the data you just set.\n\nFrom here, when you need to `setData()` or `getData()` you should use these two routes instead.\n\n2. Modify the implementation of `setData` and `getData` to use the new `GET /data` and `PUT /data` respectively in [src/names.ts](src/names.ts).\n\nAn example implementation can be found below:\n\n```typescript\nimport request, { HttpVerb } from 'sync-request';\n// Ensure that your DEPLOYED_URL has been updated correctly\nimport { DEPLOYED_URL } from './submission';\n```\n\n```typescript\nconst requestHelper = (method: HttpVerb, path: string, payload: Record<string, unknown>) => {\n  const res = request(method, DEPLOYED_URL + path, {\n    qs: ['GET', 'DELETE'].includes(method) ? { ...payload } : undefined,\n    json: ['GET', 'DELETE'].includes(method) ? undefined : { ...payload },\n    timeout: 20000\n  });\n  if (res.statusCode !== 200) {\n    throw new Error('Failed to properly request data');\n  }\n  return JSON.parse(res.body.toString());\n};\n\nconst getData = (): Data => {\n  try {\n    const res = requestHelper('GET', '/data', {});\n    return { ...dataStore, ...res };\n  } catch (err) {\n    console.error('Failed to properly request data, likely corrupted');\n    console.error(err);\n    return dataStore;\n  }\n};\n\nexport const setData = (newData: Data): void => {\n  requestHelper('PUT', '/data', { data: newData });\n};\n```\n\nThis is just one example of a possible implementation. You may have different keys or methods to save persistent data.\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> README.md: This chunk provides detailed instructions on testing and submitting the deployed URL for the forum application, including common issues that may arise during the process and debugging tips to resolve them. It is situated within the broader context of deploying a backend server application using Vercel, specifically focusing on the final steps of ensuring the deployment is functional and properly configured.",
                "content": "## 2.6. Testing and Submitting your `DEPLOYED_URL`\n\n1. Open [src/submission.ts](src/submission.ts) and modify the `DEPLOYED_URL` to your newly deployed site, e.g. https://z9999999-forum-deploy.vercel.app/.\n\n**A reminder that the `DEPLOYED_URL` must contain your zID exactly once.** You may need to go to Settings > Domains > and edit your deployed url to include your zID.\n\n2. Again, don't forget to `git add`, `git commit`, and then `git push`. If you miss this step, we won't be able to run our tests against your `DEPLOYED_URL`. We won't allow reruns for forgetting to push your code.\n\n3. Ensure all tests pass by running `npm t`, it should take around 20 seconds (NOTE: don't forget to remove the `test.todo` and uncomment the actual test suite!). If there are issues, head to the debugging section below.\n\n## 2.7. Common Issues\n\n<details close>\n  <summary> 1. Incorrect format for deployed URL </summary>\n\n- Ensure the URL begins with `http` or `https`. Also check that it **doesn't** end with `/`.\n</details>\n\n<details close>\n  <summary> 2. You're getting a 404 error </summary>\n\n- You've probably forgotten to push `vercel.json`!\n</details>\n\n<details close>\n  <summary> 3. You're getting a 500 error </summary>\n\n- First, check to see if your pipeline is passing! If it's failing, click on it to view its details.\n- Then go to Vercel and check the server log. The server log should contain an error message, providing details on which line the error occurred as well.\n- 500 errors represent server side issues, meaning the issue likely lies within `server.ts` or its associated functions.\n</details>\n\n<details close>\n  <summary> 4. I'm getting the error \"Cannot find module 'easy-libcurl' from 'node_modules/sync-request-curl/dist/cjs/request.js'\" </summary>\n\n- Remember to replace `sync-request-curl` with `sync-request`.\n</details>\n\n<details close>\n  <summary> 5. I have vulnerabilities when I install Vercel? </summary>\n\n- You can ignore those warnings for this lab.\n</details>\n\n## 2.8. Debugging tips\n\n<details close>\n  <summary> 1. Use an API client </summary>\n\n- API clients such as Postman are extremely helpful for this lab.\n- Send GET and PUT requests to to `/data` to see whether things are being stored and retrieved as expected.\n- Replicate tests you've made, by sending requests to the routes for `clear`, `addName` and `viewNames`.\n- For example, the issue below was caused by forgetting to add, commit and push changes made to `submission.ts`.\n![image](assets/5.1.debug.api.client.png)\n</details>\n\n<details close>\n\n  <summary> 2. Check the logs </summary>\n\n- Go to your project's list of deployments and click on the latest deployment. At the top there should be a tab called 'Logs'.\n- Instead of having `server.ts` output to a terminal, it gets output here.\n- Any `console.log` statements in your server or function implementations, will also show here.\n  ![image](assets/5.2.debug-log.png)\n  ![image](assets/5.3.debug-log-console.png)\n\n</details>\n\n<details close>\n  <summary> 3. General tips & Additional resources </summary>\n\n- Use `test.only` in your tests to focus on one test at a time if you are failing them.\n- Keep in mind that Vercel only allows 100 deployments a day, so don't redeploy too often.\n- If deployment is failing during setup, read the error message by going to Your project > Deployment > Click on the latest deployment > Read the deployment details.\n- [Vercel Error Codes](https://vercel.com/docs/errors)\n</details>\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> README.md: The chunk is located at the end of the document and provides instructions for submitting the completed lab work, including steps for using Git to push changes, verifying the deployed URL, and recommendations for managing storage on CSE machines.",
                "content": "# 3. Submission\n\n- Use `git` to `add`, `commit`, and `push` your changes on your master branch. Your GitLab pipeline should pass.\n- Check that your zID inside `DEPLOYED_URL` is correct. Typos won't be accepted as grounds for a re-run.\n\n**If you have pushed your latest changes to master on Gitlab no further action is required! At the due date and time, we automatically collect your work from what's on your master branch on Gitlab.**\n\nAfterwards, assuming you are working on a CSE machine (e.g. via VLAB), we strongly recommend that you remove your `node_modules` directory with the command:\n\n```bash\nrm -rf node_modules\n```\n\nThis is because CSE machines only allow each user to have a maximum of 2GB, so you will eventually run out of storage space. It is always possible to `npm install` your packages again!\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\src\\config.json",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> src -> config.json: The chunk contains configuration details, specifically the URL and port number, for a local server setup referenced in the overall document.",
                "content": "{\n  \"url\": \"http://127.0.0.1\",\n  \"port\": \"49152\"\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\src\\echo.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> src -> echo.ts: This chunk defines a function named `echo` that takes a string message as input and throws an `InputError` if the message is exactly 'echo', otherwise it returns an object containing the message. It is part of a module that handles input validation and error management.",
                "content": "import { InputError } from './errors';\n\nexport function echo(message: string) {\n  if (message === 'echo') {\n    throw new InputError(\"Cannot echo 'echo' lolsss!\");\n  }\n  return { message };\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\src\\errors.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> src -> errors.ts: The chunk defines a custom error class named `InputError` that extends the built-in `Error` class, likely intended for handling input-related errors in a JavaScript application.",
                "content": "export class InputError extends Error {}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\src\\names.test.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> src -> names.test.ts: This chunk contains a series of unit tests and helper functions for testing a web application's API endpoints, specifically focusing on functionalities such as adding names, viewing names, and handling errors. It is part of a larger test suite designed to ensure the correctness and reliability of the deployed application.",
                "content": "import request, { HttpVerb, Response } from 'sync-request';\nimport { DEPLOYED_URL } from './submission';\n\ntest.todo('Remove this line and uncomment the tests below!');\n\n// ========================================================================= //\n\n/*\n// Helpers\n\nconst parseResponse = (res: Response, path: string) => {\n  let caughtError = 'Unknown error';\n  let comp1531Hint = 'No hint available for this error';\n  const body = res.body.toString();\n  try {\n    // Try returning JSON\n    const jsonBody = JSON.parse(body);\n    if (jsonBody.error !== undefined && ![400].includes(res.statusCode)) {\n      caughtError = `Returned error object with status code ${res.statusCode}`;\n      comp1531Hint =\n        'For lab09_deploy, the only acceptable status code for error cases is 400. ' +\n        \"Since you returned { error: 'some message' } with a status code other than 400, the test fails\";\n    } else {\n      return jsonBody;\n    }\n  } catch (e: any) {\n    caughtError = e.message;\n    if (res.statusCode === 404) {\n      caughtError = `Missing route ${path} | ` + caughtError;\n      comp1531Hint = `The route '${path}' does not exist on your server (i.e. in server.ts). Check that you do not have any typos and your routes begin with a '/'`;\n    } else if (res.statusCode === 500) {\n      comp1531Hint =\n        'Your server has crashed. Check the terminal running the server to see the error stack trace';\n    } else {\n      comp1531Hint =\n        'Your routes may not be returning a valid JSON response - for example, the /clear should still return an empty object `{}` instead of undefined.';\n    }\n  }\n  const ret = {\n    testName: expect.getState().currentTestName,\n    returnedBody: body,\n    statusCode: res.statusCode,\n    caughtError,\n    comp1531Hint\n  };\n  console.log('Logging Error:', ret);\n  return ret;\n};\n\nconst requestHelper = (method: HttpVerb, path: string, payload: object) => {\n  let qs = {};\n  let json = {};\n  if (['GET', 'DELETE'].includes(method)) {\n    qs = payload;\n  } else {\n    // PUT/POST\n    json = payload;\n  }\n\n  const res = request(method, DEPLOYED_URL + path, { qs, json, timeout: 20000 });\n  return parseResponse(res, path);\n};\n\n// ========================================================================= //\n\nfunction clear() {\n  return requestHelper('DELETE', '/clear', {});\n}\n\nfunction root() {\n  return requestHelper('GET', '/', {});\n}\n\nfunction echo(message: string) {\n  return requestHelper('GET', '/echo/echo', { message });\n}\n\nfunction addName(name: string) {\n  return requestHelper('POST', '/add/name', { name });\n}\n\nfunction viewNames() {\n  return requestHelper('GET', '/view/names', {});\n}\n\n// ========================================================================= //\n\nbeforeEach(() => {\n  clear();\n});\n\nafterAll(() => {\n  clear();\n});\n\ndescribe('Deployed URL Sanity check', () => {\n  test('Looks for exactly one zID in the URL', () => {\n    const zIDs = DEPLOYED_URL.match(/z[0-9]{7}/g) || [];\n\n    // URL Sanity test\n    expect(zIDs.length).toEqual(1);\n    expect(DEPLOYED_URL.startsWith('http')).toBe(true);\n    expect(DEPLOYED_URL.endsWith('/')).toBe(false);\n\n    if (process.env.GITLAB_USER_LOGIN) {\n      // Pipeline CI test\n      expect(zIDs[0]).toEqual(process.env.GITLAB_USER_LOGIN);\n    }\n  });\n});\n\ndescribe('/', () => {\n  test('success', () => {\n    expect(root()).toStrictEqual({ message: expect.any(String) });\n  });\n});\n\ndescribe('/echo', () => {\n  test('success', () => {\n    expect(echo('helloworld')).toStrictEqual({ message: 'helloworld' });\n  });\n\n  test('failure', () => {\n    expect(echo('echo')).toStrictEqual({ error: expect.any(String) });\n  });\n});\n\ndescribe('/clear', () => {\n  test('return empty', () => {\n    expect(clear()).toStrictEqual({});\n  });\n\n  test('clear post', () => {\n    addName('Hayden');\n    expect(viewNames().names.length).toEqual(1);\n    expect(clear()).toStrictEqual({});\n    expect(viewNames()).toStrictEqual({ names: [] });\n  });\n});\n\ndescribe('/add/name', () => {\n  describe('errors', () => {\n    test.each([{ name: '' }, { name: 'a'.repeat(21) }])(\n      \"addName('$name') incorrect name length\",\n      ({ name }) => {\n        expect(addName(name)).toStrictEqual({ error: expect.any(String) });\n      }\n    );\n  });\n\n  describe('success', () => {\n    test('adding a name', () => {\n      expect(addName('Emily')).toStrictEqual({});\n    });\n  });\n});\n\ndescribe('/view/names', () => {\n  test('empty state', () => {\n    expect(viewNames()).toStrictEqual({ names: [] });\n  });\n\n  test('one name', () => {\n    addName('Tam');\n    expect(viewNames()).toStrictEqual({ names: ['Tam'] });\n  });\n\n  test('multiple names', () => {\n    addName('Tam');\n    addName('Rani');\n    addName('Emily');\n    addName('Brendan');\n    expect(viewNames()).toEqual({ names: ['Tam', 'Rani', 'Emily', 'Brendan'] });\n  });\n});\n\n*/"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\src\\names.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> src -> names.ts: This chunk contains the implementation of a simple in-memory data store for managing a list of names, including functions for adding, viewing, and clearing names, as well as validation for name length. It also handles persistent storage by writing to a JSON file.",
                "content": "import fs from 'fs';\nimport { InputError } from './errors';\nexport const DATABASE_FILE = 'database.json';\nconst MAX_LENGTH = 20;\nconst MIN_LENGTH = 1;\n\n// ========================================================================== //\n\ntype Data = {\n  names: string[];\n};\n\nlet dataStore: Data = {\n  names: []\n};\n\n// ========================================================================== //\n/**\n * HELPER FUNCTIONS\n\n * If there are multiple files that uses these functions, rather than redefining\n * them in each new file, it is better to move these helper functions into a\n * file of its own such as src/helper.ts, then export and import into other files.\n */\n\nconst getData = () => {\n  return dataStore;\n};\n\nexport const setData = (newData: Data) => {\n  dataStore = newData;\n  // Update our persistent data store with any data changes\n  fs.writeFileSync(DATABASE_FILE, JSON.stringify(dataStore));\n};\n\nconst checkValidName = (name: string): boolean => {\n  return !(name.length < MIN_LENGTH || name.length > MAX_LENGTH);\n};\n\n// ========================================================================== //\n\n// POST /add/name: (name: string) => {}\nexport function addName(name: string): Record<never, never> {\n  if (!checkValidName(name)) {\n    throw new InputError(\n      'For our reference solution, we have restricted the length of the name' +\n        ` to be between '${MIN_LENGTH}' and '${MAX_LENGTH}' characters.`\n    );\n  }\n  const data = getData();\n  data.names.push(name);\n  setData(data);\n  return {};\n}\n\n// GET /view/names: () => { names:  ['Adam', 'Ben', 'Carl'] }\nexport function viewNames(): { names: string[] } {\n  const data = getData();\n  return { names: data.names };\n}\n\nexport function clear(): Record<never, never> {\n  const data = getData();\n  data.names = [];\n  setData(data);\n  return {};\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\src\\server.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> src -> server.ts: This chunk represents the initial setup of an Express.js server, including the necessary imports, middleware configuration, and the definition of the root endpoint that responds with a welcome message. It establishes the foundational structure for handling HTTP requests in the application.",
                "content": "import express, { Request, Response } from 'express';\nimport cors from 'cors';\nimport fs from 'fs';\nimport morgan from 'morgan';\nimport { echo } from './echo';\nimport { DATABASE_FILE, setData, addName, viewNames, clear } from './names';\nimport { port, url } from './config.json';\nimport { InputError } from './errors';\n\nconst PORT: number = parseInt(process.env.PORT ?? port);\nconst SERVER_URL = `${url}:${PORT}`;\n\nconst app = express();\n\napp.use(cors());\napp.use(express.json());\napp.use(morgan('dev'));\n\ntype ErrorResponse = {\n  error: string;\n};\n\napp.get('/', (req: Request, res: Response<{ message: string }>) => {\n  console.log('Print to terminal: someone accessed our root url!');\n  res.status(200).json({ message: \"Welcome to Lab09 Deploy Server's root URL!\" });\n});\n\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> src -> server.ts: This chunk defines a GET endpoint `/echo/echo` in an Express.js server application, which processes incoming requests by echoing back a message provided in the query parameters. It includes error handling for input validation and server errors, ensuring appropriate HTTP status codes and responses are returned.",
                "content": "\n\napp.get(\n  '/echo/echo',\n  (req: Request<{ message: string }>, res: Response<ErrorResponse | ReturnType<typeof echo>>) => {\n    try {\n      const data = echo(req.query.message as string);\n      return res.status(200).json(data);\n    } catch (err) {\n      if (err instanceof InputError) {\n        return res.status(400).json({ error: err.message });\n      } else {\n        console.error(err);\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n    }\n  }\n);\n\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> src -> server.ts: This chunk defines a POST endpoint `/add/name` in an Express.js server application, which allows clients to add a name to a persistent data store. It handles incoming requests, processes the name from the request body, and returns a JSON response, including error handling for input validation and internal server errors.",
                "content": "\n\napp.post(\n  '/add/name',\n  (req: Request<{ name: string }>, res: Response<ErrorResponse | ReturnType<typeof addName>>) => {\n    try {\n      const data = addName(req.body.name);\n      return res.status(200).json(data);\n    } catch (err) {\n      if (err instanceof InputError) {\n        return res.status(400).json({ error: err.message });\n      } else {\n        console.error(err);\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n    }\n  }\n);\n\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> src -> server.ts: This chunk defines a GET endpoint `/view/names` in an Express.js server application, which retrieves and returns a list of names stored in a persistent database. It includes error handling for input errors and internal server errors.",
                "content": "\n\napp.get(\n  '/view/names',\n  (req: Request, res: Response<ErrorResponse | ReturnType<typeof viewNames>>) => {\n    try {\n      const data = viewNames();\n      return res.status(200).json(data);\n    } catch (err) {\n      if (err instanceof InputError) {\n        return res.status(400).json({ error: err.message });\n      } else {\n        console.error(err);\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n    }\n  }\n);\n\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> src -> server.ts: This chunk defines an Express.js route handler for the DELETE request to the '/clear' endpoint, which is responsible for clearing stored names in the application. It includes error handling for input errors and internal server errors, ensuring proper responses are sent back to the client. This functionality is part of a larger server application that manages a list of names and provides various endpoints for adding, viewing, and manipulating that data.",
                "content": "\n\napp.delete('/clear', (req: Request, res: Response<ErrorResponse | ReturnType<typeof clear>>) => {\n  try {\n    const data = clear();\n    return res.status(200).json(data);\n  } catch (err) {\n    if (err instanceof InputError) {\n      return res.status(400).json({ error: err.message });\n    } else {\n      console.error(err);\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n  }\n});\n\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> src -> server.ts: This chunk of code initializes the Express server, sets up persistent data loading from a database file, and logs the server's URL upon startup, following the definition of various API endpoints for handling names.",
                "content": "\n\nconst server = app.listen(PORT, '0.0.0.0', () => {\n  // Load existing persistent data before server starts\n  if (fs.existsSync(DATABASE_FILE)) {\n    setData(JSON.parse(String(fs.readFileSync(DATABASE_FILE))));\n  } else {\n    fs.writeFileSync(\n      DATABASE_FILE,\n      JSON.stringify({\n        names: []\n      })\n    );\n  }\n\n  console.log(`Server started at the URL: '${SERVER_URL}'`);\n});\n\n"
            },
            {
                "summary": "From assessments -> lab09_deploy -> src -> server.ts: This chunk is located at the end of the Express server setup code, where it handles the server's shutdown process upon receiving a SIGINT signal, ensuring a graceful termination of the server and exporting the app for potential use in other modules.",
                "content": "\n\nprocess.on('SIGINT', () => {\n  server.close(() => {\n    console.log('Shutting down server gracefully.');\n    process.exit();\n  });\n});\n\nexport default app;"
            }
        ]
    },
    {
        "filePath": "./assessments\\lab09_deploy\\src\\submission.ts",
        "chunks": [
            {
                "summary": "From assessments -> lab09_deploy -> src -> submission.ts: This document contains a code snippet that defines a constant URL for a deployed application, specifically formatted to include a unique identifier (zID) and to begin with 'https://'.",
                "content": "// The URL can be anything you want, as long as it contains your zID exactly once.\n// For example, 'https://z9999999-forum-deploy.vercel.app'\n// The URL must begin with 'https://'\nexport const DEPLOYED_URL = 'https://z9999999-forum-deploy.vercel.app';\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\contract.md",
        "chunks": [
            {
                "summary": "From assessments -> project -> contract.md: This chunk outlines the guidelines and procedures for team collaboration, including meeting schedules, communication methods, conflict resolution, and steps for addressing issues with team members' contributions.",
                "content": "Group:\n| zID      | Name    |\n| -------- | ------- |\n|          |         |\n|          |         |\n|          |         |\n|          |         |\n|          |         |\n\n1. When and where will we schedule meetings (e.g. 11am Wednesdays and 2pm Fridays: in-person at X location, on Teams video call, on Discord)?\n\n2. Where will we record our meeting minutes (e.g. Teams documents, Gitlab Wiki, Gitlab markdown file)?\n\n3. Where will we communicate (e.g. Teams channel, Discord, Messenger)?\n\n4. What is a reasonable response time for messages/posts when communicating?\n\n3. How will we handle conflicts (i.e. differing opinions)? Note: If conflicts cannot resolved this way, please contact your tutor.\n\n4. List the steps a team member does if they get stuck (e.g. stuck debugging).\n\n5. A day before the due date we notice a team member's work is very broken and incomplete. Instead of waiting until the due date, list the steps we will take to prevent this from occuring in the first place. Note: contact your tutor if this happens as well. \n"
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\data.md",
        "chunks": [
            {
                "summary": "From assessments -> project -> data.md: This chunk defines a JavaScript object named `data`, which is intended to hold a structure for managing users and quizzes, serving as a placeholder for future implementation.",
                "content": "```javascript\nlet data = {\n    // TODO: insert your data structure that contains \n    // users + quizzes here\n}\n```\n\n[Optional] short description: \n"
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\minutes-template.md",
        "chunks": [
            {
                "summary": "From assessments -> project -> minutes-template.md: This chunk serves as a template for organizing meeting details, including the agenda, action items, and questions for a tutor, facilitating structured documentation and retrieval of meeting information.",
                "content": "Please note this is a a guide/template which you do not need to use.\n\n| Meeting X |         |\n| --------  | ------- |\n| Date/time |         |\n|   Week    |         |\n| Attendees |         |\n\n### Agenda\n| Item      | Discussion/decision |\n| --------  | ------------------- |\n|           |                     |\n|           |                     |\n|           |                     |\n\n### Action Items/reminders\n- [ ] Task\n\n### Questions for tutor\n* Q1"
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\package.json",
        "chunks": [
            {
                "summary": "From assessments -> project -> package.json: The chunk represents the configuration of a JavaScript project, specifically detailing the scripts, dependencies, and development dependencies used, along with the module type, typically found in a package.json file.",
                "content": "{\n    \"scripts\": {\n        \"test\": \"jest\"\n    },\n    \"dependencies\": {\n        \"validator\": \"^13.7.0\"\n    },\n    \"devDependencies\": {\n        \"@babel/cli\": \"^7.22.5\",\n        \"@babel/core\": \"^7.22.5\",\n        \"@babel/preset-env\": \"^7.22.5\",\n        \"jest\": \"^28.1.0\"\n    },\n    \"type\": \"module\"\n}\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\README.md",
        "chunks": [
            {
                "summary": "From assessments -> project -> README.md: This chunk serves as the introduction to the COMP1531 Major Project, outlining the aims, overview, and context for the development of the quiz game platform \"Toohak,\" which is inspired by Kahoot. It establishes the project's objectives and the collaborative framework for students to build the backend server while adhering to a specified common interface for future frontend development.",
                "content": "# COMP1531 Major Project\n\n**\u2728 \ud83e\udd5c Toohak \ud83e\udd5c \u2728**\n\n## Contents\n\n[[_TOC_]]\n\n## Change Log\n\n## \ud83e\udee1 0. Aims:\n\n1. Demonstrate effective use of software development tools to build full-stack end-user applications.\n2. Demonstrate effective use of static testing, dynamic testing, and user testing to validate and verify software systems.\n3. Understand key characteristics of a functioning team in terms of understanding professional expectations, maintaining healthy relationships, and managing conflict.\n4. Demonstrate an ability to analyse complex software systems in terms of their data model, state model, and more.\n5. Understand the software engineering life cycle in the context of modern and iterative software development practices in order to elicit requirements, design systems thoughtfully, and implement software correctly.\n6. Demonstrate an understanding of how to use version control and continuous integration to sustainably integrate code from multiple parties.\n\n## \ud83c\udf08 1. Overview\n\nUNSW has been having severe issues with lecture attendance - students just aren't coming to class, and they're citing that class isn't interesting enough for them.\n\nUNSW must resort to giving into the limited attention span of students and gamify lecture and tutorial time as much as possible - by doing interactive and colourful quizzes.\n\nHowever, instead of licensing well-built and tested software, UNSW is hoping to use the pool of extremely talented and interesting COMP1531 students to create their own version to distribute around campus for free. The chosen game to \"take inspiration from\" is **<a href=\"https://kahoot.com/\">Kahoot</a>**.\n\n(For legal reasons, this is a joke).\n\nThe 25T1 cohort of COMP1531 students will build the **backend Javascript server** for a new quiz game platform, **Toohak**. We plan to task future students to build the frontend for Toohak, something you won't have to worry about.\n\n**Toohak** is the questionably-named quiz tool that allows admins to create quiz games, and players to join (without signing up) to participate and compete.\n\nWe have already specified a **common interface** for the frontend and backend to operate on. This allows both courses to go off and do their own development and testing under the assumption that both parties will comply with the common interface. This is the interface **you are required to use**.\n\nThe specific capabilities that need to be built for this project are described in the interface at the bottom. This is clearly a lot of features, but not all of them are to be implemented at once.\n\nWe highly recommend **creating and playing** a Kahoot game to better understand your task:\n- To sign up and log in as an admin, go to [kahoot.com](https://kahoot.com/).\n- To join a game created by an admin, go to [kahoot.it](https://kahoot.it/).\n\nNEW CHUNK\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk outlines the objectives and tasks for Iteration 0 of the COMP1531 Major Project, focusing on setting up the Toohak quiz application. It details the expectations for writing stub code, designing a data structure for users and quizzes, and following best practices for teamwork and Git management.",
                "content": "## \ud83d\udc2d 2. Iteration 0: Getting Started\n\n[You can watch the iteration 0 introductory video here.](https://youtu.be/YhBwRQN--gs) This video is not required watching (the specification is clear by itself) though many students find it useful as a starting point.\n\n### \ud83d\udc2d 2.1. Task\n\nThis iteration is designed as a warm-up to help you setup your project, learn Git and project management practices (see Marking Criteria), and understand how your team works together.\n\nIn this iteration, you are expected to:\n1. Write stub code for the basic functionality of Toohak. The basic functionality is defined in the interface section below.\n    * A stub is a function declaration and sample return value (see example below). **Do NOT write the implementation** for the stubbed functions. That is for the next iteration. In this iteration you are just focusing on setting up your function declarations and getting familiar with Git.\n    * Each team member must stub **AT LEAST 1** function each.\n    * Function stub locations should be inside files specified in the interface section below.\n    * Return values should exactly match the interface table below (see example below).\n```javascript\n// Sample stub for the authLoginV1 function\n// Return stub value matches table below\nfunction adminAuthLogin(email, password) {\n  return {\n    userId: 1,\n  }\n}\n```\n2. Design a structure to store all the data needed for Toohak, and place this in the [code block](https://www.markdownguide.org/extended-syntax/#fenced-code-blocks) inside the `data.md` file. Specifically, you must consider how to store information about **users** and **quizzes** and populate ONE example `user` and `quiz` in your data structure (any values are fine - see example below).\n    * Use the interface table (2.2) to help you decide what data might need to be stored. This will require making some educated guesses about what would be required to be stored in order to return the types of data you see. **Whilst the data structure you describe in data.md might be similar to the interface, it is a different thing to the interface.** If you're still confused, think of the interface like a restaurant menu, and `data.md` like where the food is stored in the back. It's all the same food, but the menu is about how it's packaged up and received from the kitchen, and `data.md` is describing the structure of how it's all stored behind the scenes. \n    * As functions are called, this structure would be populated with more users and quizzes, so consider this in your solution.\n    * Focus on the structure itself (object/list composition), rather than the example contents.\n```javascript\n// Example values inside of a 'user' object might look like this\n// NOTE: this object's data is not exhaustive, you may need more/fewer fields stored as you complete this project. \n{\n  uId: 1,\n  nameFirst: 'Rani',\n  nameLast: 'Jiang',\n  email: 'ranivorous@gmail.com',\n}\n```\n\n3. Follow best practices for git and teamwork as discussed in lectures.\n    * Create a group contract by completing `contract.md` - you may add/edit this template as you see fit.\n    * You are expected to have **at least 1 meeting** with your group, and document the meeting(s) in meeting minutes which should be stored at a timestamped location in your repo (e.g. uploading a word doc/pdf or writing in the GitLab repo Wiki after each meeting). We have provided you with a `minutes-template.md` which you may use if you choose.\n    * For this iteration each team member will need to make a minimum of **1 merge request (MR) per person** in your group into the `master` branch.\n    * **1 merge request per function** must be made (12 in total). Each merge request needs to be approved by a team member that did not create the MR. \n    * Check out the lab on Git from week 1 to get familiar with using Git.\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk outlines the specific functions that need to be stubbed for the Toohak project, detailing their parameters, return types, and file structure organization. It is part of the \"Iteration 0: Getting Started\" section, which focuses on setting up the project and defining the basic functionality required for the backend of the quiz game platform.",
                "content": "### \ud83d\udc2d 2.2. Functions to stub\n\nThe following are strings: `email`, `password`, `nameFirst`, `nameLast`, `name`, `description`, `oldPassword`, `newPassword`.\n\nThe following are integers: `userId`, `quizId`.\n\nIn terms of file structure:\n * All functions starting with `adminAuth` or `adminUser` go in `auth.js`.\n * All functions starting with `adminQuiz` go in `quiz.js`.\n * `clear` goes in `other.js`.\n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th style=\"width:18%\">Data Types</th>\n  </tr>\n  <tr>\n    <td>\n      <code>adminAuthRegister</code>\n      <br /><br />\n      Register a user with an email, password, and names, then return their <code>userId</code> value.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( email, password, nameFirst, nameLast )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{\n  userId: 1\n}</code>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminAuthLogin</code>\n      <br /><br />\n      Given a registered user's email and password, return their <code>userId</code> value.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( email, password )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{\n  userId: 1\n}</code>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminUserDetails</code>\n      <br /><br />\n      Given an admin user's userId, return details about the user.\n      <li>\"<code>name</code>\" is the first and last name concatenated with a single space between them.</li>\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{ user:\n  {\n    userId: 1,\n    name: 'Hayden Smith',\n    email: 'hayden.smith@unsw.edu.au',\n    numSuccessfulLogins: 3,\n    numFailedPasswordsSinceLastLogin: 1,\n  }\n}</code>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminUserDetailsUpdate</code>\n      <br /><br />\n      Given an admin user's userId and a set of properties, update the properties of this logged in admin user.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, email, nameFirst, nameLast )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{ }</code> empty object\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminUserPasswordUpdate</code>\n      <br /><br />\n      Given details relating to a password change, update the password of a logged in user.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, oldPassword, newPassword )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{ }</code> empty object\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizList</code>\n      <br /><br />\n      Provide a list of all quizzes that are owned by the currently logged in user.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{ quizzes: [\n    {\n      quizId: 1,\n      name: 'My Quiz',\n    }\n  ]\n}</code>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizCreate</code>\n      <br /><br />\n      Given basic details about a new quiz, create one for the logged in user.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, name, description )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{\n  quizId: 2\n}</code>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizRemove</code>\n      <br /><br />\n      Given a particular quiz, permanently remove the quiz.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, quizId )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{ }</code> empty object\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizInfo</code>\n      <br /><br />\n      Get all of the relevant information about the current quiz.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, quizId )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{\n  quizId: 1,\n  name: 'My Quiz',\n  timeCreated: 1683125870,\n  timeLastEdited: 1683125871,\n  description: 'This is my quiz',\n}</code>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizNameUpdate</code>\n      <br /><br />\n      Update the name of the relevant quiz.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, quizId, name )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{ }</code> empty object\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizDescriptionUpdate</code>\n      <br /><br />\n      Update the description of the relevant quiz.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, quizId, description )</code>\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{ }</code> empty object\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>clear</code>\n      <br /><br />\n      Reset the state of the application back to the start.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>()</code> no parameters\n      <br /><br />\n      <b>Return object:</b><br />\n      <code>{ }</code> empty object\n    </td>\n  </tr>\n</table>\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk outlines the marking criteria for Iteration 0 of the COMP1531 Major Project, detailing the evaluation metrics for automarking, documentation, git practices, and project management and teamwork. It follows the section on the basic tasks and expectations for students as they begin their project work.",
                "content": "### \ud83d\udc2d 2.3 Marking Criteria\n<table>\n  <tr>\n    <th>Section</th>\n    <th>Weighting</th>\n    <th>Criteria</th>\n  </tr>\n  <tr>\n    <td>Automarking (Implementation)</td>\n    <td>40%</td>\n    <td><ul>\n      <li>Correct implementation of specified stubs.</li>\n    </ul></td>\n  </tr>\n  <tr>\n  <tr>\n    <td>Documentation</td>\n    <td>20%</td>\n    <td><ul>\n      <li>Clear and obvious effort and time gone into thinking about possible representation of data structure for the project containing users and quizzes, inside of <code>data.md</code>.</li>\n    </ul></td>\n  </tr>\n  <tr>\n    <td>Git Practices</td>\n    <td>30%</td>\n    <td><ul>\n      <li>Meaningful, informative and consistent git commit messages and branch names being used (see <a href=\"https://initialcommit.com/blog/git-commit-messages-best-practices#:~:text=commit%20message%20style.-,General%20Commit%20Message%20Guidelines,-As%20a%20general\">examples</a>).</li>\n      <li>Effective use of merge requests (from branches being made) across the team (as covered in lectures). Repeated commit names are avoided.</li>\n      <li>At least 1 merge request per person and 1 merge request per function (12 in total) made into the <code>master</code> branch. Each merge request is approved by a team member that did not create the MR. </li>\n    </ul></td>\n  </tr>\n  <tr>\n    <td>Project Management & Teamwork</td>\n    <td>10%</td>\n    <td><ul>\n      <li>Completed group contract.</li>\n      <li>A generally equal contribution between team members.</li>\n      <li>Effective and regular use of course-provided MS Teams for communication (or another app approved by your tutor with evidence added to Teams), demonstrating an ability to competently manage teamwork online.</li>\n      <li>Had a meeting together that involves planning and managing tasks, and taken notes from said meeting (and stored in a logical place in the repo e.g. Wiki section).</li>\n    </ul></td>\n  </tr>\n</table>\n\n### \ud83d\udc2d 2.4. Dryrun\n\nWe have provided a dryrun for iteration 0 consisting of one test for each function. Passing these tests means you have a correct implementation for your stubs, and have earned the marks for the automarking component iteration 0.\n\nTo run the dryrun, you should on a CSE machine (i.e. using `VLAB` or `ssh`'ed into CSE) and in the root directory of your project (e.g. `/project-backend`) and use the command:\n\n```bash\n1531 dryrun 0\n```\n\nTo view the dryrun tests, you can run the following command on CSE machines:\n```bash\ncat ~cs1531/bin/iter0.test.js\n```\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of the COMP1531 Major Project documentation, specifically detailing Iteration 1, which focuses on requirements gathering, basic functionality implementation, and testing for the quiz platform Toohak. It follows the FAQs and submission guidelines from Iteration 0, outlining tasks, user interviews, and best practices for project management and teamwork.",
                "content": "### \ud83d\udc2d 2.4. FAQs\n\nPlease see the <a href=\"https://edstem.org/au/courses/21170/discussion/2425606\">this EdStem megapost</a> for iteration 0 FAQs.\n\n### \ud83d\udc2d 2.5. Submission\n\nPlease see section 6 for information on **due date**.\n\nNEW CHUNK\n\n## \ud83d\udc36 3. Iteration 1: Requirements, Basic Functionality and Tests\n\n[You can watch the iteration 1 introductory video here.](https://youtu.be/hEmdnk39qLg) This video is not required watching (the specification is clear by itself) though many students find it useful as a starting point.\n\n### \ud83d\udc36 3.1. Task\n\nIn this iteration, you are expected to:\n\n1. Produce a short report, `planning.pdf` containing a simplified approach to understanding user problems, and developing requirements for Toohak.\n    * You will interview users of existing quiz platforms like Toohak to identify their requirements. You will create user stories, a use case, and validate these requirements with the users you interviewed.\n\n    * Note that at this stage, the user stories and use cases you generate may or may not be implemented in this project assignment. The goal is to practice identifying and documenting requirements, even if not all of them are built immediately. Later, in Project Iteration 3, you will have the opportunity to extend your project with open-ended features, where you can implement additional functionality based on the requirements you have defined. This structured approach will help you gain confidence in each step of the SDLC before applying it to more complex development tasks.\n\n    * The course has set up some basic features for you to implement - as described in Tasks 2.\n\n\n2. Write tests for and implement the basic functionality of Toohak. The basic functionality is defined as per the interface section below.\n    * Test files you add should all be in the form `*.test.js`.\n    * Do NOT attempt to try and write or start a web server. Don't overthink how these functions are meant to connect to a frontend yet. That is for the next iteration. In this iteration you are just focusing on the basic backend functionality.\n\n3. Follow best practices for git, project management, and effective teamwork, as discussed in lectures.\n    * The marking will be heavily biased toward how well you follow good practices and work together as a team. Just having a \"working\" solution at the end is not, on its own, sufficient to even get a passing mark.\n\n    * You need to use the [**GitLab Issue Boards**](https://docs.gitlab.com/ee/user/project/issue_board.html) (or similar) for your task tracking and allocation. Spend some time getting to know how to use the taskboard. If you would like to use another collaborative task tracker e.g. Jira, Trello, Airtable, etc. you must first get approval from your tutor and grant them administrator access to your team board.\n\n    * You are expected to meet regularly with your group and document the meetings via meeting minutes, which should be stored at a timestamped location in your repo (e.g. uploading a word doc/pdf or writing in the GitLab repo Wiki after each meeting).\n\n    * You should have regular standups and be able to demonstrate evidence of this to your tutor.\n\n    * For this iteration, you will need to collectively make a minimum of **12 merge requests** into `master`.\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of Iteration 1 of the COMP1531 Major Project, focusing on the planning phase where students are required to understand user needs and develop requirements for the quiz platform Toohak. It outlines the process for eliciting user feedback, creating user stories, and specifying use cases to ensure the system meets user expectations.",
                "content": "### \ud83d\udc36 3.2. Planning for the problems to solve\n\nBefore we start implementing any features for our software systems, we need first to understand the requirements for the system, so make sure that we are building the right systems. This is an essential step in the Software Development Life Cycle (SDLC) and will help you build a strong foundation for future development.\n\nFor iteration 1 you are going to produce a short report in `planning.pdf` and place it in the repository. The contents of this report will be a simplified approach to understanding user problems, and developing requirements.\n\nN.B. If you don't know how to produce a PDF, you can easily make one in Google docs and then export to PDF.\n\nWe have opted not to provide you with a sample structure - because we're not interested in any rigid structure. Structure it however you best see fit, as we will be looking at content only.\n\n#### [Requirements] Elicitation\n\nFind 2-3 people to interview as target users. Target users are people who currently use a tool like Kahoot, or intend to and are not current or former 1531 students. Record their name and email address. You must not interview members of your project group.\n\nDevelop a series of questions (at least 4) to ask these target users to understand what *problems* (not solutions) they might have with quiz tools like Kahoot. Give these questions to your target users and record their answers.\n\n\n#### [Requirements] Analysis & Specification - User stories and use cases\n\nOnce you've elicited this information, it's time to consolidate it.\n\nTake the responses from the elicitation step and express these requirements as **user stories** (at least 3). Document these user stories. For each user story, add user acceptance criteria as notes so that you have a clear definition of when a story has been completed.\n\nOnce the user stories have been documented, generate at least ONE use case that attempts to describe how the system works that satifies some of or all the elicited requirements. You can generate a visual diagram or a more written-recipe style, as per lectures.\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is situated within the \"Iteration 1: Requirements, Basic Functionality and Tests\" section of the COMP1531 Major Project document. It focuses on the validation of user requirements through feedback from interviews and outlines the approach for storing data in the application, emphasizing the importance of structuring data effectively for the project's functionality.",
                "content": "#### [Requirements] Validation\n\nWith your completed use case work, reach out to the 2-3 people you interviewed originally and inquire as to the extent to which these use cases would adequately describe the problem they're trying to solve. Ask them for a comment on this, and record their comments in the PDF.\n\n\n### \ud83d\udc36 3.3. Storing data\n\nNearly all of the functions will likely have to reference some \"data source\" to store information. E.g. If you register two users, create two quizzes, all of that information needs to be \"stored\" somewhere. The most important thing for iteration 1 is not to overthink this problem.\n\nFirstly, you should **not** use an SQL database, or something like firebase.\n\nSecondly, you don't need to make anything persist. What that means is that if you run all your tests, and then run them again later, it's OK for the data to be \"fresh\" each time you run the tests. We will cover persistence in another iteration.\n\nInside `src/dataStore.js` we have provided you with an object called `data` which will contain the information that you will need to access across multiple functions. An explanation of how to `get` the data is in `dataStore.js`. You will need to determine the internal structure of the object. You are allowed to modify this data structure.\n\nFor example, you could define a structure in a file that is empty, and as functions are called, the structure populates and fills up like the one below:\n\n```javascript\nlet data = {\n    users: [\n        {\n            id: 1,\n            nameFirst: 'user1',\n        },\n        {\n            id: 2,\n            nameFirst: 'user2',\n        },\n    ],\n    quizzes: [\n        {\n            id: 1,\n            name: 'quiz1',\n        },\n        {\n            id: 2,\n            name: 'quiz2',\n        },\n    ],\n}\n```\n### \ud83d\udc36 3.4. Implementing and testing features\n\nYou should first approach this project by considering its distinct \"features\". Each feature should add some meaningful functionality to the project, but still be as small as possible. You should aim to size features as the smallest amount of functionality that adds value without making the project more unstable. For each feature you should:\n\n1. Create a new branch.\n1. Write function stub/s for your feature. This may have been completed in iteration 0 for some functions.\n1. Write tests for that feature and commit them to the branch. These will fail as you have not yet implemented the feature.\n1. Implement that feature.\n1. Make any changes to the tests such that they pass with the given implementation. You should not have to do a lot here. If you find that you are, you're not spending enough time on your tests.\n1. Create a merge request for the branch.\n1. Get someone in your team who **did not** work on the feature to review the merge request.\n1. Fix any issues identified in the review.\n1. After merge request is **approved** by a different team member, merge the merge request into `master`.\n\nFor this project, a feature is typically sized somewhere between a single function, and a whole file of functions (e.g. `auth.js`). It is up to you and your team to decide what each feature is.\n\nThere is no requirement that each feature is implemented by only one person. In fact, we encourage you to work together closely on features, especially to help those who may still be coming to grips with Javascript.\n\nPlease pay careful attention to the following:\n\n* We want to see **evidence that you wrote your tests before writing your implementation**. As noted above, the commits containing your initial tests should appear *before* your implementation for every feature branch. If we don't see this evidence, we will assume you did not write your tests first and your mark will be reduced.\n* Merging in merge requests with failing tests is **very bad practice**. Not only does this interfere with your team's ability to work on different features at the same time, and thus slow down development, it is something you will be **penalised** for in marking.\n* Similarly, merging in branches with untested features is also **bad practice**. We will assume, and you should too, that any code without tests does not work.\n* Pushing directly to `master` is not possible for this repo. The only way to get code into `master` is via a merge request. If you discover you have a bug in `master` that got through testing, create a bugfix branch and merge that in via a merge request.\n* As is the case with any system or functionality, there will be some things that you can test extensively, some things that you can test sparsely/fleetingly, and some things that you can't meaningfully test at all. You should aim to test as extensively as you can, and make judgements as to what things fall into what categories.\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of the \"Iteration 1: Requirements, Basic Functionality and Tests\" section of the COMP1531 Major Project document, specifically focusing on testing guidelines and best practices for writing effective unit tests for the Toohak quiz platform's backend functionality. It emphasizes the importance of test structure, black box testing principles, and resetting application state to ensure reliable test outcomes.",
                "content": "### \ud83d\udc36 3.5. Testing guidelines & advice\n\n#### \ud83d\udc36 3.5.1. Test Structure\nThe tests you write should be as small and independent as possible. This makes it easier to identify why a particular test may be failing. Similarly, try to make it clear what each test is testing for. Meaningful test names and documentation help with this. An example of how to structure tests has been done in:\n\n* `src/echo.js`\n* `src/echo.test.js`\n\n_The echo functionality is tested, both for correct behaviour and for failing behaviour. As echo is relatively simple functionality, only 2 tests are required. For the larger features, you will need many tests to account for many different behaviours._\n\n#### \ud83d\udc36 3.5.2. Black Box Testing\n\nYour tests should be *black box* unit tests:\n  * Black box means they should not depend your specific implementation, but rather work with *any* faithful implementation of the project interface specification. I.e. you should design your tests such that if they were run against another group's backend they would still pass.\n  * For iteration 1, you should *not* be importing the `data` object itself or directly accessing it via the `get` functions from `src/dataStore.js` inside your tests.\n  * Unit tests mean the tests focus on testing particular functions, rather than the system as a whole. Certain unit tests will depend on other tests succeeding. It's OK to write tests that are only a valid test if other functions are correct (e.g. to test `quiz` functions you can assume that `auth` is implemented correctly).\n\nThis will mean you will use code like this to test login, for instance:\n\n```javascript\nlet result = adminAuthRegister('validemail@gmail.com', '123abc!@#', 'Jake', 'Renzella')\nadminAuthLogin('validemail@gmail.com', '123abc!@#') // Expect to work since we registered\n```\n\n#### \ud83d\udc36 3.5.3. Resetting state\n\nYou should reset the state of the application (e.g. deleting all users, quizzes, etc.) at the start of every test. That way you know none of them are accidentally dependent on an earlier test. You can use a function for this that is run at the beginning of each test (hint: `clear`).\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of Iteration 1 of the COMP1531 Major Project, focusing on testing guidelines and the interface for the backend functionality of the quiz game platform Toohak. It provides specific advice on testing practices, including the use of Jest's `beforeEach` for code repetition, and outlines the required functions, their parameters, return types, and error handling for the project's implementation phase.",
                "content": "#### \ud83d\udc36 3.5.4. Other help\n\n* If you find yourself needing similar code at the start of a series of tests, consider using Jest's [**beforeEach**](https://jestjs.io/docs/api#beforeeachfn-timeout) to avoid repetition.\n\nSometimes you may ask \"What happens if X?\". In cases where we don't specify behaviour, we call this **undefined behaviour**. When something has undefined behaviour, you can have it behave any reasonable way you want - because there is no expectation or assumption of how it should act.\n\nA common question asked throughout the project is usually \"How can I test this?\" or \"Can I test this?\". In any situation, most things can be tested thoroughly. However, some things can only be tested sparsely, and on some other rare occasions, some things can't be tested at all. A challenge of this project is for you to use your discretion to figure out what to test, and how much to test. Often, you can use the functions you've already written to test new functions in a black-box manner.\n\n### \ud83d\udc36 3.6. Iteration 1 Interface\n\nThe functions required for iteration 1 are described below.\n\nAll error cases should return <code>{error: 'specific error message here'}</code>, where the error message in quotation marks can be anything you like (this will not be marked).\n\nThe following are strings: `email`, `password`, `nameFirst`, `nameLast`, `name`, `description`, `oldPassword`, `newPassword`.\n\nThe following are integers: `userId`, `quizId`.\n\nFor timestamps, these are Unix timestamps in seconds. You can find more information that here https://en.wikipedia.org/wiki/Unix_time. Timestamps should be rounded using `Math.floor()`. \n\n<table>\n  <tr>\n    <th>Name & Description</th>\n    <th style=\"width:18%\">Data Types</th>\n    <th style=\"width:32%\">Error returns</th>\n  </tr>\n  <tr>\n    <td>\n      <code>adminAuthRegister</code>\n      <br /><br />\n      Register a user with an email, password, and names, then return their <code>userId</code> value.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( email, password, nameFirst, nameLast )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ userId }</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>Email address is used by another user.</li>\n        <li>Email does not satisfy this: <a href=\"https://www.npmjs.com/package/validator\">https://www.npmjs.com/package/validator</a> (validator.isEmail function).</li>\n        <li>NameFirst contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes.</li>\n        <li>NameFirst is less than 2 characters or more than 20 characters.</li>\n        <li>NameLast contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes.</li>\n        <li>NameLast is less than 2 characters or more than 20 characters.</li>\n        <li>Password is less than 8 characters.</li>\n        <li>Password does not contain at least one number and at least one letter.</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminAuthLogin</code>\n      <br /><br />\n      Given a registered user's email and password return their <code>userId</code> value.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( email, password )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ userId }</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>Email address does not exist.</li>\n        <li>Password is not correct for the given email.</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminUserDetails</code>\n      <br /><br />\n      Given an admin user's userId, return details about the user.\n      <li>\"name\" is the first and last name concatenated with a single space between them.</li>\n      <li>numSuccessfulLogins includes logins direct via registration, and is counted from the moment of registration starting at 1.</li>\n      <li>numFailedPasswordsSinceLastLogin is reset every time they have a successful login, and simply counts the number of attempted logins that failed due to incorrect password, only since the last login.</li>\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ user:\n  {\n    userId,\n    name,\n    email,\n    numSuccessfulLogins,\n    numFailedPasswordsSinceLastLogin,\n  }\n}</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>userId is not a valid user.</li>\n    </td>\n  </tr>\n  <tr>\n  <td>\n    <code>adminUserDetailsUpdate</code>\n    <br /><br />\n    Given an admin user's userId and a set of properties, update the properties of this logged in admin user. \n  </td>\n  <td>\n    <b>Parameters:</b><br />\n    <code>( userId, email, nameFirst, nameLast )</code>\n    <br /><br />\n    <b>Return type if no error:</b><br />\n    <code>{ }</code>\n  </td>\n  <td>\n    <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n    <ul>\n      <li>userId is not a valid user.</li>\n      <li>Email is currently used by another user (excluding the current authorised user)</li>\n      <li>Email does not satisfy this: <a href=\"https://www.npmjs.com/package/validator\">https://www.npmjs.com/package/validator</a> (validator.isEmail)</li>\n      <li>NameFirst contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes</li>\n      <li>NameFirst is less than 2 characters or more than 20 characters</li>\n      <li>NameLast contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes</li>\n      <li>NameLast is less than 2 characters or more than 20 characters</li>\n    </ul>\n  </td>\n  </tr>\n  <tr>\n  </td>\n    <td>\n      <code>adminUserPasswordUpdate</code>\n      <br /><br />\n      Given details relating to a password change, update the password of a logged in user.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, oldPassword, newPassword )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ }</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>userId is not a valid user.</li>\n        <li>Old Password is not the correct old password</li>\n        <li>Old Password and New Password match exactly</li>\n        <li>New Password has already been used before by this user</li>\n        <li>New Password is less than 8 characters</li>\n        <li>New Password does not contain at least one number and at least one letter</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizList</code>\n      <br /><br />\n      Provide a list of all quizzes that are owned by the currently logged in user.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ quizzes: [\n    {\n      quizId,\n      name,\n    }\n  ]\n}</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>userId is not a valid user.</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizCreate</code>\n      <br /><br />\n      Given basic details about a new quiz, create one for the logged in user.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, name, description )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ quizId }</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>userId is not a valid user.</li>\n        <li>Name contains invalid characters. Valid characters are alphanumeric and spaces.</li>\n        <li>Name is either less than 3 characters long or more than 30 characters long.</li>\n        <li>Name is already used by the current logged in user for another quiz.</li>\n        <li>Description is more than 100 characters in length (note: empty strings are OK).</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizRemove</code>\n      <br /><br />\n      Given a particular quiz, permanently remove the quiz.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, quizId )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ }</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>userId is not a valid user.</li>\n        <li>Quiz ID does not refer to a valid quiz.</li>\n        <li>Quiz ID does not refer to a quiz that this user owns.</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizInfo</code>\n      <br /><br />\n      Get all of the relevant information about the current quiz.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, quizId )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{\n  quizId,\n  name,\n  timeCreated,\n  timeLastEdited,\n  description,\n}</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>userId is not a valid user.</li>\n        <li>Quiz ID does not refer to a valid quiz.</li>\n        <li>Quiz ID does not refer to a quiz that this user owns.</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizNameUpdate</code>\n      <br /><br />\n      Update the name of the relevant quiz.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, quizId, name )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ }</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>userId is not a valid user.</li>\n        <li>Quiz ID does not refer to a valid quiz.</li>\n        <li>Quiz ID does not refer to a quiz that this user owns.</li>\n        <li>Name contains invalid characters. Valid characters are alphanumeric and spaces.</li>\n        <li>Name is either less than 3 characters long or more than 30 characters long.</li>\n        <li>Name is already used by the current logged in user for another quiz.</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>adminQuizDescriptionUpdate</code>\n      <br /><br />\n      Update the description of the relevant quiz.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( userId, quizId, description )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ }</code>\n    </td>\n    <td>\n      <b>Return object <code>{error: 'specific error message here'}</code></b> when any of:\n      <ul>\n        <li>userId is not a valid user.</li>\n        <li>Quiz ID does not refer to a valid quiz.</li>\n        <li>Quiz ID does not refer to a quiz that this user owns.</li>\n        <li>Description is more than 100 characters in length (note: empty strings are OK).</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>clear</code>\n      <br /><br />\n      Reset the state of the application back to the start.\n    </td>\n    <td>\n      <b>Parameters:</b><br />\n      <code>( )</code>\n      <br /><br />\n      <b>Return type if no error:</b><br />\n      <code>{ }</code>\n    </td>\n    <td>\n    </td>\n  </tr>\n</table>\n\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of the \"Iteration 1\" section of the COMP1531 Major Project document, specifically focusing on authorisation methods and challenges related to parallel work within the development team. It outlines the approach to handling user authentication and the management of tasks during the project, as well as the criteria for marking related to these aspects.",
                "content": "### \ud83d\udc36 3.7. Authorisation\n\nElements of securely storing passwords and other tricky authorisation methods are not required for iteration 1. You can simply store passwords plainly, and use the user ID to identify each user. We will discuss ways to improve the quality and methods of these capabilities in the later iterations.\n\nNote that the `userId` variable is simply the user ID of the user who is making the function call. For example,\n* A user registers an account with Toohak and is assigned some integer ID, e.g. `42` as their user ID.\n* When they make subsequent calls to functions, their user ID - in this case, `42` - is passed in as the `userId` argument.\n\n### \ud83d\udc36 3.8. Working in parallel\n\nThis iteration provides challenges for many groups when it comes to working in parallel. Your group's initial reaction will be that you need to complete registration before you can complete quiz creation, and then quiz creation must be done before you update a quiz name, etc.\n\nThere are several approaches that you can consider to overcome these challenges:\n\n* Have people working on down-stream tasks (like the quiz implementation) work with stubbed versions of the up-stream tasks. E.g. The register function is stubbed to return a successful dummy response, and therefore two people can start work in parallel.\n* Co-ordinate with your team to ensure prerequisite features are completed first (e.g. Giuliana completes `adminAuthRegister` on Monday meaning Hayden can start `adminQuizCreate` on Tuesday).\n* You can pull any other remote branch into your own using the command `git pull origin <branch_name>`.\n    * This can be helpful when two people are working on functions on separate branches where one function is a prerequisite of the other, and an implementation is required to keep tests from failing.\n* You should pull from `master` on a regular basis to ensure your code remains up-to-date.\n\n### \ud83d\udc36 3.9. Marking Criteria\n\n<table>\n  <tr>\n    <th>Section</th>\n    <th>Weighting</th>\n    <th>Criteria</th>\n  </tr>\n  <tr>\n    <td>Automarking (Testing & Implementation)</td>\n    <td>30%</td>\n    <td>\n      <ul>\n      <li>Correct implementation of specified functions.</li>\n    </ul>\n      Whilst we look at your group's work as a whole, if we feel that materially unequal contributions occurred between group members we will assess your individual contribution against this criteria.\n    </td>\n  </tr>\n  <tr>\n    <td>Test Quality</td>\n    <td>15%</td>\n    <td>\n      Develop tests that show a clear demonstration of:\n      <ul>\n        <li>Good test <b>coverage</b> - covering the use cases extensively (no need to run a coverage checker in this iteration).</li>\n        <li>Good test  <b>clarity</b> in communicating the purpose of tests and code. This includes logical commenting and good variable naming.</li>\n        <li>Good test <b>design</b> - thoughtful, clear, and modular layout that follows course examples (black-box testing), with little repetition.</li>\n      </ul>\n      Whilst we look at your group's work as a whole, if we feel that materially unequal contributions occurred between group members we will assess your individual contribution against this criteria.\n    </td>\n  </tr>\n  <tr>\n    <td>General Code Quality</td>\n    <td>15%</td>\n    <td>\n      <ul>\n        <li>Appropriate use of Javascript data structures (arrays, objects, etc.)</li>\n        <li>Appropriate style as covered so far in introductory programming.</li>\n        <li>Appropriate layout of files and use of modularity to reduce repetition and improve readability.</li>\n        <li>Through comments/naming it is clear what the code is doing via human reading. Error messages aren't marked for quality.</li>\n      </ul>\n      Whilst we look at your group's work as a whole, if we feel that materially unequal contributions occurred between group members we will assess your individual contribution against this criteria.\n    </td>\n  </tr>\n  <tr>\n    <td>Git Practices, Project Management, Teamwork</td>\n    <td>30%</td>\n    <td>\n      As an individual, in terms of git:\n      <ul>\n        <li>For particular features, committing your tests prior to your implementation.</li>\n        <li>Your git commit messages are meaningful, clear, and informative. Repeat commit names are avoided.</li>\n        <li>You contribute at least 2 meaningful merge requests (approved by another team member) that merge your branch code to master.</li>\n      </ul>\n      As an individual, in terms of project management and teamwork:\n      <ul>\n        <li>Attendance to group check ins every week.</li>\n        <li>Effective and regular use of course-provided MS Teams for communication (or another app approved by your tutor with evidence added to Teams), demonstrating an ability to competently manage teamwork online.</li>\n        <li>Use of issue board on Gitlab OR another equivalent tool that is used to effectively track your tasks.</li>\n        <li>Attendance and contributions at your teams meetings and standups, including at least one scenario where you were the leader of the meeting and took the minutes/notes for that meeting.</li>\n      </ul>\n      As a group, in terms of project management and teamwork:\n      <ul>\n        <li>Group contract is followed or revised to reflect the team's evolving work patterns.</l1>\n      </ul>\n     </td>\n    <tr>\n    <td>Requirements Engineering</td>\n    <td>10%</td>\n    <td>\n      <ul>\n        <li>Requirements elicited from potential users, recorded as user stories with acceptance criteria for each, following the correct format from lectures.</li>\n        <li>Each user story has a corresponding set of comprehensive user acceptance criteria, in the correct format from lectures.</li>\n        <li>User journey justified and expressed as use case(s).</li>\n      </ul>\n       Whilst we look at your group's work as a whole, if we feel that materially unequal contributions occurred between group members we will assess your individual contribution against this criteria.\n    </td>\n  </tr>\n  </tr>\n</table>\n\nFor this and for all future milestones, you should consider the other expectations as outlined in section 6 below.\n\nThe formula used for automarking in this iteration is:\n\n`Mark = t * i` (Mark equals `t` multiplied by `i`).\n\nWhere:\n * `t` is the mark you receive for your tests running against your code (100% = your implementation passes all of your tests).\n * `i` is the mark you receive for our course tests (hidden) running against your code (100% = your implementation passes all of our tests).\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of the \"Iteration 1\" section of the COMP1531 Major Project document, specifically detailing the dryrun process for testing the implementation of functions such as `adminAuthRegister`, `adminAuthLogin`, and `adminQuizCreate`. It provides instructions on how to execute the dryrun, view test results, and tips for ensuring successful execution, followed by information on submission and teamwork evaluation, leading into the next iteration on building a web server.",
                "content": "### \ud83d\udc36 3.9. Dryrun\n\nWe have provided a very simple dryrun for iteration 1 consisting of a few tests, including your implementation of `adminAuthRegister`, `adminAuthLogin`, `adminQuizCreate`. These only check the format of your return types and simple expected behaviour, so do not rely on these as an indicator of the correctness of your implementation or tests.\n\nTo run the dryrun, you should be on a CSE machine (i.e. using `VLAB` or `ssh`'ed into CSE) and in the root directory of your project (e.g. `/project-backend`) and use the command:\n\n```bash\n1531 dryrun 1\n```\n\nTo view the dryrun tests, you can run the following command on CSE machines:\n```bash\ncat ~cs1531/bin/iter1.test.js\n```\n\nTips to ensure dryrun runs successfully:\n* Files sit within the `/src` directory.\n\n### \ud83d\udc36 3.10. Submission & Teamwork Evaluation\n\nPlease see section 6 for information on **due date** and on how you will **demonstrate this iteration**.\n\nPlease see section 7.5 for information on **teamwork evaluation**.\n\n### \ud83d\udc36 3.11. FAQs\n\nPlease see the <a href=\"https://edstem.org/au/courses/21170/discussion/2425607\">this EdStem megapost</a> for iteration 1 FAQs.\n\nNEW CHUNK\n\n## \ud83d\udc1d 4. Iteration 2: Building a Web Server\n\nComing soon.\n\n### \ud83d\udc1d 4.16. FAQs\n\nPlease see the <a href=\"https://edstem.org/au/courses/21170/discussion/2425609\">this EdStem megapost</a> for iteration 2 FAQs.\n\n## \ud83e\udd86 5. Iteration 3: Completing the Lifecycle\n\nComing soon.\n\n### \ud83e\udd86 5.13. FAQs\n\nPlease see the <a href=\"https://edstem.org/au/courses/21170/discussion/2425611\">this EdStem megapost</a> for iteration 3 FAQs.\n\n## \ud83c\udf38 6. Due Dates and Weightings\n\n| Iteration | Due date                             | Demonstration to tutor(s)     | Assessment weighting (%) |\n| --------- | ------------------------------------ | ----------------------------- | ------------------------ |\n| 0         | 8pm Friday 28th Feb (**week 2**)    | No demonstration              | 5% of project mark       |\n| 1         | 12pm Tuesday 18th Mar (**week 5**)    | In YOUR **week 5** laboratory | 20% of project mark      |\n| 2         | 12pm Tuesday 8th Apr (**week 8**)    | In YOUR **week 8** laboratory | 40% of project mark      |\n| 3         | 12pm Thursday 24th Apr (**week 10**)    | Final demonstration week 11   | 35% of project mark      |\n\nFor more information about demonstrations see section `6.2`.\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk outlines the submission process and late penalties for the COMP1531 Major Project, specifically detailing the requirements for submitting code via GitLab, the consequences of late submissions for each iteration, and guidelines for handling re-runs and minor fixes after deadlines.",
                "content": "### \ud83c\udf38 6.1. Submission & Late Penalties\n\nTo submit your work, simply have your master branch on the gitlab website contain your groups most recent copy of your code. I.E. \"Pushing to master\" is equivalent to submitting. When marking, we take the most recent submission on your master branch that is prior to the specified deadline for each iteration.\n\nThe following late penalties apply depending on the iteration:\n * Iteration 0: No late submissions at all.\n * Iteration 1: No late submissions at all.\n * Iteration 2: No late submissions at all.\n * Iteration 3: Can submit up to 48 hours late, with 5% penalty applied off your mark every time a 24 hour window passes, starting from the due date.\n\nWe will not mark commits pushed to master after the final submission time for a given iteration.\n\nIf the deadline is approaching and you have features that are either untested or failing their tests, **DO NOT MERGE IN THOSE MERGE REQUESTS**. In some rare cases, your tutor will look at unmerged branches and may allocate some reduced marks for incomplete functionality, but `master` should only contain working code.\n\n## \ud83c\udfc3 6.2. Re-runs\n\nThe deadline for reruns and mark reviews is **7 days** from release of each iteration's mark release. Marks are released within 7 days of an iterations' due date.\n\nMinor isolated fixes after the due date are allowed but may carry a penalty to the automark. If the isolated fixes result in a higher automark result (minus the penalty), then we will update your mark. E.g. imagine that your initial automark is 20%, on re-run you get a raw automark of 86%, and your fixes attract a 30% penalty: since the 30% penalty will reduce the mark of 86% to 60%, your final **automark** will be 60%.\n\nIf the re-run automark after penalty is lower than your initial mark, we will keep your initial mark. E.g. imagine that your initial automark is 50%, on re-run you get a raw automark of 70%, and your fixes attract a 30% penalty: since the 30% penalty will reduce the mark of 70% to 49%, your final **automark** will still be 50% (i.e. your initial mark).\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk provides detailed instructions on how to request a re-run of the project iteration's automarking results, including steps for creating a branch, making necessary changes, submitting a merge request, and the timeline for receiving feedback. It also defines what constitutes a \"trivial fix\" to guide students in making minimal changes to improve their marks. This information is crucial for students in the COMP1531 Major Project as they navigate the submission and review process for their work.",
                "content": "### How to request a re-run\n\n* Create a branch, e.g. `iter[X]-fix`, based off the submission commit.\n* Make the minimal number of necessary changes (i.e. only fix the trivial bugs that cost you many automarks).\n* Create a merge request for this branch into the iteration's submission branch (i.e. `iterX-submission`), and take note of merge request ID in the URL\n  * It is the number at the end of the URL i.e. https://nw-syd-gitlab.cseunsw.tech/COMP1531/25T1/groups/H17B_CRUNCHIE/project-backend/-/merge_requests/67 = 67.\n* Log onto the [Gitruns site](https://cgi.cse.unsw.edu.au/~gitrun/) and submit that merge request ID (e.g. 67) for rerun\n* Once you submit it, it will take up to 24 hours for you to receive the results of the rerun.\n  * The results will appear in status \"reviewing\", which means an admin still needs to review the penalty.\n  * **Please note: The results of the rerun is your RAW automark BEFORE ANY penalties have been applied.**\n* Once your MR has been reviewed (this can take up to 72 hours), the status will change to \"Complete\" and the result will be updated to the mark after penalty\n* If the mark after penalty is higher than your current mark, this will then be updated in the grade system, and take 48 hours to propagate to you.\n\nPlease note: The current limit on reruns is one every 24 hours. You can submit multiple re-runs before waiting for manual review or mark propagation, as long as they are 24 hours apart.\n\n#### What constitutes a \"trivial fix\u201d?\n* Fixing spelling/capitalisation/naming issues with values specified in spec documentation\n* Swapping a variable type e.g. session from 'number' to 'string'\n* Changing the return value type e.g. returning {} rather than null, to match spec documentation\n* Changing route versions e.g. v1 to v2 to match spec documentation\n* Fixing import values\n* Fixing a regex/logical equality check e.g. num === 0 to num === 1\n* Fixing constant variable values e.g. loginAttempts = 1 to loginAttempts = 0\n* As a general rule, any change that is < 3 lines of code\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of the project documentation for the COMP1531 Major Project, specifically detailing the requirements and expectations for demonstrations during Iterations 1, 2, and 3. It outlines the attendance and participation criteria for team members during lab sessions, the structure of the demonstrations, and the individual contribution assessment criteria related to project check-ins.",
                "content": "### \ud83c\udf38 6.3. Demonstration\n\n#### Iteration 1 & 2 Demonstrations\n\nThe demonstrations in weeks 5 and 8 will take place during your lab sessions. All team members **must** attend these lab sessions. Team members who do not attend a demonstration may receive a mark of 0 for that iteration. If you are unable to attend a demonstration due to circumstances beyond your control, you must apply for special consideration.\n\nDemonstrations consist of a 15 minute Q&A in front of your tutor and potentially some other students in your tutorial. For online classes, webcams and audio are required to be on during this Q&A (your phone is a good alternative if your laptop/desktop doesn't have a webcam).\n\n**Note:** If individuals fail to answer questions regarding code written by themselves during an iteration correctly, individual marks may be deducted.\n\n#### Iteration 3 Demonstration\n\nFor Iteration 3, you will be demonstrating your work in week 11.\n\nThis will consist of a 10 minute presentation and Q&A with 1-2 tutors.\n\nYou will be notified via course announcement when you can select the time of your presentation.\n\nIf you are in an in-person tutorial, your week 11 presentation will be in-person. If you are in an online tutorial, your week 11 presentation will be online.\n\nMore information about the details of this 10 minute presentation will be made available in the iteration 3 part of the spec.\n\n## \ud83d\udc4c 7. Individual Contribution\n\nThe marks given to you for each iteration are given to you individually. We do however use group marks (e.g. automarking) to infer this, and in many cases, you may receive the same mark as your group members, particularly in cases with well functioning groups. Your individual mark is determined by a combination of the factors below by your tutor, with your group mark as a reference point.Your tutor will look at the following items each iteration to determine your mark:\n * Project check-in\n * Code contribution\n * Tutorial contributions\n * Teamwork evaluation\n\n### \ud83d\udc4c 7.1. Project check-in\n\nDuring your lab class, you and your team will conduct a short standup in the presence of your tutor. Each member of the team will briefly state what they have done in the past week, what they intend to do over the next week, and what issues they have faced or are currently facing. This is so your tutor, who is acting as a representative of the client, is kept informed of your progress. They will make note of your presence and may ask you to elaborate on the work you've done.\n\nProject check-ins are also excellent opportunities for your tutor to provide you with both technical and non-technical guidance.\n\nYour attendance and participation at project check-ins will contribute to your individual mark component for the project. In addition, your tutor will note down any absences from team-organised standups, or deviations from your group contract established during iteration 0.\n\nThese are easy marks. They are marks assumed that you will receive automatically, and are yours to lose if you neglect them.\n\nThe following serves as a baseline for expected progress during project check-ins, in the specified weeks. For groups which do not meet this baseline, teamwork marks and/or individual scaling may be impacted.\n| Iteration | Week/Check-in | Expected progress                                                                                                                                     |\n| --------- | ------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 0         | **Week 2**    | Twice-weekly standup meeting times organised, iteration 0 specification has been discussed in a meeting, at least 1 task per person has been assigned |\n| 1         | **Week 3**    | Iteration 1 specification has been discussed in a meeting, at least 1 task per person has been assigned                                               |\n| 1         | **Week 4**    | 1x function per person complete (tests and implementation in master)                                                                                  |\n| 2         | **Week 5**    | Iteration 2 specification has been discussed in a meeting, at least 1 task per person has been assigned                                               |\n| 2         | **Week 6**    | **(Checked by your tutor in week 7)** Server routes for all iteration 1 functions complete and in master                                              |\n| 2         | **Week 7**    | 1x iteration 2 route per person complete (HTTP tests and implementation in master)                                                                    |\n| 3         | **Week 8**    | Iteration 3 specification has been discussed in a meeting, at least 1 task per person has been assigned                                               |\n| 3         | **Week 9**    | Exceptions & sessions in HTTP headers added across the project AND 1x iteration 3 route per person complete (HTTP tests and implementation in master)                            |\n| 3         | **Week 10**    | 2x iteration 3 routes per person complete (HTTP tests and implementation in master)                            |\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of the \"Individual Contribution\" section of the COMP1531 Major Project document, specifically addressing the expectations for tutorial attendance, code contribution, and documentation contribution among team members. It outlines the criteria for individual marks based on participation and contributions to the project, emphasizing the importance of regular engagement and documentation practices.",
                "content": "### \ud83d\udc4c 7.2. Tutorial contributions\n\nFrom weeks 2 onward, your individual project mark may be reduced if you do not satisfy the following:\n* Attend all tutorials.\n* Participate in tutorials by asking questions and offering answers.\n* [online only] Have your web cam on for the duration of the tutorial and lab.\n\nWe're comfortable with you missing or disengaging with 1 tutorial per term, but for anything more than that please email your tutor. If you cannot meet one of the above criteria, you will likely be directed to special consideration.\n\nThese are easy marks. They are marks assumed that you will receive automatically, and are yours to lose if you neglect them.\n\n### \ud83d\udc4c 7.3. Code contribution\n\nAll team members must contribute code to the project to a generally similar degree. Tutors will assess the degree to which you have contributed by looking at your **git history** and analysing lines of code, number of commits, timing of commits, etc. If you contribute significantly less code than your team members, your work will be closely examined to determine what scaling needs to be applied.\n\nNote that **contributing more code is not a substitute for not contributing documentation**.\n\nPlease also note that **failure to commit (as an individual) at least once in each week of your iteration may result in up to a 20% mark penalty**. It's critical that you at least demonstrate you can make minor progress each week. If this were an individual assignment we would not enforce this, but given it is a group assignment it's important we encourage you to commit regularly.\n\n### \ud83d\udc4c 7.4. Documentation contribution\n\nAll team members must contribute documentation to the project to a generally similar degree.\n\nIn terms of code documentation, your functions are required to contain comments in JSDoc format, including paramters and return values:\n\n```javascript\n/**\n  * <Brief description of what the function does>\n  * \n  * @param {data type} name - description of paramter\n  * @param {data type} name - description of parameter\n  * ...\n  * \n  * @returns {data type} - description of condition for return\n  * @returns {data type} - description of condition for return\n*/\n```\n\nIn each iteration you will be assessed on ensuring that every relevant function in the specification is appropriately documented.\n\nIn terms of other documentation (such as reports and other notes in later iterations), we expect that group members will contribute equally.\n\nNote that, **contributing more documentation is not a substitute for not contributing code**.\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk is part of the project documentation for COMP1531, specifically addressing the teamwork evaluation process that occurs at the end of each iteration. It outlines the criteria for assessing team members' contributions, the timeline for completing evaluations, and the importance of addressing any issues related to team participation and performance.",
                "content": "### \ud83d\udc4c 7.5. Teamwork Evaluation\n\n<a href=\"https://cgi.cse.unsw.edu.au/~cs1531/25T1/project/teamwork-evaluation\"><b>Teamwork Evaluation link</b></a>.\n\n**Please note: Failure to complete teamwork evaluation for a particular iteration may result in a mark penalty of 10% for the iteration**\n\nAt the end of each iteration, there will be a teamwork evaluation survey where you will rate and leave comments about each team member's contribution to the project up until that point. \n\nYour other team members will **not** be able to see how you rated them or what comments you left in either teamwork evaluation. If your team members give you a less than satisfactory rating, your contribution will be scrutinised and you may find your final mark scaled down (after review by your tutor).\n\nThe following criteria will be assessed by your team members:\n* **Participation**: What was the level of participation in group work, attendance at meetings, making suggestions, taking responsibility for tasks, being in communication with the team?\n* **Dependability**: How dependable was this team member in delivering assigned tasks, on time, with expected levels of quality? \n* **Team Wellbeing**: How much did this team member contribute to the healthy functioning of the team by communicating with members, coordinating meetings, listening to concerns, facilitating discussion, offering suggestions?\n* **Work contribution**: How much did this team member contribute to the development of the major project. \n\n<table>\n  <tr>\n    <th>Iteration</th>\n    <th>Opens</th>\n    <th>Closes</th>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>12pm Tuesday 18th Mar</td>\n    <td>12pm Friday 21st Mar</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>12pm Tuesday 8th Apr</td>\n    <td>12pm Friday 11th Apr</td>\n  </tr>\n  <tr>\n    <td>3</td>\n    <td>12pm Thursday 24th Apr</td>\n    <td>12pm Monday 28th Apr</td>\n  </tr>\n</table>\n\n### \ud83d\udc4c 7.6. Managing Issues\n\nWhen a group member does not contribute equally, we are aware it can implicitly have an impact on your own mark by pulling the group mark down (e.g. through not finishing a critical feature), etc.\n\nThe first step of any disagreement or issue is always to talk to your team member(s) on the chats in MS Teams. Make sure you have:\n1. Been clear about the issue you feel exists.\n2. Been clear about what you feel needs to happen and in what time frame to feel the issue is resolved.\n3. Gotten clarity that your team member(s) want to make the change.\n\nIf you don't feel that the issue is being resolved quickly, you should escalate the issue by talking to your tutor with your group in a project check-in, or alternatively by emailing your tutor privately outlining your issue.\n\nIt's imperative that issues are raised to your tutor ASAP, as we are limited in the mark adjustments we can do when issues are raised too late (e.g. we're limited with what we can do if you email your tutor with iteration 2 issues after iteration 2 is due).\n"
            },
            {
                "summary": "From assessments -> project -> README.md: This chunk outlines the automarking process and pre-submission preview for the COMP1531 Major Project, detailing how code will be evaluated for each iteration, the timing for running tests, and the expectations for submitting code to the master branch prior to preview runs. It also includes important guidelines regarding plagiarism and academic integrity related to the project.",
                "content": "## \ud83d\udcbb 8. Automarking & Preview\n\n### \ud83d\udcbb 8.1. Automarking\n\nEach iteration consists of an automarking component. The particular formula used to calculate this mark is specific to the iteration (and detailed above).\n\nWhen running your code or tests as part of the automarking, we place a 90 second timer on the running of your group's tests. This is more than enough time to complete everything unless you're doing something very wrong or silly with your code. As long as your tests take under 90 seconds to run, you don't have to worry about it potentially taking longer when we run automarking.\n\n### \ud83d\udcbb 8.2. Pre-submission Preview\n\nIn the days preceding iterations 1, 2, and 3's due date, we will be running your code against the actual automarkers (the same ones that determine your final mark) and publishing the results of every group on [Gitrun](https://cgi.cse.unsw.edu.au/~cs1531/NOW/content/project/runs). You will get to see the current mark (within a range) of your submission. You will not receive any elaboration on how that mark was determined - if your mark isn't what you expect, work with your group and/or tutor to debug your code and write more tests.\n\nYou should have the code you wish to be tested in your `master` branch by **10pm** the night before preview runs.\n\n3x previews are released for iteration 1, 2 and 3. Each preview release will occur at 12pm every second day during the week leading up to the iteration due date. Iteration 1 and 2 previews will occur on Thursday, Saturday and Monday. Iteration 3 previews will occur on Saturday, Monday and Wednesday. \n\nThis preview run gives you a chance to sanity check your automark (without knowing the details of what you did right and wrong), and is just a bit of fun.\n\nPlease note the preview mark represents the hidden coursetest/automark performance only - it does not include coverage, linting, group test performance etc. \n\n## \ud83d\udc40 9. Plagiarism & Academic Misconduct Notice\nYour program must be entirely your group\u2019s work. Plagiarism detection software will be used to compare all submissions pairwise (including submissions for similar assignments in previous terms) and serious penalties will be applied, including an entry on UNSW's plagiarism register.\n\nYou are also not allowed to submit code obtained with the help of ChatGPT, GitHub Copilot, Gemini or similar automatic tools.\n* Do not provide or show your project work to any other person, except for your group and the teaching staff of COMP1531.\n* Do not copy ideas or code from others outside your group. \n* Do not use a publicly accessible repository or allow anyone outside your group to see your code, except for the teaching staff of COMP1531. \n* Code generated by ChatGPT, GitHub Copilot, Gemini and similar AI/LLM tools will be treated as plagiarism.\n\nIf you knowingly provide or show your assignment work to another person for any reason, and work derived from it is submitted, you may be penalized, even if the work was submitted without your knowledge or consent. This may apply even if your work is submitted by a third party unknown to you.\n\nThe penalties for such an offence may include negative marks, automatic failure of the course and possibly other academic discipline. Assignment submissions will be examined both automatically and manually for such submissions.\n\nPlease refer to the online resources to help you understand what plagiarism is and how it is dealt with at UNSW:\n* <a href=\"https://www.student.unsw.edu.au/plagiarism/integrity\">Academic Integrity and Plagiarism</a>\n* <a href=\"https://www.unsw.edu.au/content/dam/pdfs/governance/policy/2022-01-policies/plagiarismpolicy.pdf\">UNSW Plagiarism Policy</a>\n\nThe course reserves the right to reassess whether you meet course outcomes through a similar assessment under significant suspicion of academic misconduct. \n"
            },
            {
                "summary": "From assessments -> project -> README.md: The chunk contains the copyright notice for the COMP1531 Major Project, outlining the restrictions on reproducing or distributing the assignment materials and the consequences of infringement, which is relevant to the overall guidelines and policies governing the project.",
                "content": "## \u00a9\ufe0f Copyright Notice\nReproducing, publishing, posting, distributing or translating this assignment is an infringement of copyright and will be referred to UNSW Student Conduct and Integrity for action."
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\src\\auth.js",
        "chunks": [
            {
                "summary": "From assessments -> project -> src -> auth.js: This file is empty.",
                "content": ""
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\src\\dataStore.js",
        "chunks": [
            {
                "summary": "From assessments -> project -> src -> dataStore.js: This chunk defines a JavaScript module that initializes an empty data object and provides a function, `getData()`, to access this object. It includes example usage demonstrating how to manipulate an array of names within the data object.",
                "content": "// YOU MAY MODIFY THIS OBJECT BELOW\nlet data = {};\n\n// YOU MAY MODIFY THIS OBJECT ABOVE\n\n// YOU SHOULDNT NEED TO MODIFY THE FUNCTIONS BELOW IN ITERATION 1\n\n/*\nExample usage\n  let store = getData()\n  console.log(store) # Prints { 'names': ['Hayden', 'Tam', 'Rani', 'Giuliana', 'Rando'] }\n\n  store.names.pop() // Removes the last name from the names array\n  store.names.push('Jake') // Adds 'Jake' to the end of the names array\n\n  console.log(store) # Prints { 'names': ['Hayden', 'Tam', 'Rani', 'Giuliana', 'Jake'] }\n*/\n\n// Use getData() to access the data\nfunction getData() {\n  return data;\n}\n\nexport { getData };\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\src\\echo.js",
        "chunks": [
            {
                "summary": "From assessments -> project -> src -> echo.js: This chunk contains the implementation of a JavaScript function named `echo`, which checks if the input value has a property named `echo` and returns an error message if it does. It is part of a module that exports the `echo` function for use in other parts of the application. The comment at the beginning indicates that the file should not be deleted before a specific iteration in a development process.",
                "content": "// Do not delete this file before iteration 3\nfunction echo(value) {\n  if (value.echo && value.echo === 'echo') {\n    // Return a descriptive error message for easy debugging\n    return { error: 'Cannot echo an object with the property \\'echo\\'.' };\n  }\n  return value;\n}\n\nexport { echo };\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\src\\echo.test.js",
        "chunks": [
            {
                "summary": "From assessments -> project -> src -> echo.test.js: This chunk contains unit tests for the `echo` function, verifying its behavior with valid and invalid inputs, and is part of a JavaScript testing file.",
                "content": "// Do not delete this file before iteration 3\nimport { echo } from './echo.js';\n\ntest('Test successful echo', () => {\n  let result = echo('1');\n  expect(result).toBe('1');\n  result = echo('abc');\n  expect(result).toBe('abc');\n});\n\ntest('Test invalid echo', () => {\n  expect(echo({ echo: 'echo' })).toMatchObject({ error: expect.any(String) });\n});\n"
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\src\\other.js",
        "chunks": [
            {
                "summary": "From assessments -> project -> src -> other.js: This file is empty.",
                "content": ""
            }
        ]
    },
    {
        "filePath": "./assessments\\project\\src\\quiz.js",
        "chunks": [
            {
                "summary": "From assessments -> project -> src -> quiz.js: This file is empty.",
                "content": ""
            }
        ]
    }
]